#+TITLE: Emacs Settings
#+AUTHOR: sync0
#+EMAIL: cantorlunae@gmail.com
# Initial visualization settings.
#+STARTUP: indent showeverything nostars
# Necessary to export code from Emacs org mode to elisp. 
#+PROPERTY: header-args :tangle yes
* Introduction 
This is my Emacs configuration file. As the sloppy code herein attests, I
am not a programmer. I use Emacs primarily for taking notes and writing
academic articles, so these settings reflect that usage. 
** A Few Tips
 - In Org mode, ~<s + tab~ creates a code block. To make it executable,
   add the words ~emacs-lisp~ to the first line, right after ~#+BEGIN_SRC~.
 - The location for hunspell dictionaries should be in
   /usr/share/hunspell. Otherwise, an error arises that I was unable to solve.
* Configuration
  Some of the settings in this part are necessary before loading any Emacs
packages, so they must be placed in the beginning of the configuration
file. Some other settings do not require this position, but I have included
them here for ease of finding. 
** Tangling 
   This code sets up tangling to byte-compile the /init.org/ file
   automatically on save. Byte compiling this file speeds up Emacs on
   startup. Likewise, when byte-compiling, Emacs displays whether there are
   any errors or warnings, which simplifies debugging.

   #+BEGIN_SRC emacs-lisp
     (defun tangle-init ()
       "If the current buffer is 'init.org' the code-blocks are
     tangled, and the tangled file is compiled."
       (when (equal (buffer-file-name)
                    (expand-file-name (concat user-emacs-directory "init.org")))
         ;; Avoid running hooks when tangling.
         (let ((prog-mode-hook nil))
           (org-babel-tangle)
           (byte-compile-file (concat user-emacs-directory "init.el")))))
     (add-hook 'after-save-hook 'tangle-init)
   #+END_SRC 
** Package Management
These settings configure Emacs package manager and the package repositories.
   #+BEGIN_SRC emacs-lisp
     ;; Initialize Emac's package manager.
     (package-initialize)

     ;; Set up the package repositories.
     (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
     ;;     (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
     (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))

     (setq package-check-signature nil)
   #+END_SRC
*** Use-package
 [[https://github.com/jwiegley][jwiegley's]] ~use-package~ macro simplifies package configuration in the ~.emacs~
 startup file for faster startup and easier organization.
 #+BEGIN_SRC emacs-lisp
   ;; Verify that "use-package" is installed.
   (unless (package-installed-p 'use-package)
     ;; Refresh contents of package list.
     (package-refresh-contents)
     ;; Install "use-package."
     (package-install 'use-package))

   (setq use-package-verbose t)

   ;; Activate "use-package." 
   (require 'use-package)
   ;; Necessary to allow use-package to bind keys through ":bind".
   (require 'bind-key)
 #+END_SRC 
** General Settings
*** Scratch Message
 The following code changes the Emacs welcome message in the ~scratch~
 buffer. I use a fragment from the chapter "Where I Lived, and What I Lived
 for" from Thoreau's /Walden, or, Life in the Woods/ (1854). 
 #+BEGIN_SRC emacs-lisp
   (setq initial-scratch-message ";;
   ;; 
   ;; WHERE I LIVED, AND WHAT I LIVED FOR
   ;; 
   ;; I went to the woods because I wished to live deliberately, to
   ;; front only the essential facts of life, and see if I could not
   ;; learn what it had to teach, and not, when I came to die, discover
   ;; that I had not lived. I did not wish to live what was not life,
   ;; living is so dear; nor did I wish to practise resignation, unless
   ;; it was quite necessary. I wanted to live deep and suck out all
   ;; the marrow of life, to live so sturdily and Spartan-like as to
   ;; put to rout all that was not life, to cut a broad swath and shave
   ;; close, to drive life into a corner, and reduce it to its lowest
   ;; terms, and, if it proved to be mean, why then to get the whole
   ;; and genuine meanness of it, and publish its meanness to the
   ;; world; or if it were sublime, to know it by experience, and be
   ;; able to give a true account of it in my next excursion.
   ;; 
   ;; 
   ;; Henry David Thoreau, Walden (1854)")
   #+END_SRC 
*** User Information
 #+BEGIN_SRC emacs-lisp
   (setq user-full-name "Carlos Alberto Rivera Carreño"
         user-mail-address "cantorlunae@gmail.com")
 #+END_SRC 
*** Mode Line
  #+BEGIN_SRC emacs-lisp
    ;; Display time in modeline.
    (setq display-time-string-forms
          '((propertize (format-time-string " %H:%M " now) 'face 'bold)))
    (display-time-mode 1)

    ;; (display-battery-mode 1)
    (use-package fancy-battery
      :hook
      (after-init . fancy-battery-mode))

    (setq    inhibit-splash-screen t
             echo-keystrokes 0.1
             auto-revert-interval 1)

    ;; mode-line-format nil

    ;; Workspace keybindgs
    (defun toggle-mode-line () 
      "toggles the modeline on and off"
      (interactive) 
      (setq mode-line-format
            (if (equal mode-line-format nil)
                (default-value 'mode-line-format)) )
      (redraw-display))
    #+END_SRC 
*** Line numbers
After version 26, Emacs has native support for line numbers. 

    #+BEGIN_SRC emacs-lisp
    (when (version<= "26.0.50" emacs-version )
    (global-display-line-numbers-mode))
    #+END_SRC 
*** Remove Annoying Toolbars
    #+BEGIN_SRC emacs-lisp
      (tool-bar-mode -1) 
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
      (menu-bar-showhide-fringe-menu-customize-disable)

      ;; In case I need those annoying toolbars back, I bind them:
      (global-set-key (kbd "<f10>") 'toggle-mode-line)
      (global-set-key (kbd "<f8>") 'tool-bar-mode)
      (global-set-key (kbd "<f9>") 'menu-bar-mode)
      #+END_SRC 
*** Appeareance
    #+BEGIN_SRC emacs-lisp
      ;; begin maxmized
      (add-to-list 'default-frame-alist '(fullscreen . maximized))

      (setq-default                    
       ;; Use spaces instead of tabs
       indent-tabs-mode nil              
       ;; Split verticly by default
       split-width-threshold 0         
       ;; Split verticly by default
       split-height-threshold nil        
       ;; disable bidirectional text for tiny performance boost
       bidi-display-reordering nil 
       ;; don't blink--too distracting
       blink-matching-paren nil    
       ;; hide cursors in other windows
       cursor-in-non-selected-windows nil  
       frame-inhibit-implied-resize t
       ;; avoid ugly problèmes with gît-gutter 
       fringes-outside-margins t
       ;; left-margin-width 3
       ;; right-margin-width 7
       left-fringe-width 3
       right-fringe-width 0
       ;; remove continuation arrow on right fringe
       fringe-indicator-alist (delq (assq 'continuation fringe-indicator-alist)
                                    fringe-indicator-alist)
       highlight-nonselected-windows nil
       image-animate-loop t
       indicate-buffer-boundaries nil
       indicate-empty-lines nil
       max-mini-window-height 0.3
       )

      ;; highlight matching delimiters
      (setq show-paren-delay 0.1
            show-paren-highlight-openparen t
            show-paren-when-point-inside-paren t)
      (show-paren-mode 1)

      ;; On graphical displays, you can use window dividers in order to separate
      ;; windows visually.
      (setq-default window-divider-default-places t
                    window-divider-default-bottom-width 0
                    window-divider-default-right-width 1)
      (add-hook 'emacs-startup-hook #'window-divider-mode)
 #+END_SRC
*** Bookmarks
 #+BEGIN_SRC emacs-lisp
     ;; Bookmarks directory
     (setq bookmark-default-file (concat user-emacs-directory "bookmarks")
           bookmark-save-flag 1)
 #+END_SRC 
*** Autosave
 #+BEGIN_SRC emacs-lisp
     (setq auto-save-interval 100
              auto-save-timeout 60)
 #+END_SRC 
*** CUSTOM
 #+BEGIN_SRC emacs-lisp
     ;; Set CUSTOM directory
     (setq custom-file (expand-file-name "custom_settings.el" user-emacs-directory))
     (load custom-file t)
 #+END_SRC 
*** Sane Defaults
    #+BEGIN_SRC emacs-lisp
            ;; Remove yes-no EMACS inconsistency
            (fset 'yes-or-no-p 'y-or-n-p)

            ;; set the default encoding system
            ;; (prefer-coding-system 'utf-8)
            (set-language-environment 'utf-8)
            (set-default-coding-systems 'utf-8)
            (set-terminal-coding-system 'utf-8)
            (set-keyboard-coding-system 'utf-8)
            (set-selection-coding-system 'utf-8)
            (setq default-file-name-coding-system 'utf-8)
            (setq locale-coding-system 'utf-8)

            ;; (if (boundp buffer-file-coding-system)
            ;;     (setq buffer-file-coding-system 'utf-8)
            ;;   (setq default-buffer-file-coding-system 'utf-8))

            ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
            (when (display-graphic-p)
              (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
 #+END_SRC
** Text settings
*** Set default faces
 #+BEGIN_SRC emacs-lisp
   ;; select default faces
   ;; (set-face-attribute 'default nil :font "Fira Mono")

   ;; adjust font size according to screen resolution (when I use dual monitor setup)
   (if (> (display-pixel-width) 2000)
       ;; external monitor font size
       (progn
         ;; interline spacing
         (set-face-attribute 'default nil 
                             :family "Source Code Pro"
                             :height 120)
         (setq line-spacing 0))
     ;; laptop font size
     (progn
       ;; interline spacing
       (set-face-attribute 'default nil 
                           :family "Source Code Pro"
                           :height 115)
       (setq line-spacing 0)))

   (defun my-buffer-face-mode-fixed ()
     "Sets a fixed width (monospace) font in current buffer"
     (if (> (display-pixel-width) 2000)
         ;; external monitor font size
         (setq buffer-face-mode-face '(:family "Source Code Pro" :height 120)) 
       ;; laptop font size
       (setq buffer-face-mode-face '(:family "Source Code Pro" :height 115)))
     (buffer-face-mode))

   ;; Variable-width faces 
   (defun my-buffer-face-mode-variable ()
     "Set font to a variable width (proportional) fonts in current buffer"
     (if (> (display-pixel-width) 2000)
         ;; external monitor font size
       (setq buffer-face-mode-face '(:family "Linux Libertine" :height 140))
       ;; laptop font size
         (setq buffer-face-mode-face '(:family "Linux Libertine" :height 150)))
     (buffer-face-mode))

   ;; Set default font faces for Info, ERC, and Org
   (add-hook 'erc-mode-hook 'my-buffer-face-mode-variable)
   (add-hook 'Info-mode-hook 'my-buffer-face-mode-variable)
   (add-hook 'text-mode-hook 'my-buffer-face-mode-variable)

   ;; Allow narrowing
   (put 'narrow-to-region 'disabled nil)

   ;; Sentences end with single espace
   (setq sentence-end-double-space nil
   ;; Word wrap
   org-startup-truncated t)
  #+END_SRC
*** Add blank lines
#+BEGIN_SRC emacs-lisp
  (defun sync0-insert-line-below ()
  "Insert an empty line below the current line."
  (interactive)
  (save-excursion
    (end-of-line)
    (open-line 1)))

(defun sync0-insert-line-above ()
  "Insert an empty line above the current line."
  (interactive)
  (save-excursion
    (end-of-line 0)
    (open-line 1)))
  #+END_SRC 
*** Auto-fill settings
 #+BEGIN_SRC emacs-lisp
      (setq-default fill-column 75)
      (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
      (add-hook 'LaTeX-mode-hook 'turn-on-visual-line-mode)
      ;; (add-hook 'text-mode-hook 'turn-off-auto-fill)
      ;; (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
      ;; respect de la typographie française par fill
      ;;(setq fill-nobreak-predicate '(fill-french-nobreak-p))

(defun my-nobreak-p ()
  (and (looking-at "+[[:alnum:]]")
       (looking-back "^\\\[A-z]+{.+" (line-beginning-position))))
(add-hook 'fill-nobreak-predicate #'my-nobreak-p)

      (add-hook 'org-mode-hook 'turn-on-auto-fill)

  #+END_SRC
*** Replace smart quotes with straight quotes 
Replace smart quotes with straight quotes so that spell check can recognize
words with contractions like “don’t” and “can’t.” For when I paste text in
that I’ve copied from the web.
#+BEGIN_SRC emacs-lisp
(setq smart-quote-regexp-replacements
'(
("\\(\\w\\)- " . "\\1")
("\\(\\w\\)\\(  [-—] \\|—\\)" . "\\1---")

))

(defun replace-smart-quotes-regexp (beg end)
  "Replace 'smart quotes' in buffer or region with ascii quotes."
  (interactive "r")
  (mapcar
   (lambda (r)
     (save-excursion
       (replace-regexp (car r) (cdr r) nil beg (min end (point-max)))))
   smart-quote-regexp-replacements)
  )

(defun replace-smart-quotes (beg end)
  "Replace 'smart quotes' in buffer or region with ascii quotes."
  (interactive "r")
;;(while (search-forward-regexp "- " nil to)
;; (replace-match "") nil t)
;; add alpha. And replace the alpha.

  (replace-smart-quotes-regexp beg end)
  (format-replace-strings '(
                            ("\x201C" . "``")
                            ("“" . "``")
                            ("\x201D" . "''")
                            ("”" . "''")
                            ("\x2018" . "`")
                            ("\x2019" . "'")
                            ("’" . "'")
;;("''" . "\"")
;;("​" . "")
;;("…" . "...")
("…" . "\\ldots")
("..." . "\\ldots")
;;("• " . "- ")
;;(" " . "")
("  " . " "))
                       nil   beg (min end (point-max))))
#+END_SRC 
** List of recent files
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :config
    (setq recentf-max-saved-items 100
     recentf-max-menu-items 10)
    (recentf-mode +1)
  (define-key recentf-dialog-mode-map (kbd "j") 'next-line)
  (define-key recentf-dialog-mode-map (kbd "k") 'previous-line))
#+END_SRC
** Abbrev Mode
#+BEGIN_SRC emacs-lisp
  ;; Avoid expansion character insertion
  (defun dont-insert-expansion-char ()  t)    ;; this is the "hook" function
  ;; (defun dont-insert-expansion-char ()  t)    ;; this is the "hook" function
  (put 'dont-insert-expansion-char 'no-self-insert t)   ;; the hook should have a "no-self-insert"-property set 

  ;; Tell emacs where to read abbrev
  (setq abbrev-file-name "~/.emacs.d/abbrev_defs")    
  ;; Avoid errors when reading abbrev_defs
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file))

  (setq-default abbrev-mode t)
  ;; save abbrevs when files are saved
  (setq save-abbrevs t              
        save-abbrevs 'silently)

  ;; try emacs to accept ' as a word constituent. 
  (setq dabbrev-abbrev-char-regexp  "\\sw")
#+END_SRC
*** Add abbrevs 
#+BEGIN_SRC emacs-lisp
(defun sync0-define-local-abbrev (x y)
  "Defines a new abbrev for current local abbrev table."
  (interactive "sEnter abbrev: 
sEnter expansion: ")
    (when (and x y (not (equal x y)))
  (define-abbrev local-abbrev-table x y)
  (message "\"%s\" now expands to \"%s\" %sally"
           x y "loc")))
  #+END_SRC 
*** Auto-update abbrev table on save
#+BEGIN_SRC emacs-lisp
  ;;     (defun sync0-update-abbrevs ()
  ;;       "Update loaded abbrev tables after changes to abbrev file"
  ;; (read-abbrev-file))

  (add-hook 'after-save-hook (lambda ()
                               (when 
                                   (equal buffer-file-name "/home/sync0/.emacs.d/abbrev_defs")
                                 (read-abbrev-file))))
  #+END_SRC 
** Elisp evaluation
#+BEGIN_SRC emacs-lisp
  ;; (use-package lisp-mode
  ;; :defer t
  ;;   :init
  ;; (use-package eldoc
  ;;       :init
  ;;       (progn
  ;;         (add-hook 'emacs-lisp-mode-hook #'eldoc-mode)
  ;;         (add-hook 'lisp-interaction-mode-hook #'eldoc-mode)
  ;;         (add-hook 'ielm-mode-hook #'eldoc-mode))))

  ;; Have org-mode indent elips sections by default
  (setq org-src-tab-acts-natively t) 
#+END_SRC 
** LaTeX 
#+BEGIN_SRC emacs-lisp
  (defun sync0-latex-compile-after-save ()
  "Compile tex file on save"
      (when (bound-and-true-p LaTeX-mode) 
  (sync0-latex-compile)))

  (add-hook 'after-save-hook 'sync0-after-save-actions)

  (defun sync0-latex-fast-compile ()
    "Fast compile current file"
        (TeX-command "LaTeX" 'TeX-master-file))

  (defun sync0-after-save-actions ()
    "Used in `after-save-hook'."
    (when (equal this-command 'save-buffer)
      (when (equal major-mode 'latex-mode) 
        (sync0-latex-fast-compile))))

  #+END_SRC 
*** LaTeX changes package
 #+BEGIN_SRC emacs-lisp
   ;; (defvar sync0-tex-changes-id "sync0")

   (defun sync0-tex-changes-add ()
     "Inserts an \added command to a LaTeX document using the 'changes' package"
     (interactive)
     (insert "\\added{}")
     (goto-char (- (point) 2))
     (evil-insert-state)
     )

   (defun sync0-tex-changes-delete ()
     "Inserts an \delete command to a LaTeX document using the 'changes' package"
     (interactive)
     (if (use-region-p)
         (save-excursion
           (let ((low (region-beginning))
                 (high (region-end))
                 (command "\\deleted{"))
             (goto-char high)
             (insert "}")
             (goto-char low)
             (insert command)))
       (message "This command can only act on an active region")))

   (defun sync0-tex-changes-replace ()
     "Inserts an \replace command to a LaTeX document using the 'changes' package"
     (interactive)
     (if (use-region-p)
         (let ((low (region-beginning))
               (high (region-end))
               (command "\\replaced{}{"))
           (goto-char high)
           (insert "}")
           (goto-char low)
           (insert command)
           (goto-char (- (point) 2))
           (evil-insert-state))
       (message "This command can only act on an active region")))
   #+END_SRC 
** Backups 
*** Store all autosave files in the tmp dir
 #+BEGIN_SRC emacs-lisp 
 (setq auto-save-file-name-transforms
       `((".*" ,temporary-file-directory t)))
 #+END_SRC
*** Backups in backup dir
 #+BEGIN_SRC emacs-lisp 
   (setq backup-by-copying t
         backup-directory-alist '(("." . "~/.emacs.d/backups"))
         delete-old-versions t
         kept-new-versions 10
         kept-old-versions 0
         ;; use versioned backups
         version-control t
         ;; no lockfiles
         create-lockfiles nil) 
 #+END_SRC
* Packages 
** Highlight indentation
#+BEGIN_SRC emacs-lisp
     (use-package highlight-indentation
     :commands (highlight-indentation-mode highlight-indentation-current-column-mode))

  ;; ;; For modes with sub-par number fontification
  ;; (use-package highlight-numbers :commands highlight-numbers-mode)

  ;; languages like Lisp.
  (use-package rainbow-delimiters
    :hook (lisp-mode . rainbow-delimiters-mode)
    :config (setq rainbow-delimiters-max-face-count 3))
  #+END_SRC 
** All the icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons :after ivy
:config
;; ivy setup
(progn
(all-the-icons-ivy-setup)
;; improve performance 
(setq inhibit-compacting-font-caches t)))
#+END_SRC 
** Doom theme
#+BEGIN_SRC emacs-lisp
    (use-package doom-themes  
  :init
  (progn
      ;; (load-theme 'doom-one t)
      ;; (load-theme 'doom-one-light t)
      ;; (load-theme 'doom-vibrant t)
      ;; (load-theme 'doom-city-lights t)
      ;; (load-theme 'doom-dracula t)
      ;; (load-theme 'doom-Iosvkem t)
      ;; (load-theme 'doom-molokai t)
     (load-theme 'doom-nord t)
     ;; (load-theme 'doom-nord-light t)
     ;; (load-theme 'doom-opera t)
     ;; (load-theme 'doom-opera-light t)
      (load-theme 'doom-nova t)
      ;; (load-theme 'doom-peacock t)
      (load-theme 'doom-solarized-light t)
      ;; (load-theme 'doom-sourcerer t)
    (load-theme 'doom-spacegrey t))
      ;; (load-theme 'doom-tomorrow-night t)
      ;; (load-theme 'doom-tomorrow-day t))
      :config
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
            doom-themes-enable-italic t) ; if nil, italics is universally disabled
      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)
      ;; Enable custom neotree theme
  ;;    (doom-themes-neotree-config)  ; all-the-icons fonts must be installed!
      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))

    ;; Cycley between thèmes
   (use-package cycle-themes :load-path "~/.emacs.d/sync0_git/cycle-themes.el/" 
   :after doom-themes
     :init (setq cycle-themes-theme-list
         ;;  '(doom-spacegrey doom-nova doom-nord doom-solarized-light))
         ;;  '(doom-spacegrey doom-nova doom-solarized-light))
          ;; '(doom-one doom-one-light doom-vibrant doom-city-lights doom-Iosvkem doom-molokai doom-nord doom-nord-light doom-opera doom-opera-light doom-nova doom-peacock doom-solarized-light doom-sourcerer doom-spacegrey doom-tomorrow-night doom-tomorrow-day))
          ;; '(doom-vibrant doom-nord doom-opera-light doom-nova doom-solarized-light doom-sourcerer doom-spacegrey))
          '(doom-nord doom-nova doom-solarized-light doom-spacegrey))
           ;; '(doom-spacegrey doom-solarized-light))
     :config (cycle-themes-mode))
#+END_SRC 
** Doom modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline :after doom-themes
    :defer t
    :hook (after-init . doom-modeline-mode)
    ;; :init 
    :config
    (doom-modeline-def-modeline 'sync0-line
      '(bar modals matches buffer-info buffer-position selection-info)
      ;; '(bar evil-state xah-fly-keys matches buffer-info buffer-position selection-info)
      '(misc-info fancy-battery input-method buffer-encoding major-mode process vcs checker))
    ;; '(misc-info fancy-battery minor-modes input-method buffer-encoding major-mode process vcs checker))
    ;; '(bar workspace-number window-number evil-state god-state ryo-modal xah-fly-keys matches buffer-info remote-host buffer-position parrot selection-info)
    ;; '(misc-info persp-name lsp irc mu4e github debug fancy-battery minor-modes input-method buffer-encoding major-mode process vcs checker))

    ;; (setq doom-modeline-height 25)
    ;; How wide the mode-line bar should be (only respected in GUI Emacs).
    ;; (setq doom-modeline-bar-width 3)
    ;; (setq doom-modeline-major-mode-color-icon nil)
    ;; (setq  doom-modeline-minor-modes t)

    (defun setup-custom-doom-modeline ()
      (doom-modeline-set-modeline 'sync0-line 'default))

    (add-hook 'doom-modeline-mode-hook 'setup-custom-doom-modeline))

  ;; Display color icons for `major-mode'. It respects `all-the-icons-color-icons'.
  ;; (setq doom-modeline-major-mode-color-icon nil)
  ;; Whether display minor modes or ;; How tall the mode-line should be (only respected in GUI Emacs).
  ;; (setq doom-modeline-height 25)
  ;; How wide the mode-line bar should be (only respected in GUI Emacs).
  ;; (setq doom-modeline-bar-width 3)
  ;; Whether display github notifications or not. Requires `ghub` package.
  ;; (setq doom-modeline-github nil)
  ;; The interval of checking github.
  ;; (setq doom-modeline-github-interval (* 30 60))
  ;; Whether display environment version or not.
  ;; (setq doom-modeline-env-version t)
  ;; Whether display mu4e notifications or not. Requires `mu4e-alert' package.
  ;; (setq doom-modeline-mu4e t)
  ;; If non-nil, a word count will be added to the selection-info modeline segment.

  ;; (setq doom-modeline-enable-word-count t
  ;;  doom-modeline-minor-modes t))
  #+END_SRC 
** Spellchecking
 #+BEGIN_SRC emacs-lisp
   ;; Ispell configuration.
   (use-package ispell
     :config
     ;; Set up hunspell dictionaries
     (setq ispell-hunspell-dict-paths-alist
           '(("en_US-large" "/usr/share/hunspell/en_US-large.aff")
             ;; ("de_DE" "/usr/share/hunspell/de_DE.aff")
             ;; ("it_IT" "/usr/share/hunspell/it_IT.aff")
             ;; ("es_ANY" "/usr/share/hunspell/es_ANY.aff")
             ("fr_FR" "/usr/share/hunspell/fr_FR.aff")))

     (cond
      ;; try hunspell at first
      ;; if hunspell does NOT exist, use aspell
      ((executable-find "hunspell")
       (setq ispell-program-name "hunspell")
       ;;(setq ispell-local-dictionary "en_US")
       (setq ispell-local-dictionary-alist '(  
                                             ;; (nil "[[:alpha:]]" "[^[:alpha:]]" "['-]" t ("-d" "en_US-large" ) nil utf-8)
                                             ("en_US-large" "[[:alpha:]]" "[^[:alpha:]]" "['-]" t ("-d" "en_US-large" ) nil utf-8)
                                             ;; ("de_DE" "[[:alpha:]ÄÖÜéäöüß]" "[^[:alpha:]ÄÖÜéäöüß]" "['’-]" t ("-d" "de_DE") nil utf-8)
                                             ;; ("es_ANY" "[[:alpha:]ÁÉÍÓÚÄËÏÖÜÑáéíóúäëïöüñ]" "[^[:alpha:]ÁÉÍÓÚÄËÏÖÜÑáéíóúäëïöüñ]" "['’-]" t ("-d" "es_ANY") nil utf-8)
                                             ;; ("it_IT" "[[:alpha:]AEÉIOUàèéìòù]" "[^[:alpha:]AEÉIOUàèéìòù]" "['’-]" t ("-d" "it_IT") "~tex" nil utf-8)
                                             ("fr_FR" "[[:alpha:]ÀÂÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü]" "[^[:alpha:]ÀÂÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü]" "[’'-]" t ("-d" "fr_FR")  nil utf-8))))

      ((executable-find "aspell")
       (setq ispell-program-name "aspell")
       ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
       (setq ispell-extra-args '("--sug-mode=ultra"))))

     ;; Save a new word to personal dictionary without asking
     (setq ispell-silently-savep t)


     ;; ignore sections of files for spellcheck
     (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXEMPLE"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_equation" . "#\\+END_equation"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_labeling" . "#\\+END_labeling"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_equation*" . "#\\+END_equation*"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_align" . "#\\+END_align"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_align*" . "#\\+END_align*"))
     (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
     (add-to-list 'ispell-skip-region-alist '("\\$" . "\\$")))

   (use-package flyspell :after (org ispell)
     ;; :hook (text-mode . flyspell-mode)
     :config
     (setq ispell-parser 'tex)
     (setq flyspell-issue-message-flag nil))

   ;; check next highlighted word custom function
   ;; (defun flyspell-check-next-highlighted-word ()
   ;;   "Custom function to spell check next highlighted word"
   ;;   (interactive)
   ;;   (flyspell-goto-next-error)
   ;;   (ispell-word))

   ;; Avoid TeX syntax
   ;; (defun flyspell-ignore-tex ()
   ;;   (set (make-variable-buffer-local 'ispell-parser) 'tex))
   ;; (add-hook 'org-mode-hook 'flyspell-ignore-tex))
 #+END_SRC 
** Tex
#+BEGIN_SRC emacs-lisp
(use-package tex
:defer t
:ensure auctex
:config
(setq preview-gs-command "/usr/local/bin/gs")
(setq TeX-PDF-mode t))
#+END_SRC
** No Break Predicate
#+BEGIN_SRC emacs-lisp
(use-package nobreak-fade :load-path "~/.emacs.d/sync0/nobreak-fade.el" 
:after tex
;; :command nobreak-fade
:config
     (autoload 'nobreak-fade-single-letter-p "nobreak-fade")
     (add-hook 'fill-nobreak-predicate 'nobreak-fade-single-letter-p)
;; (add-hook 'tex-mode-hook 'nobreak-fade)
)
#+END_SRC
** EVIL mode 
   #+BEGIN_SRC emacs-lisp
                         ;; initializing
                         (use-package evil  :after (org ivy)
                           :bind (
                                  ;; ESC quits almost anything
                                  :map evil-normal-state-map
                                       ;;     ("ESC" . keyboard-quit)
                                       ;; quickly switch buffers
                                       ("M-h" . next-buffer)
                                       ("M-l" . previous-buffer)
                                       ("/" . swiper)
                                       ;; ("C-S-h" . evil-window-left)
                                       ;; ("C-S-j" . evil-window-down)
                                       ;; ("C-S-k" . evil-window-up)
                                       ;; ("C-S-l" . evil-window-right))
                              ;; :map evil-visual-state-map
                             ;; ("ESC" . keyboard-quit)
                             ;; ("M-x" . counsel-M-x)
                           :map minibuffer-local-map
                           ("ESC" . minibuffer-keyboard-quit)
                           :map minibuffer-local-ns-map
                           ("ESC" . minibuffer-keyboard-quit)
                           :map minibuffer-local-completion-map
                           ("ESC" . minibuffer-keyboard-quit)
                           :map minibuffer-local-must-match-map
                           ("ESC" . minibuffer-keyboard-quit)
                           :map minibuffer-local-isearch-map
                           ("ESC" . minibuffer-keyboard-quit))
                           :init
                    (evil-mode 1)
                     ; (setq evil-want-keybinding nil)
                           :config
                           ;(evil-mode 1)

                           ;;(add-hook 'org-mode-hook (lambda () (evil-mode 1)))
                           ;;(add-hook 'after-init-hook '#evil-mode) 
                           (add-to-list 'evil-emacs-state-modes 'cfw:details-mode)

                           ;; input methods 
                           ;; set default input method
                           ;; (setq default-input-method "TeX")
                           ;; no input method for evil normal state
                           (add-hook 'evil-normal-state-entry-hook
                                     (lambda () (set-input-method 'nil)))
                           ;; Spanish

                           ;; spanish-postfix for evil insert mode
                           ;;(add-hook 'evil-insert-state-entry-hook
                           ;; (lambda () (set-input-method "spanish-postfix")))

                           ;; spanish-postfix for evil insert mode
                           ;;(add-hook 'evil-insert-state-entry-hook
                           ;; (lambda () (set-input-method "spanish-postfix")))

                           ;; German 

                           ;; german-postfix for evil insert mode
                           ;;(add-hook 'evil-insert-state-entry-hook
                           ;;(lambda () (set-input-method "german-postfix")))

                           ;; EVIL org
                           ;; setup functions
                           (defun clever-insert-item ()
                             "Clever insertion of org item."
                             (if (not (org-in-item-p))
                                 (insert "\n")
                               (org-insert-item)))

                           (defun evil-org-eol-call (fun)
                             "Go to end of line and call provided function.
                                     FUN function callback"
                             (end-of-line)
                             (funcall fun)
                             (evil-append nil))

                           ;; insert whitespace
                           (defun sync0-insert-whitespace ()
                             " Add a whitespace"
                             (interactive)
                             (insert " "))

                           ;; insert whitespace
                           (defun sync0-insert-whitespace ()
                             " Add a whitespace"
                             (interactive)
                             (insert " "))

                           ;; key bindings
                           ;; redefinition evils normal mode map
                           (evil-define-key 'normal org-mode-map
                             "<" 'outline-previous-visible-heading
                             ">" 'outline-next-visible-heading
                              (kbd "C->") 'org-forward-heading-same-level
                             (kbd "C-<") 'org-backward-heading-same-level
                             "H" 'org-metaleft
                             "L" 'org-metaright
                             "K" 'org-metaup
                             "J" 'org-metadown
                             "k" 'previous-line
                             "j" 'next-line
                              ;; "m" 'set-mark-command
                             ;; "s" 'fill-paragraph
                             ;; "S" 'sync0-insert-line-below
                             ;; (kbd "SPC") 'sync0-insert-whitespace
                             "o" '(lambda () (interactive) (evil-org-eol-call 'clever-insert-item))
                             "O" '(lambda () (interactive) (evil-org-eol-call 'org-insert-heading))
                             "$" 'org-end-of-line
                             "^" 'org-beginning-of-line
                             "[" 'backward-sentence
                             "]" 'forward-sentence
                             "{" 'org-backward-paragraph
                             "}" 'org-forward-paragraph
                             "-" 'org-cycle-list-bullet
                             (kbd "<tab>") 'org-cycle)


                           (evil-define-key 'normal global-map
                             "s" 'fill-paragraph
                             "S" 'sync0-insert-line-below
                             (kbd "SPC") 'sync0-insert-whitespace)

                           (evil-define-key 'normal LaTeX-mode-map
                             "k" 'previous-line
                             "j" 'next-line
                             ;;  "m" 'set-mark-command
                             "q" 'fill-paragraph
                             "Q" 'sync0-insert-line-below
                             (kbd "SPC") 'sync0-insert-whitespace
                             "[" 'backward-sentence
                             "]" 'forward-sentence)

                           (evil-define-key 'visual LaTeX-mode-map
                             "q" 'highlight-changes-remove-highlight
                             "ma" 'sync0-tex-changes-add
                             "md" 'sync0-tex-changes-delete
                             "mr" 'sync0-tex-changes-replace)

                           (evil-define-key 'visual org-mode-map
                             "q" 'highlight-changes-remove-highlight
                             "ma" 'sync0-tex-changes-add
                             "md" 'sync0-tex-changes-delete
                             "mr" 'sync0-tex-changes-replace
                             "e" 'org-emphasize)


          ;; mu4e
                      (evil-define-key 'visual mu4e-compose-mode-map
                        "gg" 'mu4e-compose-goto-top
                        "G" 'mu4e-compose-goto-bottom)

                           (evil-define-key 'normal mu4e-main-mode-map 
                         "J" 'mu4e~headers-jump-to-maildir
                         "j" 'next-line
                         "k" 'previous-line
                         "u" 'mu4e-update-mail-and-index
                         "gr" 'revert-buffer
                         "b" 'mu4e-headers-search-bookmark
                         "B" 'mu4e-headers-search-bookmark-edit
                         "N" 'mu4e-news
                         ";" 'mu4e-context-switch
                         "H" 'mu4e-display-manual
                         "C" 'mu4e-compose-new
                         "cc" 'mu4e-compose-new
                         "x" 'mu4e-kill-update-mail
                         "A" 'mu4e-about
                         "f" 'smtpmail-send-queued-mail
                         "m" 'mu4e~main-toggle-mail-sending-mode
                         "s" 'mu4e-headers-search
                         "q" 'mu4e-quit)

                           (evil-define-key 'normal mu4e-headers-mode-map 
                         "q" 'mu4e~headers-quit-buffer
                         "J" 'mu4e~headers-jump-to-maildir
                         "C" 'mu4e-compose-new
                         "E" 'mu4e-compose-edit
                         "F" 'mu4e-compose-forward
                         "R" 'mu4e-compose-reply
                         "cc" 'mu4e-compose-new
                         "ce" 'mu4e-compose-edit
                         "cf" 'mu4e-compose-forward
                         "cr" 'mu4e-compose-reply
                         "o" 'mu4e-headers-change-sorting
                         "j" 'mu4e-headers-next
                         "k" 'mu4e-headers-prev
                         "gr" 'mu4e-headers-rerun-search
                         "b" 'mu4e-headers-search-bookmark
                         "B" 'mu4e-headers-search-bookmark-edit
                         ";" 'mu4e-context-switch
                         (kbd "RET") 'mu4e-headers-view-message
                         "/" 'mu4e-headers-search-narrow
                         "s" 'mu4e-headers-search
                         "S" 'mu4e-headers-search-edit
                         "x" 'mu4e-mark-execute-all
                         "a" 'mu4e-headers-action
                         "*" 'mu4e-headers-mark-for-something ; TODO: Don't override evil-seach-word-forward?
                         "&" 'mu4e-headers-mark-custom
                         "A" 'mu4e-headers-mark-for-action
                         "m" 'mu4e-headers-mark-for-move
                         "r" 'mu4e-headers-mark-for-refile
                         "D" 'mu4e-headers-mark-for-delete
                         "d" 'mu4e-headers-mark-for-trash
                         "=" 'mu4e-headers-mark-for-untrash
                         "u" 'mu4e-headers-mark-for-unmark
                         "U" 'mu4e-mark-unmark-all
                         "?" 'mu4e-headers-mark-for-unread
                         "!" 'mu4e-headers-mark-for-read
                         "%" 'mu4e-headers-mark-pattern
                         "+" 'mu4e-headers-mark-for-flag
                         "-" 'mu4e-headers-mark-for-unflag
                         "[" 'mu4e-headers-prev-unread
                         "]" 'mu4e-headers-next-unread
                         "gk" 'mu4e-headers-prev-unread
                         "gj" 'mu4e-headers-next-unread
                         (kbd "C-j") 'mu4e-headers-next
                         (kbd "C-k") 'mu4e-headers-prev
                         "zr" 'mu4e-headers-toggle-include-related
                         "zt" 'mu4e-headers-toggle-threading
                         "zd" 'mu4e-headers-toggle-skip-duplicates
                         "gl" 'mu4e-show-log
                         "gv" 'mu4e-select-other-view)
                         ;; "T" '(lambda ()
                         ;;       (interactive)
                         ;;       (mu4e-headers-mark-thread nil '(read))))

                           (evil-define-key 'normal mu4e-compose-mode-map 
                         "gg" 'mu4e-compose-goto-top
                         "G" 'mu4e-compose-goto-bottom)

                           (evil-define-key 'normal mu4e-view-mode-map 
                         " " 'mu4e-view-scroll-up-or-next
                         (kbd  "TAB") 'shr-next-link
                         (kbd  "<backtab>") 'shr-next-link
                         "q" 'mu4e~view-quit-buffer
                         "gx" 'mu4e-view-go-to-url
                         "gX" 'mu4e-view-fetch-url
                         "C" 'mu4e-compose-new
                         "H" 'mu4e-view-toggle-html
                         ;; "E"               mu4e-compose-edit
                         ;; "F"               mu4e-compose-forward
                         "R" 'mu4e-compose-reply
                         "cc" 'mu4e-compose-new
                         "ce" 'mu4e-compose-edit
                         "cf" 'mu4e-compose-forward
                         "cr" 'mu4e-compose-reply
                         "p" 'mu4e-view-save-attachment
                         "P" 'mu4e-view-save-attachment-multi ; Since mu4e 1.0, -multi is same as normal.
                         "O" 'mu4e-headers-change-sorting
                         "o" 'mu4e-view-open-attachment
                         "A" 'mu4e-view-attachment-action
                         "a" 'mu4e-view-action
                         "J" 'mu4e~headers-jump-to-maildir
                         "[" 'mu4e-view-headers-prev-unread
                         "]" 'mu4e-view-headers-next-unread
                         "gk" 'mu4e-view-headers-prev-unread
                         "gj" 'mu4e-view-headers-next-unread
                         (kbd"C-j") 'mu4e-view-headers-next
                         (kbd "C-k") 'mu4e-view-headers-prev
                         "x" 'mu4e-view-marked-execute
                         "&" 'mu4e-view-mark-custom
                         "*" 'mu4e-view-mark-for-something   ; TODO: Don't override "*".
                         "m" 'mu4e-view-mark-for-move
                         "r" 'mu4e-view-mark-for-refile
                         "D" 'mu4e-view-mark-for-delete
                         "d" 'mu4e-view-mark-for-trash
                         "=" 'mu4e-view-mark-for-untrash
                         "u" 'mu4e-view-unmark
                         "U" 'mu4e-view-unmark-all
                         "?" 'mu4e-view-mark-for-unread
                         "!" 'mu4e-view-mark-for-read
                         "%" 'mu4e-view-mark-pattern
                         "+" 'mu4e-view-mark-for-flag
                         "-" 'mu4e-view-mark-for-unflag
                         "zr" 'mu4e-headers-toggle-include-related
                         "zt" 'mu4e-headers-toggle-threading
                         "za" 'mu4e-view-toggle-hide-cited
                         "gl" 'mu4e-show-log
                         "s" 'mu4e-view-search-edit
                         "|" 'mu4e-view-pipe
                         "." 'mu4e-view-raw-message
                         (kbd "C--") 'mu4e-headers-split-view-shrink
                         (kbd "C-+") 'mu4e-headers-split-view-grow)
                         ;; "T" '(lambda ()
                         ;;       (interactive)
                         ;;       (mu4e-headers-mark-thread nil '(read))))
                         ;; ,@(when evil-want-C-u-scroll
                             ;; '("\C-u" evil-scroll-up))))

          ;; Bookmarks
               (evil-define-key 'normal bookmark-bmenu-mode-map
                   "q" 'quit-window
                   "gr" 'revert-buffer
                   "g?" 'describe-mode
                   "j" 'next-line
                   "p" 'previous-line
                   "J" 'bookmark-bmenu-this-window
                   "2" 'bookmark-bmenu-2-window
                   "1" 'bookmark-bmenu-1-window
                   "x" 'bookmark-bmenu-execute-deletions
                   "d" 'bookmark-bmenu-delete
                   "/" 'bookmark-bmenu-search
                   "r" 'bookmark-bmenu-rename
                   "R" 'bookmark-bmenu-relocate
                   "L" 'bookmark-bmenu-load
                   "t" 'bookmark-bmenu-toggle-filenames
                   "a" 'bookmark-bmenu-show-annotation
                   "A" 'bookmark-bmenu-show-all-annotations
                   "s" 'bookmark-bmenu-save
                   "W" 'bookmark-bmenu-locate
                   "E" 'bookmark-bmenu-edit-annotation
                   "D" 'bookmark-bmenu-delete-backwards
                   ;; mark
                   "u" 'bookmark-bmenu-unmark
                   "m" 'bookmark-bmenu-mark
                   ;; open
                   "o" 'bookmark-bmenu-select
                   "O" 'bookmark-bmenu-other-window
                   "go" 'bookmark-bmenu-other-window
                   "gO" 'bookmark-bmenu-switch-other-window
                   (kbd "<return>") 'bookmark-bmenu-this-window
                   (kbd "S-<return>") 'bookmark-bmenu-other-window
                   (kbd "M-<return>") 'bookmark-bmenu-switch-other-window)

               ;; (defun evil-collection-ivy-setup ()
               ;;   "Set up `evil' bindings for `ivy-mode'."
               ;;   (evil-define-key nil 'ivy-mode-map
               ;;     (kbd "<escape>") 'minibuffer-keyboard-quit)

                 (evil-define-key 'normal ivy-occur-mode-map
                   ;; [mouse-1] 'ivy-occur-click
                   (kbd "<return>") 'ivy-occur-press-and-switch
                   "j" 'ivy-occur-next-line
                   "k" 'ivy-occur-previous-line
                   "h" 'evil-backward-char
                   "l" 'evil-forward-char
                   "g" nil
                   "gg" 'evil-goto-first-line
                   "gf" 'ivy-occur-press
                   "ga" 'ivy-occur-read-action
                   "go" 'ivy-occur-dispatch
                   "gc" 'ivy-occur-toggle-calling
                   ;; refresh
                   "gr" 'ivy-occur-revert-buffer
                   ;; quit
                   "q" 'quit-window)

                 ;; (when evil-want-C-d-scroll
                 ;;   (evil-collection-define-key 'normal 'ivy-occur-grep-mode-map
                 ;;     "D" 'ivy-occur-delete-candidate
                 ;;     (kbd "C-d") 'evil-scroll-down))

                 (evil-define-key 'visual ivy-occur-grep-mode-map
                   "j" 'evil-next-line
                   "k" 'evil-previous-line)

                 (evil-define-key 'normal ivy-occur-grep-mode-map
                   "d" 'ivy-occur-delete-candidate
                   (kbd "C-x C-q") 'ivy-wgrep-change-to-wgrep-mode
                   "i" 'ivy-wgrep-change-to-wgrep-mode
                   "gd" 'ivy-occur-delete-candidate
                   ;; [mouse-1] 'ivy-occur-click
                   (kbd "<return>") 'ivy-occur-press-and-switch
                   "j" 'ivy-occur-next-line
                   "k" 'ivy-occur-previous-line
                   "h" 'evil-backward-char
                   "l" 'evil-forward-char
                   "g" nil
                   "gg" 'evil-goto-first-line
                   "gf" 'ivy-occur-press
                   "gr" 'ivy-occur-revert-buffer
                   "ga" 'ivy-occur-read-action
                   "go" 'ivy-occur-dispatch
                   "gc" 'ivy-occur-toggle-calling
                   "0" 'evil-digit-argument-or-evil-beginning-of-line
                   ;; quit
                   "q" 'quit-window)


                   (evil-define-key 'normal ivy-minibuffer-map
                     (kbd "<escape>") 'abort-recursive-edit
                     (kbd "<return>") 'exit-minibuffer
                     (kbd "C-m") 'ivy-done
                     "j" 'ivy-next-line
                     "k" 'ivy-previous-line)

                   (evil-define-key 'insert ivy-minibuffer-map
                     (kbd "<backspace>") 'ivy-backward-delete-char
                     (kbd "C-r") 'ivy-reverse-i-search
                     (kbd "C-n") 'ivy-next-line
                     (kbd "C-p") 'ivy-previous-line)

                           (setq ;; evil-mode-line-format nil
                                 ;; turn off auto-indent 
                                 evil-auto-indent nil
                                 ;; Change color of evil cursor
                                 evil-insert-state-cursor '(bar "#dc322f")
                                 evil-normal-state-cursor '(box "#268bd2")
                                 evil-visual-state-cursor '(box "#d33682"))

                           ;; Improve EVIL behavior with visual lines
                           ;; Make movement keys work like they should
                           (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
                           (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
                           (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
                           (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)


                           (defvar +evil-esc-hook '(t)
                             "A hook run after ESC is pressed in normal mode (invoked by
                              `evil-force-normal-state'). If any hook returns non-nil, all hooks after it are ignored.")

                           (defun +evil*attach-escape-hook ()
                             "Run the `+evil-esc-hook'."
                             (cond ((minibuffer-window-active-p (minibuffer-window))
                                    ;; quit the minibuffer if open.
                                    (abort-recursive-edit))
                                   ((evil-ex-hl-active-p 'evil-ex-search)
                                    ;; disable ex search buffer highlights.
                                    (evil-ex-nohighlight))
                                   (t
                                    ;; Run all escape hooks. If any returns non-nil, then stop there.
                                    (run-hook-with-args-until-success '+evil-esc-hook))))
                           (advice-add #'evil-force-normal-state :after #'+evil*attach-escape-hook)

                           ;; Make horizontal movement cross lines                                    
                           (setq-default evil-cross-lines t))
   #+END_SRC 
*** evil-escape
#+BEGIN_SRC emacs-lisp
(use-package evil-escape :after evil
  :commands evil-escape-mode
  :init
  (setq evil-escape-excluded-states '(normal visual multiedit emacs motion)
        ;; evil-escape-excluded-major-modes '(neotree-mode)
        evil-escape-key-sequence "fd"
evil-escape-unordered-key-sequence t
        evil-escape-delay 0.25)
  (add-hook 'after-init-hook #'evil-escape-mode)
  :config
  ;; no `evil-escape' in minibuffer
  (push #'minibufferp evil-escape-inhibit-functions)
  (define-key evil-insert-state-map  (kbd "C-g") #'evil-escape)
 (define-key evil-replace-state-map (kbd "C-g") #'evil-escape)
  (define-key evil-visual-state-map  (kbd "C-g") #'evil-escape)
  (define-key evil-operator-state-map (kbd "C-g") #'evil-escape))
  #+END_SRC 
*** evil-multiedit
#+BEGIN_SRC emacs-lisp
           (use-package evil-multiedit :after evil
    ;; :commands (evil-multiedit-match-all
    ;;            evil-multiedit-match-and-next
    ;;            evil-multiedit-match-and-prev
    ;;            evil-multiedit-match-symbol-and-next
    ;;            evil-multiedit-match-symbol-and-prev
    ;;            evil-multiedit-toggle-or-restrict-region
    ;;            evil-multiedit-next
    ;;            evil-multiedit-prev
    ;;            evil-multiedit-abort
    ;;            evil-multiedit-ex-match)
  :config
  ;; Highlights all matches of the selection in the buffer.
  (define-key evil-visual-state-map "R" 'evil-multiedit-match-all)

  ;; Match the word under cursor (i.e. make it an edit region). Consecutive presses will
  ;; incrementally add the next unmatched match.
  (define-key evil-normal-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
  ;; Match selected region.
  (define-key evil-visual-state-map (kbd "M-d") 'evil-multiedit-and-next)
  ;; Insert marker at point
  (define-key evil-insert-state-map (kbd "M-d") 'evil-multiedit-toggle-marker-here)

  ;; Same as M-d but in reverse.
  (define-key evil-normal-state-map (kbd "M-D") 'evil-multiedit-match-and-prev)
  (define-key evil-visual-state-map (kbd "M-D") 'evil-multiedit-and-prev)

  ;; OPTIONAL: If you prefer to grab symbols rather than words, use
  ;; `evil-multiedit-match-symbol-and-next` (or prev).

  ;; Restore the last group of multiedit regions.
  (define-key evil-visual-state-map (kbd "C-M-D") 'evil-multiedit-restore)

  ;; RET will toggle the region under the cursor
  (define-key evil-multiedit-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)

  ;; ...and in visual mode, RET will disable all fields outside the selected region
  (define-key evil-motion-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)

  ;; For moving between edit regions
  (define-key evil-multiedit-state-map (kbd "C-n") 'evil-multiedit-next)
  (define-key evil-multiedit-state-map (kbd "C-p") 'evil-multiedit-prev)
  (define-key evil-multiedit-insert-state-map (kbd "C-n") 'evil-multiedit-next)
  (define-key evil-multiedit-insert-state-map (kbd "C-p") 'evil-multiedit-prev))

  #+END_SRC 
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile :after ivy
    :config
    (progn
      ;; (setq projectile-keymap-prefix (kbd "C-p"))
      (setq projectile-completion-system 'ivy)
      (setq projectile-enable-caching t)
      ;;(setq projectile-indexing-method 'alien)
      (add-to-list 'projectile-globally-ignored-files "node-modules"))
    :config
    (projectile-mode))
#+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper 
:bind
(("C-s" . swiper)))
#+END_SRC
** Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel 
:bind
(("M-x" . counsel-M-x)
("M-y" . counsel-yank-pop)
("C-x C-f" . counsel-find-file)
("<f5>" . counsel-recentf)
("<f1> f" . counsel-describe-function)
("<f1> v" . counsel-describe-variable)
("<f1> l" . counsel-load-library)
("<f2> i" . counsel-info-lookup-symbol)
("<f2> u" . counsel-unicode-char)))
#+END_SRC
** Ivy 
#+BEGIN_SRC emacs-lisp
(use-package ivy
:init
(progn
(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) "))
:config
(add-hook 'after-init-hook 'ivy-mode))
#+END_SRC
** Org mode 
*** Initial visualization
#+BEGIN_SRC emacs-lisp 
  ;; Initial indentation
  (setq org-startup-indented nil         
        ;; Begin displaying entire trees
        ;;  org-startup-folded nil
        ;; Better display of italics & bold
        org-hide-emphasis-markers t)
#+END_SRC
*** Org capture 
#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file "~/Dropbox/org/todo.org")
  ;;(setq org-default-notes-file "~/Dropbox/org/todo.org")
  (define-key global-map "\C-cc" 'org-capture)

  (defvar org-capture-templates '(
                                  ("t" "Tache" entry
                                   (file+olp "~/Dropbox/org/todo.org" "Tâches" "Indéfini")
                                   "*** 無 %^{Tache} \n:PROPERTIES:\n:ADDED: %<[%Y-%m-%d]>\n:END:" :prepend t)
                                  ("s" "Tache d'etude" entry
                                   (file+olp "~/Dropbox/org/todo.org" "Tâches" "Études" "Indéfini")
                                   "**** 無 %^{Tache d'etude} %^g \n:PROPERTIES:\n:ADDED: %<[%Y-%m-%d]>\n:END:" :prepend t)
                                  ("i" "Idée" entry
                                   (file+headline "~/Dropbox/org/ideas.org" "Ideas")
                                   "** %^{idea_title} \n:PROPERTIES:\n:ADDED: %<[%Y-%m-%d]>\n:TRACE: %a\n:END:" :prepend t)
                                  ("e" "Idée d'Emacs" entry
                                   (file+headline "~/Dropbox/org/ideas.org" "Emacs")
                                   "** %^{idea_title} \n:PROPERTIES:\n:ADDED: %<[%Y-%m-%d]>\n:TRACE: %a\n:END:" :prepend t)
                                  ("q" "Question" entry
                                   (file+headline "~/Dropbox/org/ideas.org" "Questions")
                                   "** %^{question} \n:PROPERTIES:\n:ADDED: %<[%Y-%m-%d]>\n:TRACE: %a\n:END:" :prepend t)
                                  ("m" "Courriel" entry 
                                   (file+headline "~/Dropbox/org/todo.org" "Courriels")
                                   "*** 無 %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n" :prepend t)
                                  ("a" "Auteur" entry
                                   (file "~/Dropbox/research/forschungsbuch.org")
                                   "* %^{last_name,first_name} :lecture: \n:ORIGIN:\n%^{Where?}\n:END:\n:PROPERTIES:\n:ADDED: %<[%Y-%m-%d]>\n:END:" :prepend t)
                                  ("b" "Book (todo)" entry
                                   (file+headline "~/Dropbox/org/ideas.org" "Books")
                                   "** %^{book_title}\n:ORIGIN:\n%^{Where?}\n:END:\n:PROPERTIES:\n:ADDED: %<[%Y-%m-%d]>\n:TRACE: %a\n:END:\n" :prepend t)
                                  ("r" "New Reading (master)" entry
                                   (file "~/Dropbox/research/forschungsbuch.org")
                                   "* %^{reading_title}\n:ORIGIN:\n%^{Where?}\n:END:\n:PROPERTIES:\n:YEAR:\n:JOURNAL:\n:VOLUME:\n:ISSUE:\n:PAGES:\n:ADDED: %<[%Y-%m-%d]>\n:TRACE: %a\n:END:\n" :prepend t))) 
#+END_SRC 
*** Tags & TODOs
#+BEGIN_SRC emacs-lisp
  (setq org-tag-alist '(("Project" . ?p)
                        ("Examen" . ?e)
                        ("Lectures" . ?r)
                        ("Révisions" . ?v)
                        ("Corvées" . ?c)
                        ("today" . ?h)
                        ("Idée" . ?i)
                        ("Mémoire" . ?m)
                        ("thesis" . ?t)
                        ("Question" . ?q)
                        ("noexport" . ?n)
                        ("Université" . ?u))
        org-todo-keywords '((sequence "無(u)" "次(n)" "中(i)" "待(w)" "完(d)")(sequence "阻(p)" "取(c)"))
        ;; Allow setting single tags without the menu
        ;; org-fast-tag-selection-single-key 'expert
        org-use-fast-todo-selection nil
        ;; set faces for org-todo-keywords
        org-todo-keyword-faces '(("無" . (:foreground "#dc322f" :weight bold))
                                 ("完" . (:foreground "#859900" :weight bold))   
                                 ("次" . (:foreground "#d33682" :weight bold))
                                 ("阻" . (:foreground "#268bd2" :weight bold)) 
                                 ("待" . (:foreground "#cb4b16" :weight bold))
                                 ("取" . (:foreground "#6c71c4" :weight bold)) 
                                 ("中" . (:foreground "#b58900" :weight bold))))
#+END_SRC
  ;;(sequence "疑(q)" "|" "答(a)")))
  ;; (sequence "待(w)" "次" "取(c)")
  ;;(sequence "待(w)" "|" "取(c)")

  ;; (defun gs/mark-next-done-parent-tasks-todo ()
  ;;  ;; "Visit each parent task and change 中 (or 完) states to 無."
  ;;   ;; Don't change the value if new state is "完"
  ;;   (let ((mystate (or (and (fboundp 'org-state)
  ;;                           (member state
  ;; 				  (list "中" "無")))
  ;;                      (member (nth 2 (org-heading-components))
  ;; 			     (list "中" "無")))))
  ;;     (when mystate
  ;;       (save-excursion
  ;;         (while (org-up-heading-safe)
  ;;           (when (member (nth 2 (org-heading-components)) (list "中" "完"))
  ;;             (org-todo "無")))))))

  ;; (add-hook 'org-after-todo-state-change-hook 'gs/mark-next-done-parent-tasks-todo 'append)
*** Agenda
#+BEGIN_SRC emacs-lisp
  ;; specify agenda files
  (setq org-agenda-files (list "~/Dropbox/org/gcal.org"
                               "~/Dropbox/org/unterrichte.org"
                               "~/Dropbox/org/refile-beorg.org"
                               "~/Dropbox/org/ereignisse.org"
                               "~/Dropbox/org/jahrestage.org"
                               ;;                                    "~/Dropbox/org/gewohnheiten.org"
                               ;; "~/Dropbox/paris_1/m2"
                               ;; "~/Dropbox/paris_1/m2/m2_notes.org"
                               ;; "~/Dropbox/paris_1/memoire"
                               ;; "~/Dropbox/paris_1/memoire/memoire_draft.org"
                               "~/Dropbox/paris_1/memoire/memoire.org"
                               "~/Dropbox/paris_1/memoire/README.org"
                               "~/Dropbox/research"
                               "~/Dropbox/org/todo.org"))

  ;; necessary function 1
  (defun air-org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.
                PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))

  ;; necessary function 2
  (defun air-org-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil)))

  ;; build composite agenda view
  (setq org-agenda-custom-commands
        '(
          ;;("n" "power agenda" ((agenda  "") (alltodo))
          ;;                ((org-agenda-ndays 10)
          ;;	                   (org-agenda-start-on-weekday nil)
          ;;	                   (org-agenda-start-day "-1d")))
          ("d" "Deux semaines" (
                                (agenda "" ((org-agenda-overriding-header "Today's Schedule:")
                                            (org-agenda-span 'day)
                                            (org-agenda-start-day "+0d")
                                            ;; (org-agenda-prefix-format " %-12t%-12s %-15T %l ")
                                            (org-agenda-prefix-format " %-12t%-6s %-15T ")
                                            ;; This format calls for two consecutive 12-character fields for time (%t)
                                            ;; and scheduling information(%s), followed by a 30-character field for the
                                            ;; breadcrumbs (the path). The reason for using fixed fields is to improve
                                            ;; readability of the colums. Otherwise, apending and ~?~ character as in
                                            ;; ~%?t~, only adds the field if the category exists. While this sound like
                                            ;; a smart idea to save space, its very unreadable, so I advise against
                                            ;; using it. This format is applied equally to the next two sections,
                                            ;; precisely to avoid illegible output.
                                            (org-agenda-start-on-weekday nil)))
                                ;; (org-agenda-todo-ignore-deadlines nil)))
                                (agenda "" ((org-agenda-overriding-header "Prochains 7 jours:")
                                            (org-agenda-span 'week)
                                            (org-agenda-start-day "+1d")
                                            (org-agenda-start-on-weekday nil)
                                            ;; (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                                            (org-agenda-prefix-format " %-12t%-6s %-15T ")))
                                (agenda "" ((org-agenda-overriding-header "Prochains 14 jours:")
                                            (org-agenda-span 'week)
                                            (org-agenda-start-day "+8d")
                                            (org-agenda-start-on-weekday nil)
                                            ;; (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                                            (org-agenda-prefix-format " %-12t%-6s %-15T "))))
           ;; list options for block display
           ((org-agenda-compact-blocks nil)
            (org-agenda-view-columns-initially t)))
          ;; ("H" "A user's setup" (
          ;;                              (agenda "" ((org-agenda-overriding-header "Today's Schedule:")
          ;;                                          (org-agenda-span 'day)
          ;;                                          (org-agenda-ndays 14)
          ;;                                          (org-agenda-start-on-weekday nil)
          ;;                                          (org-agenda-start-day "+0d")
          ;;                                          (org-agenda-todo-ignore-deadlines nil)))
          ;;                              (tags-todo "university/!+次|+待|+中"
          ;;                                         ((org-agenda-overriding-header "Current University Tasks:")
          ;;                                          ))
          ;;                              (tags-todo "university/!+無"
          ;;                                         ((org-agenda-overriding-header "Undone University Tasks:")
          ;;                                          ))
          ;;                              (agenda "" ((org-agenda-overriding-header "Week At A Glance:")
          ;;                                          (org-agenda-ndays 7)
          ;;                                          (org-agenda-start-day "+1d")
          ;;                                          (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
          ;;                                          (org-agenda-prefix-format '((agenda . "  %-12:c%?-12t %s [%b] ")))))
          ;;                              ))

          ;; ("d" "Daily agenda and all TODOs"
          ;;  ((tags "PRIORITY=\"A\""
          ;;         ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
          ;;          (org-agenda-overriding-header "High-priority unfinished tasks:")))
          ;;   (agenda "" ((org-agenda-ndays 1)))
          ;;   (alltodo ""
          ;;            ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
          ;;                                            (air-org-skip-subtree-if-priority ?A)
          ;;                                            (org-agenda-skip-if nil '(scheduled deadline))))
          ;;             (org-agenda-overriding-header "ALL normal priority tasks:"))))
          ;;  ;; list of crazy options
          ;;  ((org-agenda-compact-blocks t)))

          ("w" "Study Planner" (
                                (tags-todo "review/!+次|+待|+中|+無|+阻"
                                           ((org-agenda-overriding-header "Revisions:")))
                                (tags-todo "reading/!+次|+待|+中|+無|+阻"
                                           ((org-agenda-overriding-header "Lectures:")))
                                (tags-todo "project/!+次|+待|+中|+無|+阻"
                                           ((org-agenda-overriding-header "Projects:")))
                                (tags-todo "exam/!+次|+待|+中|+無|+阻"
                                           ((org-agenda-overriding-header "Examens:"))))
           ;; list options for block display
           ((org-agenda-compact-blocks t)
            (org-agenda-view-columns-initially t)))

          ("h" "Aujourd'hui" (
                              (tags-todo "today"
                                         ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                         (air-org-skip-subtree-if-habit)))
                                          (org-agenda-prefix-format " %-12t%-6s %-15c ")
                                          (org-agenda-overriding-header "Tâches d'Aujourd'hui:"))))
           ;; list options for block display
           ((org-agenda-compact-blocks t)
            (org-agenda-view-columns-initially t)))

          ;;("h" "Aujourd'hui" (
          ;;         (tags-todo "review&today/!+次|+待|+中|+無"
          ;;                                                           ((org-agenda-overriding-header "Révisions:")))
          ;;       (tags-todo "reading&today/!+次|+待|+中|+無"
          ;;                                                         ((org-agenda-overriding-header "Lectures:")))
          ;;     (tags-todo "project&today/!+次|+待|+中|+無"
          ;;                                                      ((org-agenda-overriding-header "Projects:")))
          ;; (tags-todo "exam&today/!+次|+待|+中|+無"
          ;;                                                  ((org-agenda-overriding-header "Examens:"))))
          ;; list options for block display
          ;;  ((org-agenda-compact-blocks t)
          ;; (org-agenda-view-columns-initially t)))

          ("p" "Tâches: Projets" (
                                  (tags "PRIORITY=\"A\""
                                        ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取"))
                                                                        (air-org-skip-subtree-if-habit)))
                                         ;; (org-agenda-prefix-format " %-6s %-15T ")
                                         (org-agenda-prefix-format " %-12t%-6s %-15c ")
                                         (org-agenda-overriding-header "Tâches prioritaires:")))
                                  (alltodo ""
                                           ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("中" "次"))
                                                                           (air-org-skip-subtree-if-habit)
                                                                           (air-org-skip-subtree-if-priority ?A)))
                                            ;; (org-agenda-prefix-format " %-6s %-15T ")
                                            (org-agenda-prefix-format " %-12t%-6s %-15c ")
                                            ;;(org-agenda-skip-if nil '(scheduled deadline))
                                            (org-agenda-overriding-header "Tâches en cours:")))
                                  (tags-todo "Mémoire"
                                             ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("中" "次"))
                                                                             (air-org-skip-subtree-if-habit)
                                                                             (air-org-skip-subtree-if-priority ?A)))
                                              (org-agenda-prefix-format " %-12t%-6s %-15c ")
                                              ;; (org-agenda-prefix-format " %-6s %-15T ")
                                              ;;(org-agenda-skip-if nil '(scheduled deadline))
                                              (org-agenda-overriding-header "Mémoire")))
                                  (tags-todo "Université-Lectures"
                                             ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("中" "次"))
                                                                             (air-org-skip-subtree-if-habit)
                                                                             (air-org-skip-subtree-if-priority ?A)))
                                              (org-agenda-prefix-format " %-12t%-6s %-15c ")
                                              ;; (org-agenda-prefix-format " %-6s %-15T ")
                                              ;;(org-agenda-skip-if nil '(scheduled deadline))
                                              (org-agenda-overriding-header "Université")))
                                  (tags-todo "Métier-Lectures"
                                             ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("中" "次"))
                                                                             (air-org-skip-subtree-if-habit)
                                                                             (air-org-skip-subtree-if-priority ?A)))
                                              (org-agenda-prefix-format " %-12t%-6s %-15c ")
                                              ;; (org-agenda-prefix-format " %-6s %-15T ")
                                              ;;(org-agenda-skip-if nil '(scheduled deadline))
                                              (org-agenda-overriding-header "Métier")))
                                  (tags-todo "Lectures"
                                             ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("中" "次"))
                                                                             (air-org-skip-subtree-if-habit)
                                                                             (air-org-skip-subtree-if-priority ?A)))
                                              (org-agenda-prefix-format " %-12t%-6s %-15c ")
                                              ;; (org-agenda-prefix-format " %-6s %-15T ")
                                              ;;(org-agenda-skip-if nil '(scheduled deadline))
                                              (org-agenda-overriding-header "Lectures"))))
           ;; list options for block display
           ((org-agenda-compact-blocks t)
            (org-agenda-view-columns-initially t)))

          ("x" "Tâches: Toutes" (
                                 (tags "PRIORITY=\"A\""
                                       ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取"))
                                                                       (air-org-skip-subtree-if-habit)))
                                        (org-agenda-prefix-format " %-6s %-15T ")
                                        (org-agenda-overriding-header "Tâches prioritaires:")))
                                 (alltodo ""
                                          ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("中" "次"))
                                                                          (air-org-skip-subtree-if-habit)
                                                                          (air-org-skip-subtree-if-priority ?A)))
                                           (org-agenda-prefix-format " %-6s %-15T ")
                                           ;;(org-agenda-skip-if nil '(scheduled deadline))
                                           (org-agenda-overriding-header "Tâches en cours:")))
                                 (alltodo ""
                                          ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("無"))
                                                                          (air-org-skip-subtree-if-habit)
                                                                          ;;(org-agenda-skip-if nil '(scheduled deadline))
                                                                          (air-org-skip-subtree-if-priority ?A)))
                                           (org-agenda-prefix-format " %-6s %-15T ")
                                           (org-agenda-overriding-header "Tâches à faire:")))
                                 (alltodo ""
                                          ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("待"))
                                                                          (air-org-skip-subtree-if-habit)
                                                                          (air-org-skip-subtree-if-priority ?A)))
                                           ;;(org-agenda-skip-if nil '(scheduled deadline))))
                                           (org-agenda-prefix-format " %-6s %-15T ")
                                           (org-agenda-overriding-header "Tâches en attente:")))
                                 (alltodo ""
                                          ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("阻"))
                                                                          (air-org-skip-subtree-if-habit)
                                                                          (air-org-skip-subtree-if-priority ?A)))
                                           (org-agenda-prefix-format " %-6s %-15T ")
                                           (org-agenda-overriding-header "Tâches coincées:"))))
           ;; list options for block display
           ((org-agenda-compact-blocks t)))

          ;;           ("y" "Tâches: Université" (
          ;;                                      (tags-todo "+lecture+PRIORITY=\"A\"|+university+PRIORITY=\"A\"|+work+PRIORITY=\"A\""
          ;;                                                 ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取"))
          ;;                                                                                 (air-org-skip-subtree-if-habit)))
          ;;                                              (org-agenda-prefix-format " %s [%?-45b] ")
          ;;                                                  (org-agenda-overriding-header "Tâches prioritaires:")))
          ;;                                      (tags-todo "+lecture|+university|+work"
          ;;                                                 ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("中" "次"))
          ;;                                                                                 (air-org-skip-subtree-if-habit)
          ;;                                                                                 (air-org-skip-subtree-if-priority ?A)))
          ;;                                              (org-agenda-prefix-format " %s [%?-45b] ")
          ;;                                                  ;;(org-agenda-skip-if nil '(scheduled deadline))
          ;;                                                  (org-agenda-overriding-header "Tâches en cours:")))
          ;;                                      (tags-todo "+lecture|+university|+work"
          ;;                                                 ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("無"))
          ;;                                                                                 (air-org-skip-subtree-if-habit)
          ;;                                                                                 ;;(org-agenda-skip-if nil '(scheduled deadline))
          ;;                                                                                 (air-org-skip-subtree-if-priority ?A)))
          ;;                                              (org-agenda-prefix-format " %s [%?-45b] ")
          ;;                                                  (org-agenda-overriding-header "Tâches à faire:")))
          ;;                                      (tags-todo "+lecture|+university|+work"
          ;;                                                 ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("待"))
          ;;                                                                                 (air-org-skip-subtree-if-habit)
          ;;                                                                                 (air-org-skip-subtree-if-priority ?A)))
          ;;                                                  ;;(org-agenda-skip-if nil '(scheduled deadline))))
          ;;                                              (org-agenda-prefix-format " %s [%?-45b] ")
          ;;                                                  (org-agenda-overriding-header "Tâches en attente:")))
          ;;                                      (tags-todo "+lecture|+university|+work"
          ;;                                                 ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("阻"))
          ;;                                                                                 (air-org-skip-subtree-if-habit)
          ;;                                                                                 (air-org-skip-subtree-if-priority ?A)))
          ;;                                              (org-agenda-prefix-format " %s [%?-45b] ")
          ;;                                                  (org-agenda-overriding-header "Tâches coincées:"))))
          ;;            ;; list options for block display
          ;;            ((org-agenda-compact-blocks t)
          ;; (org-agenda-view-columns-initially t)))

          ("y" "Projects" (
                           (tags "PRIORITY=\"A\""
                                 ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                 (air-org-skip-subtree-if-habit)))
                                  ;; (org-agenda-prefix-format " %-6s %-15T ")
                                  (org-agenda-prefix-format " %-12t%-6s ")
                                  (org-agenda-overriding-header "Tâches prioritaires:")))
                           (alltodo ""
                                    ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("中" "次"))
                                                                    (air-org-skip-subtree-if-habit)
                                                                    (air-org-skip-subtree-if-priority ?A)))
                                     ;; (org-agenda-prefix-format " %-6s %-15T ")
                                     (org-agenda-prefix-format " %-12t%-6s ")
                                     ;;(org-agenda-skip-if nil '(scheduled deadline))
                                     (org-agenda-overriding-header "Tâches en cours:")))
                           (tags-todo "Project"
                                      ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                      (air-org-skip-subtree-if-habit)))
                                       (org-agenda-prefix-format " %l %-12t%-6s ")
                                       (org-agenda-overriding-header "Projets")))
                           (tags-todo "Mémoire"
                                      ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                      (air-org-skip-subtree-if-habit)))
                                       (org-agenda-prefix-format " %l %-12t%-6s ")
                                       (org-agenda-overriding-header "Mémoire")))
                           (tags-todo "Épistémologie-Project"
                                      ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                      (air-org-skip-subtree-if-habit)))
                                       (org-agenda-prefix-format " %l %-12t%-6s ")
                                       (org-agenda-overriding-header "Épistémologie")))
                           (tags-todo "SocioEco-Project"
                                      ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                      (air-org-skip-subtree-if-habit)))
                                       (org-agenda-prefix-format " %l %-12t%-6s ")
                                       (org-agenda-overriding-header "Sociologie économique")))
                           (tags-todo "EcoPsycho-Project"
                                      ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                      (air-org-skip-subtree-if-habit)))
                                       (org-agenda-prefix-format " %l %-12t%-6s ")
                                       (org-agenda-overriding-header "Économie et psychologie"))))
           ;; list options for block display
           ((org-agenda-compact-blocks t)
            (org-agenda-view-columns-initially t)))

          ;; End of custom
          ))

  ;; Display properties
  (setq org-cycle-separator-lines 0
        ;; Choose the placement of org tags in org files.
        org-tags-column 100
        ;; Place org agenda tags in the same place as org tags.
        org-agenda-tags-column org-tags-column
        ;; Make org-agenda the only window by default.
        org-agenda-window-setup 'only-window 
        ;; Build agenda manually (to update press "r").
        org-agenda-sticky t
        ;; Compact the block agenda view. This deletes the section separators.
        org-agenda-compact-blocks nil
        ;; Allow one-key todo selection.
        org-use-fast-todo-selection t 
        ;; Include the todo keywords in fast tag selection buffer.
        org-fast-tag-selection-include-todo t
        ;; Allow one-key tag selection.
        org-fast-tag-selection-single-key t
        ;; each habit to show up when it is next scheduled, but no further repetitions
        org-agenda-repeating-timestamp-show-all nil
        ;; This variable may be set to nil, t, or a number which will then
        ;; give the number of days before the actual deadline when the
        ;; prewarnings should resume.
        org-agenda-skip-deadline-prewarning-if-scheduled t
        org-agenda-skip-scheduled-if-deadline-is-shown t
        ;; Add appointments duration to column view's effort estimates.
        org-agenda-columns-add-appointments-to-effort-sum t)

  (setq org-agenda-deadline-leaders (quote ("  豫定 " "%2d日後 " "%2d日前 ")))
  ;; (setq org-agenda-deadline-leaders (quote ("  마감 " "%2d日後 " "%2d日前 ")))
  (setq org-agenda-scheduled-leaders (quote ("  豫定 " " 再日程 ")))
  ;; (setq org-agenda-scheduled-leaders (quote ("  豫定 " "%2d日前 ")))

  ;; Set of functions to have evil bindings in org-agenda.

  (defun air-org-agenda-next-header ()
    "Jump to the next header in an agenda series."
    (interactive)
    (air--org-agenda-goto-header))

  (defun air-org-agenda-previous-header ()
    "Jump to the previous header in an agenda series."
    (interactive)
    (air--org-agenda-goto-header t))

  (defun air--org-agenda-goto-header (&optional backwards)
    "Find the next agenda series header forwards or BACKWARDS."
    (let ((pos (save-excursion
                 (goto-char (if backwards
                                (line-beginning-position)
                              (line-end-position)))
                 (let* ((find-func (if backwards
                                       'previous-single-property-change
                                     'next-single-property-change))
                        (end-func (if backwards
                                      'max
                                    'min))
                        (all-pos-raw (list (funcall find-func (point) 'org-agenda-structural-header)
                                           (funcall find-func (point) 'org-agenda-date-header)))
                        (all-pos (cl-remove-if-not 'numberp all-pos-raw))
                        (prop-pos (if all-pos (apply end-func all-pos) nil)))
                   prop-pos))))
      (if pos (goto-char pos))
      (if backwards (goto-char (line-beginning-position)))))

  ;; fast access agenda view
  (defun air-pop-to-org-agenda (&optional split)
    "Visit the org agenda, in the current window or a SPLIT."
    (interactive "P")
    (org-agenda nil "d") ;; the h corresponds to the agenda view that will be displayed once this command is called
    (when (not split)
      (delete-other-windows)))

  ;;(define-key evil-normal-state-map (kbd "S-SPC") 'air-pop-to-org-agenda)
  (global-set-key [f6] 'air-pop-to-org-agenda)

  ;; sacha's configuration 
  (defun sacha/org-agenda-new ()
    "Create a new note or task at the current agenda item.
                Creates it at the same level as the previous task, so it's better to use
                this with to-do items than with projects or headings."
    (interactive)
    (org-agenda-switch-to)
    (org-capture 0))

  (defun sacha/org-agenda-mark-done-and-add-followup ()
    "Mark the current TODO as done and add another task after it.
                Creates it at the same level as the previous task, so it's better to use
                this with to-do items than with projects or headings."
    (interactive)
    (org-agenda-todo "DONE")
    (org-agenda-switch-to)
    (org-capture 0 "t"))
 #+END_SRC
****   Movement in agenda buffer
#+BEGIN_SRC emacs-lisp
  (eval-after-load "org-agenda"
    '(progn
       (define-key org-agenda-mode-map "j" 'org-agenda-next-item)
       (define-key org-agenda-mode-map "k" 'org-agenda-previous-item)
       (define-key org-agenda-mode-map "J" 'air-org-agenda-next-header)
       (define-key org-agenda-mode-map "K" 'air-org-agenda-previous-header)
       ;; New key assignment
       (define-key org-agenda-mode-map "N" 'sacha/org-agenda-new)
       ;; Override the key définition
       (define-key org-agenda-mode-map "X" 'sacha/org-agenda-mark-done-and-add-followup)
       ))
 #+END_SRC
**** Filter tags in agenda view 
This allow to hide certain tags in the agenda display, but include them in
the processing of agenda commands
#+BEGIN_SRC emacs-lisp
(setq org-agenda-hide-tags-regexp "noexport\\|today\\|Lectures\\|Project\\|Mémoire\\|Administration\\|Université\\|Métier")
;;(setq org-agenda-hide-tags-regexp "noexport\\|university\\|today")
  #+END_SRC 
**** Habits
There is a strange inconsistency when habits are enabled. See [[https://emacs.stackexchange.com/questions/26291/not-allowed-in-tags-type-agenda-using-custom-agenda]]
#+BEGIN_SRC emacs-lisp
  (use-package org-habit :after org
    ;; :commands org-bullets-mode
    :config
    (setq org-habit-graph-column 80
          org-habit-show-habits-only-for-today nil)
    (define-key org-agenda-mode-map "K" 'air-org-agenda-previous-header))
  #+END_SRC 
**** Visualization
  ;; Hide inherited tags from Org's agenda view.
  ;;(setq org-agenda-show-inherited-tags nil)
**** Stuck projects 
I'm trying to setup the org-stuck-projects variable so that the "stuck
projects" agenda will list all headlines which are TODOs (any TODO keyword
except DONE) but those which don't have SCHEDULED or DEADLINE attributes
set. Currently I get an empty list with this setting for the variable:

     ;; (setq org-stuck-projects      '("TODO={.+}/-DONE" nil nil "SCHEDULED:\\|DEADLINE:"))
     ;; (setq org-stuck-projects      '("TODO={.+}/-DONE" nil nil "SCHEDULED:\\|DEADLINE:"))
*** org-refile  
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets (quote ( 
                                   (nil :maxlevel . 9)                ;; set default 
                                   ;; ("m2_notes.org" :maxlevel . 3)
                                   ("todo.org" :maxlevel . 2)
                                   ;;(org-agenda-files :maxlevel . 9) ;; set for all agenda files
                                   )))

  (setq org-refile-use-outline-path 'file
        ;; org-refile-use-outline-path nil ;; Sasha-Chua's config
        org-outline-path-complete-in-steps nil
        ;; org-reverse-note-order t
        org-refile-allow-creating-parent-nodes 'confirm
        ;;org-blank-before-new-entry nil
        org-refile-use-cache nil)
  #+END_SRC 
*** Clocking
#+BEGIN_SRC emacs-lisp
  ;; Agenda clock report parameters
  (setq org-agenda-clockreport-parameter-plist
        '(:link t :maxlevel 6 :fileskip0 t :compact t :narrow 60 :score 0))

  ;; global Effort estimate values
  (setq org-global-properties
        '(("Effort_ALL" .
           "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")))
  ;;        1    2    3    4    5    6    7    8    9    0
  ;; These are the hotkeys ^

  (defun eos/org-clock-in ()
    (interactive)
    (org-clock-in '(4)))

  (global-set-key (kbd "C-c I") #'eos/org-clock-in)
  (global-set-key (kbd "C-c O") #'org-clock-out)

  ;; Resume clocking task when emacs is restarted
  (org-clock-persistence-insinuate)

  ;; Set default column view headings: Task Priority Effort Clock_Summary
  (setq org-columns-default-format "%1PRIORITY %2TODO %DEADLINE %60ITEM(Task) %EFFORT(Effort){:} %CLOCKSUM")
  ;; (setq org-columns-default-format "%TAGS %ITEM(Task) %1PRIORITY %DEADLINE %SCHEDULED %10CLOCKSUM")
  ;;(setq org-columns-default-format "%50ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM %16TIMESTAMP_IA")
  ;;(setq org-columns-default-format "%50ITEM(Task) %2PRIORITY %10Effort(Effort){:} %10CLOCKSUM")

  ;; If idle for more than 15 minutes, resolve the things by asking what to do
  ;; with the clock time
  (setq org-clock-idle-time 15
        ;; Show lot of clocking history so it's easy to pick items off the `C-c I` list
        org-clock-history-length 23
        ;; Save the running clock and all clock history when exiting Emacs, load it on startup
        org-clock-persist 'history
        ;; org-clock-persist t
        ;; Resume clocking task on clock-in if the clock is open
        org-clock-in-resume t
        ;; Do not prompt to resume an active clock, just resume it
        org-clock-persist-query-resume nil

        ;; Change tasks to whatever when clocking in
        org-clock-in-switch-to-state "中"
        ;; Save clock data and state changes and notes in the LOGBOOK drawer
        org-clock-into-drawer t
        ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks
        ;; with 0:00 duration
        org-clock-out-remove-zero-time-clocks t
        ;; Clock out when moving task to a done state
        org-clock-out-when-done t
        ;; Enable auto clock resolution for finding open clocks
        org-clock-auto-clock-resolution (quote when-no-clock-is-running)
        ;; Include current clocking task in clock reports
        org-clock-report-include-clocking-task t
        ;; use pretty things for the clocktable
        org-pretty-entities t)
#+END_SRC 
*** Org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets :after org
  :commands org-bullets-mode
  :init
  (progn
  ;; (setq org-bullets-bullet-list '("一" "二" "三" "四" "五" "六" "七" "八" "七" "九" "十"))
  (setq org-bullets-bullet-list '("一" "二" "三" "四" "五"))
  ;; (setq org-bullets-bullet-list '("一" "二" "三" "四" "五"))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))
#+END_SRC 
*** Org-crypt
      (use-package org-crypt :after org
        :config
        (org-crypt-use-before-save-magic)
        (setq org-tags-exclude-from-inheritance (quote ("crypt"))
              org-crypt-key nil)
        ;; GPG key to use for encryption
        ;; Either the Key ID or set to nil to use symmetric encryption.
        )
      ;; (setq auto-save-default nil)
      ;; Auto-saving does not cooperate with org-crypt.el: so you need
      ;; to turn it off if you plan to use org-crypt.el quite often.
      ;; Otherwise, you'll get an (annoying) message each time you
      ;; start Org.

      ;; To turn it off only locally, you can insert this:
      ;;
      ;; # -*- buffer-auto-save-file-name: nil; -*-
*** Org2blog                                                                    
This package allow org mode to interact with WordPress. 
  ;;   (use-package org2blog :after org 
  ;;     :config
  ;; ;; initial config
  ;;     (setq load-path (cons "~/.emacs.d/org2blog/" load-path))
  ;;     (require 'org2blog-autoloads)
  ;;     (setq org-list-allow-alphabetical t)

  ;;   ;; blog setup
  ;;     (setq org2blog/wp-blog-alist
  ;;           '(("cahiers"
  ;;              :url "https://cyberneticrevolutionary.wordpress.com/xmlrpc.php"
  ;;              :username "cyberneticrevolutionary"
  ;;              :password "kosmos666"
  ;;              :default-title "Penseé"
  ;;              :tags-as-categories nil))))
**** default template
(setq org2blog/wp-buffer-template
      "-----------------------
#+TITLE: %s
#+DATE: %s
-----------------------\n")
(defun my-format-function (format-string)
  (format format-string
          org2blog/wp-default-title
          (format-time-string "%Y-%m-%d" (current-time)))))
          (setq org2blog/wp-buffer-format-function
'my-format-function)
*** Export settings for LaTeX
Even though, by default, Emacs Org mode has the export keyword
~LATEX_COMPILER:~ to choose among the different engines (pdflatex, xelatex, or
lualatex), I had to tweek the settings to run LaTeX through ~latexmk~ for
biber to work properly with BibLaTeX. In layman English, the following
configuration is necessary for automatic bibliography management to work
properly when exporting org documents to LaTeX.
#+BEGIN_SRC emacs-lisp
  ;; export references (to tables, graphics, etc.) properly, evaluating the +NAME property. 
  (setq org-latex-prefer-user-labels t
        ;; export process is sent to the background
        org-export-in-background t
        ;; select tasks (i.e., TODOs) for export
        org-export-with-tasks '("次" "完" "無" "中" "待" "疑")
        org-export-date-timestamp-format "%Y/%m/%d"
        org-latex-pdf-process (list "latexmk -lualatex -bibtex -f %f"))
  ;; (setq org-latex-pdf-process (list "latexmk -lualatex -bibtex-cond -f %f"))

  (defun sync0-latex-compile ()
    (save-buffer)
    (TeX-command "LaTeX" 'TeX-master-file))

  (defun sync0-latex-and-beamer-export ()
    "Export current org file with beamer if it has beamer as latex class."
    (interactive)
    (when (equal major-mode 'org-mode) 
      (if (string-match "LATEX_CLASS: beamer" (buffer-string))
          (org-beamer-export-to-pdf)
        (org-latex-export-to-pdf))))

  ;; speed keybinding for latex pdf export
  ;;(global-set-key "\M-p" 'org-latex-export-to-pdf)
  (global-set-key "\M-p" 'sync0-latex-and-beamer-export)

  ;; (setq org-latex-logfiles-extensions (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl")))
  (setq org-latex-logfiles-extensions (quote ("lof" "lot" "tex~" "idx" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "run.xml")))
#+END_SRC
*** Export to Word (doc)
#+BEGIN_SRC emacs-lisp
  ;; This setup is tested on Emacs 24.3 & Emacs 24.4 on Linux/OSX
  ;; org v7 bundled with Emacs 24.3
  (setq org-export-odt-preferred-output-format "doc"
        ;; org v8 bundled with Emacs 24.4
        org-odt-preferred-output-format "doc")
  ;; BTW, you can assign "pdf" in above variables if you prefer PDF format

  ;; for page breaks add this to org files
  ;; #+ODT: <text:p text:style-name="PageBreak"/>
#+END_SRC 
*** Add custom LaTeX export classes
To use KOMA-Script classes in LaTeX documents created through Org mode
export, it is necessary to explicitely add them to ~org-latex-classes~.
Moreover, this method can be used to create custom LaTeX classes.
#+BEGIN_SRC emacs-lisp
  (use-package ox-latex
    :config 
    (add-to-list 'org-latex-classes '("scrartcl"
                                      "\\documentclass{scrartcl}"
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes '("scrreprt"
                                      "\\documentclass{scrreprt}"
                                      ("\\chapter{%s}" . "\\chapter*{%s}")
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes '("scrbook"
                                      "\\documentclass{scrbook}"
                                      ("\\part{%s}" . "\\part*{%s}")
                                      ("\\chapter{%s}" . "\\chapter*{%s}")
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes '("sync0book"
                                      "\\documentclass{scrbook}"
                                      ("\\chapter{%s}" . "\\chapter*{%s}")
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC
*** Custom add org headings
#+BEGIN_SRC emacs-lisp
(setq org-blank-before-new-entry
      '((heading . nil)
       (plain-list-item . nil)))

(defun call-rebinding-org-blank-behaviour (fn)
  (let ((org-blank-before-new-entry
         (copy-tree org-blank-before-new-entry)))
    (when (org-at-heading-p)
      (rplacd (assoc 'heading org-blank-before-new-entry) nil))
    (call-interactively fn)))

(defun smart-org-meta-return-dwim ()
  (interactive)
  (call-rebinding-org-blank-behaviour 'org-meta-return))

(defun smart-org-insert-todo-heading-dwim ()
  (interactive)
  (call-rebinding-org-blank-behaviour 'org-insert-todo-heading))

(define-key org-mode-map (kbd "M-<return>") 'smart-org-meta-return-dwim)
#+END_SRC
*** Change default apps 
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
           '(lambda ()
            (delete '("\\.pdf\\'" . default) org-file-apps)
            (add-to-list 'org-file-apps '("\\.pdf\\'" . "zathura %s"))))
#+END_SRC   
*** Source Code Editing
#+BEGIN_SRC emacs-lisp
    ;; Color embeded source code
    (setq org-src-fontify-natively t
          ;; stop emacs asking for confirmation
          org-confirm-babel-evaluate nil
          ;; export colored code blocks
          org-latex-listings 'minted
          ;; set word wrap for code blocks
          org-latex-minted-options '(("breaklines" "true")
                                     ("breakanywhere" "true")))

  ;; Source code export
  (add-to-list 'org-export-exclude-tags "取")
#+END_SRC 
*** org-mu4e
  This package stores Org mode links to messages.
#+BEGIN_SRC emacs-lisp
(use-package org-mu4e :after org
:config
;; Store link to message if in header view, not to header query.
(setq org-mu4e-link-query-in-headers-mode nil))
  #+END_SRC 
*** ox-extra
#+BEGIN_SRC emacs-lisp
  ;; (use-package org-plus-contrib :after org)
  ;; (use-package ox :after org)
  (use-package ox-extra :after org 
  :config
  (ox-extras-activate '(ignore-headlines)))

  ;; (require  'ox-extra)
  ;; (ox-extras-activate '(ignore-headlines))
  #+END_SRC 
** Bibtex Mode
#+BEGIN_SRC emacs-lisp
  ;; (use-package bibtex
  ;;   :custom
  ;;   (bibtex-dialect (quote biblatex));; biblatex as default bib format

  (use-package bibtex
    :config
    (setq bibtex-dialect 'biblatex ;; biblatex as default bib format
          bibtex-maintain-sorted-entries t
          bibtex-field-delimiters 'braces
          bibtex-entry-delimiters 'braces
          bibtex-comma-after-last-field t
          bibtex-align-at-equal-sign t
          bibtex-text-indentation 0
          bibtex-autokey-names 1
          bibtex-autokey-names-stretch 1
          bibtex-autokey-additional-names " et al"
          bibtex-autokey-name-separator "_"
          bibtex-autokey-name-year-separator ""
          bibtex-autokey-name-length t
          bibtex-autokey-year-title-separator ""
          bibtex-autokey-titleword-length 0
          bibtex-autokey-year-length 4
          bibtex-autokey-titleword-case-convert "uppercase"
          bibtex-autokey-titlewords 0)

    (setq bibtex-entry-format '(opts-or-alts required-fields numerical-fields page-dashes whitespace braces last-comma delimiters sort-fields))

    (setq bibtex-BibTeX-entry-alist '(
                                      ("Article" "Article in Journal"
                                       ("author")
                                       ("date")
                                       ("title" "Title of the article (BibTeX converts it to lowercase)")
                                       ("subtitle" "Title of the article (BibTeX converts it to lowercase)")
                                       ("journaltitle")
                                       ("journalsubtitle")
                                       ("volume" "Volume of the journal")
                                       ("number" "Number of the journal (only allowed if entry contains volume)")
                                       ("issue" "Issue in the journal")
                                       ("pages" "Pages in the journal")
                                       ("url" "Pages in the journal")
                                       ("urldate" "Pages in the journal")
                                       ("doi" "Pages in the journal")
                                       ("library" "Pages in the journal")
                                       ("language" "Pages in the journal")
                                       ("langid" "Pages in the journal")
                                       ("langidopts" "Pages in the journal")
                                       ("file" "Pages in the journal")
                                       ("addendum" "Pages in the journal")
                                       ("keywords"))
                                      ("InProceedings" "Article in Conference Proceedings"
                                       ("author")
                                       ("date")
                                       ("title" "Title of the article (BibTeX converts it to lowercase)")
                                       ("subtitle" "Title of the article (BibTeX converts it to lowercase)")
                                       ("crossref")
                                       ("booktitle" "Name of the conference proceedings")
                                       ("booksubtitle" "Name of the conference proceedings")
                                       ("organization")
                                       ("eventdate")
                                       ("eventtitle")
                                       ("venue")
                                       ("series")
                                       ("volume" "Volume of the conference proceedings in the series")
                                       ("number" "Number of the conference proceedings in a small series (overwritten by volume)")
                                       ("pages" "Pages in the conference proceedings")
                                       ("edition" "Pages in the conference proceedings")
                                       ("publisher" "Publishing company, its location")
                                       ("editor" "Publishing company, its location")
                                       ("translator" "Publishing company, its location")
                                       ("location" "Publishing company, its location")
                                       ("url" "Publishing company, its location")
                                       ("urldate" "Publishing company, its location")
                                       ("doi" "Pages in the journal")
                                       ("library" "Pages in the journal")
                                       ("language" "Pages in the journal")
                                       ("langid" "Pages in the journal")
                                       ("langidopts" "Pages in the journal")
                                       ("file" "Pages in the journal")
                                       ("addendum")
                                       ("keywords"))
                                      ("InCollection" "Article in a Collection"
                                       (("author")
                                       ("title" "Title of the article (BibTeX converts it to lowercase)"))
                                       (("subtitle" "Title of the article (BibTeX converts it to lowercase)")
                                       ("date")
                                       ("crossref" "Title of the article (BibTeX converts it to lowercase)")
                                       ("booktitle" "Name of the conference proceedings")
                                       ("booksubtitle" "Name of the conference proceedings")
                                       ("series")
                                       ("volume" "Volume of the conference proceedings in the series")
                                       ("number" "Number of the conference proceedings in a small series (overwritten by volume)")
                                       ("chapter" "Number of the conference proceedings in a small series (overwritten by volume)")
                                       ("pages" "Pages in the conference proceedings")
                                       ("edition" "Publishing company, its location")
                                       ("publisher" "Publishing company, its location")
                                       ("editor" "Publishing company, its location")
                                       ("translator" "Publishing company, its location")
                                       ("location" "Publishing company, its location")
                                       ("url" "Publishing company, its location")
                                       ("urldate" "Publishing company, its location")
                                       ("doi" "Pages in the journal")
                                       ("library" "Pages in the journal")
                                       ("language" "Pages in the journal")
                                       ("langid" "Pages in the journal")
                                       ("langidopts" "Pages in the journal")
                                       ("file" "Pages in the journal")
                                       ("addendum")
                                       ("keywords")))
                                      ("InBook" "Chapter or Pages in a Book"
                                       (("title" "Title of the article (BibTeX converts it to lowercase)"))
                                       (("author")
                                       ("subtitle" "Title of the article (BibTeX converts it to lowercase)")
                                       ("date")
                                       ("origdate")
                                       ("origtitle")
                                       ("crossref" "Title of the article (BibTeX converts it to lowercase)")
                                       ("booktitle" "Name of the conference proceedings")
                                       ("booksubtitle" "Name of the conference proceedings")
                                       ("series")
                                       ("volume" "Volume of the conference proceedings in the series")
                                       ("number" "Number of the conference proceedings in a small series (overwritten by volume)")
                                       ("chapter" "Number of the conference proceedings in a small series (overwritten by volume)")
                                       ("pages" "Pages in the conference proceedings")
                                       ("edition" "Publishing company, its location")
                                       ("publisher" "Publishing company, its location")
                                       ("editor" "Publishing company, its location")
                                       ("translator" "Publishing company, its location")
                                       ("location" "Publishing company, its location")
                                       ("url" "Publishing company, its location")
                                       ("urldate" "Publishing company, its location")
                                       ("doi" "Pages in the journal")
                                       ("library" "Pages in the journal")
                                       ("language" "Pages in the journal")
                                       ("langid" "Pages in the journal")
                                       ("langidopts" "Pages in the journal")
                                       ("file" "Pages in the journal")
                                       ("addendum")
                                       ("keywords")))
                                      ("Proceedings" "Conference Proceedings"
                                       ("title" "Title of the conference proceedings")
                                       ("date")
                                       nil
                                       ("booktitle" "Title of the proceedings for cross references")
                                       ("editor")
                                       ("volume" "Volume of the conference proceedings in the series")
                                       ("number" "Number of the conference proceedings in a small series (overwritten by volume)")
                                       ("series" "Series in which the conference proceedings appeared")
                                       ("address")
                                       ("month")
                                       ("organization" "Sponsoring organization of the conference")
                                       ("publisher" "Publishing company, its location")
                                       ("note"))
                                      ("Book" "Book"
                                       ("author")
                                       ("date")
                                       ("origdate")
                                       ("origtitle")
                                       ("title" "Title of the article (BibTeX converts it to lowercase)")
                                       ("subtitle" "Title of the article (BibTeX converts it to lowercase)")
                                       ("booktitle" "Name of the conference proceedings")
                                       ("booksubtitle" "Name of the conference proceedings")
                                       ("series")
                                       ("volume" "Volume of the conference proceedings in the series")
                                       ("number" "Number of the conference proceedings in a small series (overwritten by volume)")
                                       ("edition" "Publishing company, its location")
                                       ("publisher" "Publishing company, its location")
                                       ("editor" "Publishing company, its location")
                                       ("translator" "Publishing company, its location")
                                       ("location" "Publishing company, its location")
                                       ("url" "Publishing company, its location")
                                       ("urldate" "Publishing company, its location")
                                       ("doi" "Pages in the journal")
                                       ("library" "Pages in the journal")
                                       ("isbn" "Pages in the journal")
                                       ("origlanguage" "Pages in the journal")
                                       ("language" "Pages in the journal")
                                       ("langid" "Pages in the journal")
                                       ("langidopts" "Pages in the journal")
                                       ("file" "Pages in the journal")
                                       ("addendum")
                                       ("keywords"))
                                      ("Unpublished" "Unpublished"
                                       ("author")
                                       ("date")
                                       ("title" "Title of the article (BibTeX converts it to lowercase)")
                                       ("subtitle" "Title of the article (BibTeX converts it to lowercase)")
                                       ("type" "Title of the article (BibTeX converts it to lowercase)")
                                       ("eventdate" "Title of the article (BibTeX converts it to lowercase)")
                                       ("eventtitle" "Title of the article (BibTeX converts it to lowercase)")
                                       ("venue" "Title of the article (BibTeX converts it to lowercase)")
                                       ("location" "Title of the article (BibTeX converts it to lowercase)")
                                       ("url" "Publishing company, its location")
                                       ("urldate" "Publishing company, its location")
                                       ("doi" "Pages in the journal")
                                       ("library" "Pages in the journal")
                                       ("origlanguage" "Pages in the journal")
                                       ("language" "Pages in the journal")
                                       ("langid" "Pages in the journal")
                                       ("langidopts" "Pages in the journal")
                                       ("file" "Pages in the journal")
                                       ("addendum")
                                       ("keywords"))
                                      ("Misc" "Miscellaneous" nil nil
                                       (("title" "Title of the article (BibTeX converts it to lowercase)"))
                                       (("author")
                                       ("date")
                                       ("subtitle" "Title of the article (BibTeX converts it to lowercase)")
                                       ("organization" "Title of the article (BibTeX converts it to lowercase)")
                                       ("type" "Title of the article (BibTeX converts it to lowercase)")
                                       ("version" "Title of the article (BibTeX converts it to lowercase)")
                                       ("location" "Title of the article (BibTeX converts it to lowercase)")
                                       ("url" "Publishing company, its location")
                                       ("urldate" "Publishing company, its location")
                                       ("doi" "Pages in the journal")
                                       ("library" "Pages in the journal")
                                       ("origlanguage" "Pages in the journal")
                                       ("language" "Pages in the journal")
                                       ("langid" "Pages in the journal")
                                       ("langidopts" "Pages in the journal")
                                       ("file" "Pages in the journal")
                                       ("addendum")
                                       ("keywords")))))

(defun sync0-bibtex-autokey-get-year ()
  "Return year field contents as a string obeying `bibtex-autokey-year-length'."
  (let ((yearfield (bibtex-autokey-get-field "date")))
    (substring yearfield (max 0 (- (length yearfield)
                                   bibtex-autokey-year-length)))))


    (defun sync0-bibtex-generate-autokey ()
      "This overwrites the bibtex-generate-autokey function that comes with Emacs.
      I want my keys to be formatted: authornameYEAR, then a letter
      if there is already an entry that matches authornameYEAR."
      (interactive)
      (let* ((names (bibtex-autokey-get-names))
             (year (sync0-bibtex-autokey-get-year))
             (existing-keys (bibtex-parse-keys)) key)
        (setq key (format "%s%s" names year))
        (let ((ret key))
          (cl-loop for c
                   from ?a to ?z
                   while (assoc ret existing-keys)
                   do (setq ret (format "%s%c" key c)))
          ret))))



  #+END_SRC 
** Ivy-bibtex
#+BEGIN_SRC emacs-lisp
  (use-package ivy-bibtex :after (org ivy)
    :init 
    (setq 
     bibtex-completion-bibliography '("~/Dropbox/research/bibliography.bib") ;; writing completion
     bibtex-completion-notes-path '"~/Dropbox/research"
     bibtex-completion-library-path '("~/Dropbox/research/") 
     bibtex-completion-pdf-field "file"
     bibtex-completion-pdf-symbol "⌘"
     bibtex-completion-notes-symbol "✎"
     bibtex-completion-notes-template-multiple-files  
"#+STARTUP: indent nostars logdrawer content
#+TITLE: ${title}
#+CREATOR: ${=key=}
#+AUTHOR: ${author-or-editor}
#+SETUPFILE: \"~/Dropbox/typography/article.org\" 
#+INCLUDE: \"~/Dropbox/typography/layouts.org::*Article\" :only-contents t
#+INCLUDE: \"~/Dropbox/typography/settings.org::*English\" :only-contents t

#+BEGIN_modified
fullcite:${=key=}
\\tcblower
Last modified: 
#+END_modified


# \\printbibliography[title=bibliographie,heading=subbibliography]
# \\printbibliography[title=references]
# \\printbibliography[title=bibliographie]"
     )
    :config
    (setq ivy-bibtex-default-action 'ivy-bibtex-edit-notes)
    )

  ;; (use-package ivy-bibtex :after (org ivy helm-bibtex))

  ;; (use-package ivy-bibtex :after (org ivy)
  ;;   :config
  ;;   (setq ;; ivy-bibtex-bibliography 'org-ref-default-bibliography ;; where your references are stored
  ;;    ;; ivy-bibtex-library-path 'org-ref-pdf-directory ;; where your pdfs etc are stored
  ;;    ;; ivy-bibtex-notes-path 'org-ref-bibliography-notes;; where your notes are stored))
#+END_SRC 
** Org-ref 
#+BEGIN_SRC emacs-lisp
          (use-package org-ref :after (org ivy)
            :init 
            (setq reftex-default-bibliography '("~/Dropbox/research/bibliography.bib")
                  ;; see org-ref for use of these variables
                  ;; org-ref-bibliography-notes "~/Dropbox/research"
                   ;; org-ref-notes-directory "~/Dropbox/research/"
                  org-ref-default-bibliography reftex-default-bibliography
                  org-ref-pdf-directory "~/Documents/pdfs/"
                  ;; org-ref-open-pdf-function 'org-ref-get-mendeley-filename
                  ;; set ivy for completion
                  org-ref-completion-library 'org-ref-ivy-cite)

  (setq org-ref-notes-function
        (lambda (thekey)
          (let ((bibtex-completion-bibliography (org-ref-find-bibliography)))
            (bibtex-completion-edit-notes
             (list (car (org-ref-get-bibtex-key-and-file thekey)))))))
        ;; Tell org-ref to let helm-bibtex find notes for it
      ;; (setq org-ref-notes-function 'org-ref-notes-funcion-many-files)
    ;; Tell org-ref to let helm-bibtex find notes for it
            :config 
    ;; (setq org-ref-notes-function
    ;;       (lambda (thekey)
    ;;         (let ((bibtex-completion-bibliography (org-ref-find-bibliography)))
    ;;           (bibtex-completion-edit-notes
    ;;            (list (car (org-ref-get-bibtex-key-and-file thekey)))))))

        (defun sync0-org-ref-open-pdf-at-point ()
          "Open the pdf for bibtex key under point if it exists."
          (interactive)
          (let* ((results (org-ref-get-bibtex-key-and-file))
                 (key (car results))
                 (pdf-file (car(bibtex-completion-find-pdf key))))
            (if (file-exists-p pdf-file)
               (org-open-file pdf-file))
              (message "No PDF found for %s" key)))
        (setq org-ref-open-pdf-function 'sync0-org-ref-open-pdf-at-point)
            (define-key org-mode-map (kbd "C-c [") 'org-ref-ivy-insert-cite-link)
            ;; (define-key org-mode-map  (kbd "C-c 9") 'org-ref-notes-function)
            (define-key org-mode-map  (kbd "C-c 9") 'ivy-bibtex)
            (define-key bibtex-mode-map  (kbd "C-c 9") 'ivy-bibtex)
            ;; (define-key bibtex-mode-map  (kbd "C-c 9") 'org-ref-open-bibtex-notes)
            ;;(define-key org-mode-map  (kbd "C-c 0") 'ivy-bibtex)
            (define-key org-mode-map  (kbd "C-c 0") 'org-ref-open-citation-at-point)
            (define-key org-mode-map  (kbd "C-c 8") 'sync0-org-ref-open-pdf-at-point)
            (define-key bibtex-mode-map  (kbd "C-c 8") 'sync0-org-ref-open-pdf-at-point)
            ;; define notes template
          ;;   (setq org-ref-note-title-format 
          ;;         "* %t
          ;;  :PROPERTIES: 
          ;;  :Custom_ID: %k
          ;;  :END:
          ;; ")
            )
#+END_SRC 
** Yasnippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet :defer t 
  :commands (yas-minor-mode) ; autoload `yasnippet' when `yas-minor-mode' is called
                                        ; using any means: via a hook or by user
                                        ; Feel free to add more commands to this
                                        ; list to suit your needs.
  :init ; stuff to do before requiring the package
(add-hook 'LaTeX-mode-hook #'yas-minor-mode)
(add-hook 'org-mode-hook #'yas-minor-mode)
(add-hook 'mu4e-compose-mode-hook #'yas-minor-mode)
(add-hook 'bibtex-mode-hook #'yas-minor-mode)
  :config ; stuff to do after requiring the package
(progn
    (yas-reload-all)
;; annoying warning
(add-to-list 'warning-suppress-types '(yasnippet backquote-change))))
#+END_SRC
** Anzu
#+BEGIN_SRC emacs-lisp
  ;;   (use-package anzu  :defer 5
  ;;     :config 
  ;; (progn
  ;; (global-anzu-mode)
  ;;             (setq-default anzu-mode-line-update-function
  ;;                           'spaceline-all-the-icons-anzu-update-func)))
    (use-package anzu  :defer 5
      :config 
  (global-anzu-mode))
#+END_SRC 
** Smooth scrolling
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling :defer t
  :config
  (progn
  (smooth-scrolling-mode 1)
  (setq smooth-scroll-margin 5)))
#+END_SRC      
*** change behavior of org movent
#+BEGIN_SRC emacs-lisp
;(setq org-special-ctrl-a/e t)
#+END_SRC 
*** useful scrolling things
#+BEGIN_SRC emacs-lisp
(defun gcm-scroll-down ()
   (interactive)
   (scroll-up 1))

(global-set-key (kbd "M-j") 'gcm-scroll-down)

(defun gcm-scroll-up ()
   (interactive)
   (scroll-down 1))

(global-set-key (kbd "M-k") 'gcm-scroll-up)
#+END_SRC 
** 取 Company mode
(require 'company)

(add-hook 'after-init-hook 'global-company-mode)

;; Don't enable company-mode in below major modes, OPTIONAL
(setq company-global-modes '(not eshell-mode comint-mode erc-mode rcirc-mode))

;; "text-mode" is a major mode for editing files of text in a human language"
;; most major modes for non-programmers inherit from text-mode
(defun text-mode-hook-setup ()
  ;; make `company-backends' local is critcal
  ;; or else, you will have completion in every major mode, that's very annoying!
  (make-local-variable 'company-backends)


(setq company-ispell-available t) ; error without this

  ;; company-ispell is the plugin to complete words
(add-to-list 'company-backends 'company-ispell)

;; OPTIONAL, if `company-ispell-dictionary' is nil, `ispell-complete-word-dict' is used
;; but I prefer hard code the dictionary path. That's more portable.
(setq company-ispell-dictionary (file-truename "~/.emacs.d/dictionaries/francais.txt")))


(add-hook 'text-mode-hook 'text-mode-hook-setup)

(defun toggle-company-ispell ()
  (interactive)
  (cond
   ((memq 'company-ispell company-backends)
    (setq company-backends (delete 'company-ispell company-backends))
    (message "company-ispell disabled"))
   (t
    (add-to-list 'company-backends 'company-ispell)
    (message "company-ispell enabled!"))))

;; skip the downcase that company does to the variables I autocomplete
(setq company-dabbrev-downcase 0)

;; time it takes before company begins completing
(setq company-idle-delay 0.1)
;;(setq company-selection-wrap-around t)
(define-key company-active-map [tab] 'company-complete)
;;(define-key company-active-map (kbd "M-j") 'company-select-next)
;;(define-key company-active-map (kbd "M-k") 'company-select-previous)
;;(add-hook 'company-mode-hook
 ;;           (lambda ()
   ;;           (define-key evil-insert-state-local-map (kbd "TAB") 'company-complete)
     ;;         (define-key evil-insert-state-local-map (kbd "C-j") 'company-select-next)
       ;;       (define-key evil-insert-state-local-map (kbd "C-k") 'company-select-previous)))

;; avoid conflict with yasnippet 
(advice-add 'company-complete-common :before (lambda () (setq my-company-point (point))))
(advice-add 'company-complete-common :after (lambda ()
  		  				(when (equal my-company-point (point))
  			  			  (yas-expand))))
** Solaire mode
#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode :after doom-themes 
    :hook ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
    :config
    (add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)
  ;; (setq solaire-mode-remap-modeline nil)
    (solaire-mode-swap-bg))
#+END_SRC 
** Hl-line mode
#+BEGIN_SRC emacs-lisp
  (use-package hl-line ; built-in
    :hook ((text-mode conf-mode) . hl-line-mode)
    :config
    ;; I don't need hl-line showing in other windows. This also offers a small
    ;; speed boost when buffer is displayed in multiple windows.
    (setq hl-line-sticky-flag nil
          global-hl-line-sticky-flag nil))

    ;; On Emacs 26+, when point is on the last line, hl-line highlights bleed into
    ;; the rest of the window after eob. This is the fix.
    ;; (when (boundp 'display-line-numbers)
    ;;   (defun doom--line-range ()
    ;;     (cons (line-beginning-position)
    ;;           (cond ((save-excursion
    ;;                    (goto-char (line-end-position))
    ;;                    (and (eobp) (not (bolp))))
    ;;                  (1- (line-end-position)))
    ;;                 ((or (eobp) (save-excursion (forward-line) (eobp)))
    ;;                  (line-end-position))
    ;;                 (t
    ;;                  (line-beginning-position 2)))))
    ;;   (setq hl-line-range-function #'doom--line-range))

    ;; (after! evil
    ;;   (defvar-local doom-buffer-hl-line-mode nil)

      ;; Disable `hl-line' in evil-visual mode (temporarily). `hl-line' can make
      ;; the selection region harder to see while in evil visual mode.
      ;; (defun doom|disable-hl-line ()
      ;;   (when hl-line-mode
      ;;     (setq doom-buffer-hl-line-mode t)
      ;;     (hl-line-mode -1)))
      ;; (defun doom|enable-hl-line-maybe ()
      ;;   (if doom-buffer-hl-line-mode (hl-line-mode +1)))

      ;; (add-hook 'evil-visual-state-entry-hook #'doom|disable-hl-line)
      ;; (add-hook 'evil-visual-state-exit-hook  #'doom|enable-hl-line-maybe)))
#+END_SRC 
** Smartparens 
#+BEGIN_SRC emacs-lisp
        ;; Auto-close delimiters and blocks as you type
      (use-package smartparens
        :hook (emacs-startup . smartparens-global-mode)
        :config
        (require 'smartparens-config)

        (setq sp-autowrap-region nil ; let evil-surround handle this
              sp-highlight-pair-overlay nil
              sp-cancel-autoskip-on-backward-movement nil
              sp-show-pair-delay 0
              sp-max-pair-length 3)

    ;; Add custom pairs
   ;; (require 'smartparens-latex)

  (defun sp-latex-insert-spaces-inside-pair (_id action _context)
    "ID, ACTION, CONTEXT."
    (when (eq action 'insert)
      (insert "  ")
      (backward-char 1))
    (when (and (eq action 'wrap)
               (save-excursion
                 (goto-char (sp-get sp-last-wrapped-region :beg-in))
                 (not (sp--looking-back-p "[[{(]"))))
      (save-excursion
        (goto-char (sp-get sp-last-wrapped-region :end-in))
        (insert " ")
        (goto-char (sp-get sp-last-wrapped-region :beg-in))
        (insert " "))))

  (defun sp-latex-skip-match-apostrophe (ms _mb me)
    "MS, MB, ME."
    (when (equal ms "'")
      (save-excursion
        (goto-char me)
        (looking-at-p "\\sw"))))

  (defun sp-latex-skip-double-quote (_id action _context)
    "ID, ACTION, CONTEXT."
    (when (eq action 'insert)
      (when (looking-at-p "''''")
        (delete-char -2)
        (delete-char 2)
        (forward-char 2))))

  (defun sp-latex-point-after-backslash (id action _context)
    "Return t if point follows a backslash, nil otherwise.
  This predicate is only tested on \"insert\" action.
  ID, ACTION, CONTEXT."
    (when (eq action 'insert)
      (let ((trigger (sp-get-pair id :trigger)))
        (looking-back (concat "\\\\" (regexp-quote (if trigger trigger id))) nil))))

  (add-to-list 'sp-navigate-skip-match
               '((tex-mode plain-tex-mode latex-mode) . sp--backslash-skip-match))

  (sp-with-modes '(
                   tex-mode
                   org-mode
                   plain-tex-mode
                   latex-mode
                   LaTeX-mode
                   )

    (sp-local-pair "`" "'"
                   ;; :actions '(:rem autoskip)
                   ;; :skip-match 'sp-latex-skip-match-apostrophe
                   :unless '(sp-latex-point-after-backslash))

    ;; math modes, yay.  The :actions are provided automatically if
    ;; these pairs do not have global definitions.

    (sp-local-pair "$" "$")
    (sp-local-pair "\\[" "\\]"
                   :unless '(sp-latex-point-after-backslash))

    ;; disable useless pairs.
    (sp-local-pair "\\\\(" nil :actions nil)
    (sp-local-pair "'" nil :actions nil)
    (sp-local-pair "\\\"" nil :actions nil)

    ;; quote should insert ``'' instead of double quotes.  If we ever
    ;; need to insert ", C-q is our friend.
    ;; (sp-local-pair "``" "''"
    ;;                :trigger "\""
    ;;                :unless '(sp-latex-point-after-backslash)
    ;;                :post-handlers '(sp-latex-skip-double-quote))

    ;; add the prefix function sticking to {} pair
    (sp-local-pair "{" nil :prefix "\\\\\\(\\sw\\|\\s_\\)*")

    ;; do not add more space when slurping
    (sp-local-pair "{" "}")
    (sp-local-pair "(" ")")
    (sp-local-pair "[" "]")

    ;; pairs for big brackets.  Needs more research on what pairs are
    ;; useful to add here.  Post suggestions if you know some.
    (sp-local-pair "\\left(" "\\right)"
                   :trigger "\\l("
                   :when '(sp-in-math-p)
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\left[" "\\right]"
                   :trigger "\\l["
                   :when '(sp-in-math-p)
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\left\\{" "\\right\\}"
                   :trigger "\\l{"
                   :when '(sp-in-math-p)
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\left|" "\\right|"
                   :trigger "\\l|"
                   :when '(sp-in-math-p)
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\bigl(" "\\bigr)"
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\biggl(" "\\biggr)"
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\Bigl(" "\\Bigr)"
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\Biggl(" "\\Biggr)"
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\bigl[" "\\bigr]"
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\biggl[" "\\biggr]"
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\Bigl[" "\\Bigr]"
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\Biggl[" "\\Biggr]"
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\bigl\\{" "\\bigr\\}"
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\biggl\\{" "\\biggr\\}"
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\Bigl\\{" "\\Bigr\\}"
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\Biggl\\{" "\\Biggr\\}"
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\lfloor" "\\rfloor"
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\lceil" "\\rceil"
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair "\\langle" "\\rangle"
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair  "\\lVert" "\\rVert"
            :when '(sp-in-math-p)
            :trigger "\\lVert"
            :post-handlers '(sp-latex-insert-spaces-inside-pair))
    (sp-local-pair  "\\lvert" "\\rvert"
            :when '(sp-in-math-p)
            :trigger "\\lvert"
            :post-handlers '(sp-latex-insert-spaces-inside-pair)))

    ;; some common wrappings
    ;; (sp-local-tag "\"" "``" "''" :actions '(wrap)))


        ;; disable smartparens in evil-mode's replace state (they conflict)
        (add-hook 'evil-replace-state-entry-hook #'turn-off-smartparens-mode)
        (add-hook 'evil-replace-state-exit-hook  #'turn-on-smartparens-mode)

    (defhydra hydra-learn-sp (:hint nil)
      "
      _B_ backward-sexp            -----
      _F_ forward-sexp               _s_ splice-sexp
      _L_ backward-down-sexp         _df_ splice-sexp-killing-forward
      _H_ backward-up-sexp           _db_ splice-sexp-killing-backward
    ^^------                         _da_ splice-sexp-killing-around
      _k_ down-sexp                -----
      _j_ up-sexp                    _C-s_ select-next-thing-exchange
    -^^-----                         _C-p_ select-previous-thing
      _n_ next-sexp                  _C-n_ select-next-thing
      _p_ previous-sexp            -----
      _a_ beginning-of-sexp          _C-f_ forward-symbol
      _z_ end-of-sexp                _C-b_ backward-symbol
    --^^-                          -----
      _t_ transpose-sexp             _c_ convolute-sexp
    -^^--                            _g_ absorb-sexp
      _x_ delete-char                _q_ emit-sexp
      _dw_ kill-word               -----
      _dd_ kill-sexp                 _,b_ extract-before-sexp
    -^^--                            _,a_ extract-after-sexp
      _S_ unwrap-sexp              -----
    -^^--                            _AP_ add-to-previous-sexp
      _C-h_ forward-slurp-sexp       _AN_ add-to-next-sexp
      _C-l_ forward-barf-sexp      -----
      _C-S-h_ backward-slurp-sexp    _ join-sexp
      _C-S-l_ backward-barf-sexp     _|_ split-sexp
    "
      ;; TODO: Use () and [] - + * | <space>
      ("B" sp-backward-sexp );; similiar to VIM b
      ("F" sp-forward-sexp );; similar to VIM f
      ;;
      ("L" sp-backward-down-sexp )
      ("H" sp-backward-up-sexp )
      ;;
      ("k" sp-down-sexp ) ; root - towards the root
      ("j" sp-up-sexp )
      ;;
      ("n" sp-next-sexp )
      ("p" sp-previous-sexp )
      ;; a..z
      ("a" sp-beginning-of-sexp )
      ("z" sp-end-of-sexp )
      ;;
      ("t" sp-transpose-sexp )
      ;;
      ("x" sp-delete-char )
      ("dw" sp-kill-word )
      ;;("ds" sp-kill-symbol ) ;; Prefer kill-sexp
      ("dd" sp-kill-sexp )
      ;;("yy" sp-copy-sexp ) ;; Don't like it. Pref visual selection
      ;;
      ("S" sp-unwrap-sexp ) ;; Strip!
      ;;("wh" sp-backward-unwrap-sexp ) ;; Too similar to above
      ;;
      ("C-h" sp-forward-slurp-sexp )
      ("C-l" sp-forward-barf-sexp )
      ("C-S-h" sp-backward-slurp-sexp )
      ("C-S-l" sp-backward-barf-sexp )
      ;;
      ;;("C-[" (bind (sp-wrap-with-pair "[")) ) ;;FIXME
      ;;("C-(" (bind (sp-wrap-with-pair "(")) )
      ;;
      ("s" sp-splice-sexp )
      ("df" sp-splice-sexp-killing-forward )
      ("db" sp-splice-sexp-killing-backward )
      ("da" sp-splice-sexp-killing-around )
      ;;
      ("C-s" sp-select-next-thing-exchange )
      ("C-p" sp-select-previous-thing )
      ("C-n" sp-select-next-thing )
      ;;
      ("C-f" sp-forward-symbol )
      ("C-b" sp-backward-symbol )
      ;;
      ;;("C-t" sp-prefix-tag-object)
      ;;("H-p" sp-prefix-pair-object)
      ("c" sp-convolute-sexp )
      ("g" sp-absorb-sexp )
      ("q" sp-emit-sexp )
      ;;
      (",b" sp-extract-before-sexp )
      (",a" sp-extract-after-sexp )
      ;;
      ("AP" sp-add-to-previous-sexp );; Difference to slurp?
      ("AN" sp-add-to-next-sexp )
      ;;
      ("_" sp-join-sexp ) ;;Good
      ("|" sp-split-sexp )) 

    (global-set-key (kbd "M-g M-p") 'hydra-learn-sp/body))

  #+END_SRC 
** Highlight changes mode
#+BEGIN_SRC emacs-lisp
    ;; higlight changes in documents
  (global-highlight-changes-mode t)
  (setq highlight-changes-visibility-initial-state nil); initially hide
  ; toggle visibility
  ;; (global-set-key (kbd "<f7>")      'highlight-changes-visible-mode) ;; changes
  ;; remove the change-highlight in region
  ;;(global-set-key (kbd "S-<f7>")    'highlight-changes-remove-highlight)

  ;; alt-pgup/pgdown jump to the previous/next change

  ;; if you're not already using it for something else...
  (global-set-key (kbd "M->") 'highlight-changes-next-change)
  (global-set-key (kbd "M-<")  'highlight-changes-previous-change)

  ;;(set-face-foreground 'highlight-changes nil)
  (set-face-foreground 'highlight-changes "#268bd2")
  ;;(set-face-background 'highlight-changes "#382f2f")
  (set-face-background 'highlight-changes nil)
  ;;(set-face-foreground 'highlight-changes-delete nil)
  (set-face-foreground 'highlight-changes-delete "#dc322f")
  ;;(set-face-background 'highlight-changes-delete "#916868")
  (set-face-background 'highlight-changes-delete nil)
  #+END_SRC 
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind
  ;; bind a quick and dirty shortcut to 
   (("C-x g" . magit-status)
;;  bind the popup of popus
   ("C-x M-g" . magit-dispatch)))
  #+END_SRC 
** Org-gcal
#+BEGIN_SRC emacs-lisp
  (use-package org-gcal :defer t :after org 
  :init
  (setq org-gcal-client-id "478680381907-rdq488vt3kdutlt1a32sajihog95iuo2.apps.googleusercontent.com"
          org-gcal-client-secret "EsCu2Ikaga6TIa0KVpZ9jRTS"
          org-gcal-file-alist '(("cantorlunae@gmail.com" .  "~/Dropbox/org/gcal.org")
  ("uv89i0rlnv503i17nedvmo95f8@group.calendar.google.com" . "~/Dropbox/org/unterrichte.org")
  ("c83agj55j9uipbjdd2mmp7h9v8@group.calendar.google.com" . "~/Dropbox/org/ereignisse.org")
  ;; ("ekk7658f3jm5fh1mea2sdnu8vc@group.calendar.google.com" . "~/Dropbox/org/gewohnheiten.org")
  ("#contacts@group.v.calendar.google.com" . "~/Dropbox/org/jahrestage.org")
  ;;("#contacts@group.v.calendar.google.com" . "~/Dropbox/org/jahrestage.org")
  ))
:config
(setq org-gcal-auto-archive nil)
)

  ;;(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
  ;;(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
#+END_SRC 
** Calendar
#+BEGIN_SRC emacs-lisp
(setq calendar-date-style 'european ; format jour/mois/an
      european-calendar-style 't
      calendar-week-start-day 0     ; week starts on monday
      calendar-day-name-array     ["Dimanche" "Lundi" "Mardi" "Mercredi" "Jeudi" "Vendredi" "Samedi"]
      calendar-day-abbrev-array   ["dim" "lun" "mar" "mer" "jeu" "ven" "sam"]
      calendar-month-name-array   ["Janvier" "Février" "Mars" "Avril" "Mai" "Juin" "Juillet"
                                   "Août" "Septembre" "Octobre" "Novembre" "Décembre"]
      calendar-month-abbrev-array ["jan" "fév" "mar" "avr" "mai" "jun" "jul" "aoû" "sep" "oct" "nov" "déc"])

(eval-when-compile
  (require 'calendar)
  (require 'holidays))

(defvar holiday-french-holidays nil
  "French holidays")

(setq calendar-holidays
      '(;; fetes a date variable
	(holiday-easter-etc 0 "Pâques")
        (holiday-easter-etc 1 "Lundi de Pâques")
        (holiday-easter-etc 39 "Ascension")
        (holiday-easter-etc 49 "Pentecôte")
        (holiday-easter-etc -47 "Mardi gras")))
#+END_SRC 
** Calfw
#+BEGIN_SRC emacs-lisp
(require 'calfw)
;;(require 'calfw-gcal)
;;(require 'calfw-cal)
(require 'calfw-org)


(defun my-open-calendar ()
    (interactive)
    (let ((buf (get-buffer "*cfw-calendar*")))
      (if buf
          (pop-to-buffer buf nil)
        (cfw:open-calendar-buffer
         :contents-sources
         (list (cfw:org-create-source "#c0c5ce")
;               (cfw:cal-create-source "Dark Orange")
)
         :view 'week))))

;; keybinding
(global-set-key (kbd "<f7>") 'my-open-calendar)
(define-key cfw:details-mode-map (kbd "SPC") 'cfw:details-kill-buffer-command)

 ;;(global-set-key (kbd "<f7>") 'cfw:open-org-calendar)

  (setq cfw:fchar-junction ?╋
        cfw:fchar-vertical-line ?┃
        cfw:fchar-horizontal-line ?━
        cfw:fchar-left-junction ?┣
        cfw:fchar-right-junction ?┫
        cfw:fchar-top-junction ?┯
        cfw:fchar-top-left-corner ?┏
        cfw:fchar-top-right-corner ?┓)
#+END_SRC 
** Alert (Growl) 
#+BEGIN_SRC emacs-lisp
(use-package alert :load-path "~/.emacs.d/sync0_git/alert" :defer t)
#+END_SRC 
** Powerline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
  :if window-system
  :config (setq-default powerline-default-separator 'nil))
  #+END_SRC 
** Foreign languages
*** Foreign language setup
**** English
#+BEGIN_SRC emacs-lisp
  ;; (defun sync0-toggle-off-input-method ()
  ;;   (interactive)
  ;;   (if current-input-method (deactivate-input-method)))

    (defun sync0-english-keyboard-setup ()
      "Set input methods for EVIL mode suitable for English"
      ;; check whether EVIL mode is active
      (when (bound-and-true-p evil-mode) 
        ;; TeX for evil insert mode 
        (add-hook 'evil-insert-state-entry-hook 
                  (lambda () (set-input-method nil)))
        ;; TeX for evil replace mode
        (add-hook 'evil-replace-state-entry-hook
                  (lambda () (set-input-method nil)))))
  #+END_SRC 
**** French
#+BEGIN_SRC emacs-lisp
  (defun sync0-french-keyboard-setup ()
    "Set input methods for EVIL mode suitable for French"
    ;; check whether EVIL mode is active
    (when (bound-and-true-p evil-mode) 
      ;; french-postfix for evil insert mode 
      (add-hook 'evil-insert-state-entry-hook 
                (lambda () (set-input-method "french-postfix")))
      ;; french-postfix for evil replace mode
      (add-hook 'evil-replace-state-entry-hook
                (lambda () (set-input-method "french-postfix")))))
  #+END_SRC 
*** Rabelais-mode
#+BEGIN_SRC emacs-lisp
  (defvar sync0-language-active 
    "Is a human language minor mode enabled?")

(setq sync0-language-active nil)

  (define-minor-mode rabelais-mode
    "Get your foos in the right places."
;; The initial value.
 :init-value nil
;; The indicator for the mode line.
    :lighter " rabelais"
;; Make it a global minor mode. 
    :global  t
    (when (bound-and-true-p orwell-mode) 
      (add-hook 'text-mode-hook (lambda () (orwell-mode -1))))
    (setq sync0-language-active 'rabelais
          local-abbrev-table rabelais-mode-abbrev-table)
    (sync0-french-keyboard-setup)
        (flyspell-mode 1) 
    (ispell-change-dictionary "fr_FR")
     (add-to-list 'minor-mode-alist '(rabelais-mode " rabelais"))
    (abbrev-mode 1))
  #+END_SRC 
*** Orwell-mode
#+BEGIN_SRC emacs-lisp
  (define-minor-mode orwell-mode
    "Get your foos in the right places."
;; The initial value.
 :init-value nil
;; The indicator for the mode line.
    :lighter " orwell"
;; Make it a global minor mode. 
    :global  t
    (when (bound-and-true-p rabelais-mode) 
      (add-hook 'text-mode-hook (lambda () (rabelais-mode -1))))
    (setq sync0-language-active 'orwell
          local-abbrev-table orwell-mode-abbrev-table)
    (sync0-english-keyboard-setup)
        (flyspell-mode 1) 
    (ispell-change-dictionary "en_US-large")
     (add-to-list 'minor-mode-alist '(orwell-mode " orwell"))
    (abbrev-mode 1))
  #+END_SRC 
*** Marquez-mode
  (defun marquez-mode ()
  "Major mode for editing englisch written for humans to read.
In this mode, paragraphs are delimited only by blank or white lines.
You can thus get the full benefit of adaptive filling
 (see the variable `adaptive-fill-mode').
\\{englisch-mode-map}
Turning on Text mode runs the normal hook `englisch-mode-hook'."
  (interactive)
  (setq local-abbrev-table marquez-mode-abbrev-table)
  (setq mode-name "Marquez")
  (setq minor-mode 'marquez-mode)
  (ispell-change-dictionary "es_CO")
  ;;(setq common-abbrevs-list 'common-english-abbrevs)
  (abbrev-mode 1)
  (run-hooks 'marquez-mode-hook))
** Hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
  ;; In case I later need to wrap defhydra in any special functionality.
  :config
  (setq lv-use-seperator t))
#+END_SRC 
** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :after evil
    :commands (avy-goto-char-2 avy-goto-line avy-org-goto-heading-timer)
    :init
    (evil-define-key 'normal org-mode-map
      "gl" 'avy-goto-line
      "gc" 'avy-goto-char-2
      "go" 'avy-org-goto-heading-timer
      "gr" 'avy-org-refile-as-child)
    :config
    (setq avy-all-windows nil
          avy-background t))
  #+END_SRC 
** Git-gutter 
#+BEGIN_SRC emacs-lisp
            (use-package git-gutter
              :after hydra 
              :commands git-gutter-mode
              :hook (text-mode . git-gutter-mode)
              :config
        ;; (setq-default left-fringe-width  10)
        ;; (setq-default right-fringe-width 10)
                (setq 
               ;  git-gutter:window-width 1
                 git-gutter:modified-sign " " ;; two space
                  git-gutter:added-sign " "    ;; multiple character is OK
                  git-gutter:deleted-sign " ")


      ;;(set-face-background 'git-gutter:modified "orange") ;; background color
      (set-face-background 'git-gutter:modified "#3a81c3") ;; background color
      ;;(set-face-background 'git-gutter:added "green")
      (set-face-background 'git-gutter:added "#7ccd7c")
     ;; (set-face-attribute  'git-gutter:added nil :foreground "black")
      ;;(set-face-background 'git-gutter:deleted "red")
      (set-face-background 'git-gutter:deleted "ee6363")
    ;;  (set-face-attribute  'git-gutter:deleted nil :foreground "black")

      ;;  (after!  evil
      ;;     (defun +version-control|update-git-gutter ()
      ;;       "Refresh git-gutter on ESC. Return nil to prevent shadowing other
      ;; `+evil-esc-hook' hooks."
      ;;       (when git-gutter-mode
      ;;         (ignore (git-gutter))))
      ;;     (add-hook '+evil-esc-hook #'+version-control|update-git-gutter t))

              (defhydra hydra-git-gutter
                (:body-pre (git-gutter-mode 1) :hint nil)
                "
                                                           ╭─────────────────┐
                        Movement   Hunk Actions     Misc.  │ gg: +%-4s(car (git-gutter:statistic))/ -%-3s(cdr (git-gutter:statistic)) │
                        ╭──────────────────────────────────┴─────────────────╯
                           ^_g_^       [_s_] stage        [_R_] set start Rev
                           ^_k_^       [_r_] revert
                           ^↑ ^      [_m_] mark
                           ^↓ ^      [_p_] popup          ╭──────────────────────
                           ^_j_^                          │[_q_] quit
                           ^_G_^                          │[_Q_] Quit and disable"
                ("j" (progn (git-gutter:next-hunk 1) (recenter)))
                ("k" (progn (git-gutter:previous-hunk 1) (recenter)))
                ("g" (progn (goto-char (point-min)) (git-gutter:next-hunk 1)))
                ("G" (progn (goto-char (point-min)) (git-gutter:previous-hunk 1)))
                ("s" git-gutter:stage-hunk)
                ("r" git-gutter:revert-hunk)
                ("m" git-gutter:mark-hunk)
                ("p" git-gutter:popup-hunk)
                ("R" git-gutter:set-start-revision)
                ("q" nil :color blue)
                ("Q" (git-gutter-mode -1) :color blue))

  (global-set-key (kbd "M-g M-g") 'hydra-git-gutter/body))
  #+END_SRC 
** EasyPG
#+BEGIN_SRC emacs-lisp
  (use-package epa-file
    :config
    (epa-file-enable))
  #+END_SRC 
** Default Text Scale
This package provides commands for increasing or decreasing the default
font size in all GUI Emacs frames -- it is like an Emacs-wide version of
~text-scale-mode~.

It works by adjusting the height of the ~default~ face in the ~user~ theme,
which is always combined with any other loaded themes.

It's handy for quickly adjusting the font size for readability or impromptu
screen-sharing.

#+BEGIN_SRC emacs-lisp
  (use-package default-text-scale
    :config
    (global-set-key (kbd "C-M-=") 'default-text-scale-increase)
    (global-set-key (kbd "C-M--") 'default-text-scale-decrease))
  #+END_SRC 
** Git Time Machine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :commands (git-timemachine git-timemachine-toggle)
    :config
    (require 'magit-blame)

    ;; Sometimes I forget `git-timemachine' is enabled in a buffer, so instead of
    ;; showing revision details in the minibuffer, show them in
    ;; `header-line-format', which has better visibility.
    (setq git-timemachine-show-minibuffer-details nil)

    ;; (add-hook 'git-timemachine-mode-hook #'+vcs|init-header-line)
    ;; (advice-add #'git-timemachine-show-revision :after #'+vcs*update-header-line)

    ;; Force evil to rehash keybindings for the current state
    (add-hook 'git-timemachine-mode-hook #'evil-force-normal-state))
  #+END_SRC 
** Mu
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
      (load-file "~/.emacs.d/mu4econfig.el")
  #+END_SRC 
** Company Mode
  ;;           (use-package company
  ;;           :defer 2
  ;;       :config
  ;;         (setq company-idle-delay .1
  ;;                 company-tooltip-limit 5
  ;;           ;; company-begin-commands '(self-insert-command)
  ;;                 ;; company-dabbrev-downcase nil
  ;;                 ;; company-dabbrev-ignore-case nil
  ;;           company-minimum-prefix-length 2
  ;;                 ;; company-dabbrev-code-other-buffers t
  ;;           company-show-numbers t
  ;;           company-selection-wrap-around t
  ;;                 company-tooltip-align-annotations t
  ;;                 company-require-match 'never
  ;;                 ;; company-global-modes '(not eshell-mode comint-mode erc-mode message-mode help-mode gud-mode)
  ;;                 company-frontends '(company-pseudo-tooltip-frontend company-echo-metadata-frontend)
  ;;                 ;; company-backends '(company-capf company-dabbrev company-ispell)
  ;;                 company-transformers '(company-sort-by-occurrence))
  ;;         ;; (add-to-list 'company-backends 'company-bibtex)
  ;; (make-local-variable 'company-backends)
  ;;         (add-to-list 'company-backends 'company-capf)
  ;;         (add-to-list 'company-backends 'company-yasnippet)
  ;;         (add-to-list 'company-backends 'company-elisp)
  ;;         (add-to-list 'company-backends 'company-files)
  ;;         (add-to-list 'company-backends 'company-gtags)
  ;;         (add-to-list 'company-backends 'company-ispell)
  ;; ;; (define-key company-active-map 'company-complete-common nil)
  ;;       (global-company-mode +1))

  ;;     (use-package company-bibtex
  ;;       :after (bibtex company)
  ;;       :config 
  ;;   (add-to-list 'company-backends 'company-bibtex)
  ;;       (setq company-bibtex-bibliography
  ;;               '("/home/sync0/Documents/pdfs/bibliography.bib"))
  ;;       (setq company-bibtex-key-regex "[[:alnum:]+_]*"))

          ;; (autoload 'company-capf "company-capf")
          ;; (autoload 'company-yasnippet "company-yasnippet")
          ;; (autoload 'company-dabbrev "company-dabbrev")
          ;; (autoload 'company-dabbrev-code "company-dabbrev-code")
          ;; (autoload 'company-etags "company-etags")
          ;; (autoload 'company-elisp "company-elisp")
          ;; (autoload 'company-files "company-files")
          ;; (autoload 'company-gtags "company-gtags")
          ;; (autoload 'company-ispell "company-ispell")
** Flycheck
  ;;     (use-package flycheck
  ;;       ;; :init (global-flycheck-mode)
  ;;             :hook (text-mode . flycheck-mode)
  ;;       :config
  ;;       (flycheck-define-checker proselint
  ;;                                "A linter for prose."
  ;;                                :command ("proselint" source-inplace)
  ;;                                :error-patterns
  ;;                                ((warning line-start (file-name) ":" line ":" column ": "
  ;;                                          (id (one-or-more (not (any " "))))
  ;;                                          (message) line-end))
  ;;                                :modes (text-mode markdown-mode gfm-mode org-mode))
  ;; (setq flycheck-check-syntax-automatically '(save
  ;;                                             idle-change
  ;;                                             mode-enabled))
  ;; (with-eval-after-load 'flycheck
  ;;   (flycheck-pos-tip-mode))
  ;; (setq flycheck-indication-mode 'right-fringe)
  ;; (setq flycheck-pos-tip-timeout 10)
  ;; ;; Immediate syntax checking quite annoying. Slow it down a bit.
  ;; (setq flycheck-idle-change-delay 60.0))

    ;; (use-package flycheck
    ;;   :ensure t
    ;;   :if (version<= "24.4" emacs-version)
    ;;   :commands global-flycheck-mode
    ;;   :init (add-hook 'prog-mode-hook 'global-flycheck-mode)
    ;;   :config
    ;;   (progn
    ;;     ;; Settings
    ;;     (setq-default flycheck-emacs-lisp-initialize-packages t
    ;;                   flycheck-highlighting-mode 'lines
    ;;                   flycheck-check-syntax-automatically '(save)
    ;;                   flycheck-disabled-checkers '(c/c++-clang c/c++-gcc))

      ;; (add-to-list 'flycheck-checkers 'proselint)
      ;;   (flycheck-define-checker proselint
      ;;     "A linter for prose."
      ;;     :command ("proselint" source-inplace)
      ;;     :error-patterns
      ;;     ((warning line-start (file-name) ":" line ":" column ": "
      ;;               (id (one-or-more (not (any " "))))
      ;;               (message) line-end))
      ;;     :modes (text-mode markdown-mode gfm-mode))

      ;; (add-to-list 'flycheck-checkers 'proselint)
      ;;   (defun magnars/adjust-flycheck-automatic-syntax-eagerness ()
      ;;   "Adjust how often we check for errors based on if there are any.
      ;; This lets us fix any errors as quickly as possible, but in a
      ;; clean buffer we're an order of magnitude laxer about checking."
      ;;   (setq flycheck-idle-change-delay
      ;;         (if flycheck-current-errors 0.5 30.0)))

      ;; Each buffer gets its own idle-change-delay because of the
      ;; buffer-sensitive adjustment above.
      ;; (make-variable-buffer-local 'flycheck-idle-change-delay)

      ;; (add-hook 'flycheck-after-syntax-check-hook
      ;;           'magnars/adjust-flycheck-automatic-syntax-eagerness)

      ;; Remove newline checks, since they would trigger an immediate check
      ;; when we want the idle-change-delay to be in effect while editing.
      ;; (setq flycheck-check-syntax-automatically '(save
      ;;                                             idle-change
      ;;                                             mode-enabled))

      ;; (eval-after-load 'flycheck
      ;;   '(custom-set-variables
      ;;     '(flycheck-display-errors-function #'flycheck-pos-tip-error-messages)))
** Ediff
#+BEGIN_SRC emacs-lisp
  (use-package ediff
  ;; :commands (modi/ediff-dwim)
  :config
  (progn
    ;; No separate frame for ediff control buffer
    (setq ediff-window-setup-function #'ediff-setup-windows-plain)
    ;; Split windows horizontally in ediff (instead of vertically)
    (setq ediff-split-window-function #'split-window-vertically)
))
  #+END_SRC 
** Minions
  ;; (use-package minions 
  ;;   :init
  ;;   (setq minions-blacklist 
  ;;         ;; '((abbrev-mode . nil)
  ;;         ;;   (auto-fill-mode . nil)
  ;;         ;;   (auto-revert-mode . nil)
  ;;         ;;   (auto-revert-tail-mode . nil)
  ;;         ;;   (flyspell-mode . nil)
  ;;         ;;   (font-lock-mode . nil)
  ;;         ;;   (glasses-mode . nil)
  ;;         ;;   (hide-ifdef-mode . nil)
  ;;         ;;   (highlight-changes-mode . nil)
  ;;         ;;   (outline-minor-mode . nil)
  ;;         ;;   (overwrite-mode . nil)
  ;;         ;;   (overwrite-mode . nil)
  ;;         ;;   (ruler-mode . nil))
  ;;         '((org-bullets-mode . nil)
  ;;         ;; (yas-global-mode . nil)
  ;;         (yas-minor-mode . nil)
  ;;         (global-git-gutter-mode . nil)
  ;;         (git-gutter-mode . nil)
  ;;         (org-indent-mode . nil)
  ;;         (julia-math-mode . nil)
  ;;         (LaTeX-math-mode . nil)
  ;;         (TeX-interactive-mode . nil)
  ;;         (TeX-PDF-mode . nil)
  ;;         (TeX-source-correlate-mode . nil)
  ;;         (TeX-Omega-mode . nil)
  ;;         (flymake-mode . nil)
  ;;         (ess-r-package-mode . nil)
  ;;         (ess-roxy-mode . nil)
  ;;         (ess-debug-minor-mode . nil)
  ;;         (magit-blame-read-only-mode . nil)
  ;;         (magit-blame-mode . nil)
  ;;         (magit-blob-mode . nil)
  ;;         (global-magit-file-mode . nil)
  ;;         (magit-file-mode . nil)
  ;;         (magit-wip-initial-backup-mode . nil)
  ;;         (magit-wip-before-change-mode . nil)
  ;;         (magit-wip-after-apply-mode . nil)
  ;;         (magit-wip-after-save-mode . nil)
  ;;         (magit-wip-after-save-local-mode . nil)
  ;;         (magit-wip-mode . nil)
  ;;         (smerge-mode . nil)
  ;;         (magit-auto-revert-mode . nil)
  ;;         (global-auto-revert-mode . nil)
  ;;         (auto-revert-tail-mode . nil)
  ;;         (auto-revert-mode . nil)
  ;;         (transient-resume-mode . nil)
  ;;         (git-commit-mode . nil)
  ;;         (global-git-commit-mode . nil)
  ;;         (which-function-mode . nil)
  ;;         (shell-command-with-editor-mode . nil)
  ;;         (with-editor-mode . nil)
  ;;         (async-bytecomp-package-mode . nil)
  ;;         (server-mode . nil)
  ;;         (savehist-mode . nil)
  ;;         (global-hi-lock-mode . nil)
  ;;         (hi-lock-mode . nil)
  ;;         (company-search-mode . nil)
  ;;         (global-company-mode . nil)
  ;;         (company-mode . nil)
  ;;         (orgtbl-mode . nil)
  ;;         (org-table-follow-field-mode . nil)
  ;;         (gnus-dead-summary-mode . nil)
  ;;         (gnus-undo-mode . nil)
  ;;         (tar-subfile-mode . nil)
  ;;         (counsel-mode . nil)
  ;;         (xref-etags-mode . nil)
  ;;         (buffer-face-mode . nil)
  ;;         (text-scale-mode . nil)
  ;;         (global-anzu-mode . nil)
  ;;         (anzu-mode . nil)
  ;;         (show-smartparens-global-mode . nil)
  ;;         (show-smartparens-mode . nil)
  ;;         (smartparens-global-mode . nil)
  ;;         (smartparens-global-strict-mode . nil)
  ;;         (smartparens-strict-mode . nil)
  ;;         (smartparens-mode . nil)
  ;;         (electric-pair-mode . nil)
  ;;         (solaire-global-mode . nil)
  ;;         (solaire-mode . nil)
  ;;         (fancy-battery-mode . nil)
  ;;         (display-battery-mode . nil)
  ;;         (doom-modeline-mode . nil)
  ;;         (eldoc-in-minibuffer-mode . nil)
  ;;         (evil-escape-mode . nil)
  ;;         (global-mu4e-conversation-mode . nil)
  ;;         (mu4e-conversation-mode . nil)
  ;;         (default-text-scale-mode . nil)
  ;;         (org-capture-mode . nil)
  ;;         (global-highlight-changes-mode . nil)
  ;;         (highlight-changes-visible-mode . nil)
  ;;         (highlight-changes-mode . nil)
  ;;         (reftex-mode . nil)
  ;;         (diff-minor-mode . nil)
  ;;         (diff-auto-refine-mode . nil)
  ;;         (pdf-view-midnight-minor-mode . nil)
  ;;         (pdf-view-printer-minor-mode . nil)
  ;;         (pdf-view-dark-minor-mode . nil)
  ;;         (pdf-view-auto-slice-minor-mode . nil)
  ;;         (pdf-cache-prefetch-minor-mode . nil)
  ;;         (bibtex-completion-notes-global-mode . nil)
  ;;         (bibtex-completion-notes-mode . nil)
  ;;         (desktop-save-mode . nil)
  ;;         ;; ido-everywhere
  ;;         (doc-view-minor-mode . nil)
  ;;         (image-minor-mode . nil)
  ;;         (dired-hide-details-mode . nil)
  ;;         (mml-mode . nil)
  ;;         (mail-abbrevs-mode . nil)
  ;;         (global-hl-line-mode . nil)
  ;;         (hl-line-mode . nil)
  ;;         (table-fixed-width-mode . nil)
  ;;         (undo-tree-visualizer-selection-mode . nil)
  ;;         (global-undo-tree-mode . nil)
  ;;         (undo-tree-mode . nil)
  ;;         (global-reveal-mode . nil)
  ;;         (reveal-mode . nil)
  ;;         (shell-dirtrack-mode . nil)
  ;;         (evil-mode . nil)
  ;;         (evil-local-mode . nil)
  ;;         (rectangle-mark-mode . nil)
  ;;         (flyspell-mode . nil)
  ;;         (org-cdlatex-mode . nil)
  ;;         (org-src-mode . nil)
  ;;         (outline-minor-mode . nil)
  ;;         (projectile-mode . nil)
  ;;         (compilation-minor-mode . nil)
  ;;         (compilation-shell-minor-mode . nil)
  ;;         (ibuffer-auto-mode . nil)
  ;;         (ivy-mode . nil)
  ;;         (delete-selection-mode . nil)
  ;;         (ispell-minor-mode . nil)
  ;;         (cycle-themes-mode . nil)
  ;;         (recentf-mode . nil)
  ;;         (flycheck-pos-tip-mode . nil)
  ;;         (global-flycheck-mode . nil)
  ;;         (flycheck-mode . nil)
  ;;         (show-paren-mode . nil)
  ;;         (global-display-line-numbers-mode . nil)
  ;;         (display-line-numbers-mode . nil)
  ;;         (display-time-mode . nil)
  ;;         (override-global-mode . nil)
  ;;         (url-handler-mode . nil)
  ;;         (cl-old-struct-compat-mode . nil)
  ;;         (tooltip-mode . nil)
  ;;         (global-eldoc-mode . nil)
  ;;         (eldoc-mode . nil)
  ;;         (electric-quote-mode . nil)
  ;;         (electric-layout-mode . nil)
  ;;         (electric-indent-mode . nil)
  ;;         (mouse-wheel-mode . nil)
  ;;         (tool-bar-mode . nil)
  ;;         (paragraph-indent-minor-mode . nil)
  ;;         (global-prettify-symbols-mode . nil)
  ;;         (prettify-symbols-mode . nil)
  ;;         ;; use-hard-newlines 
  ;;         (menu-bar-mode . nil)
  ;;         (file-name-shadow-mode . nil)
  ;;         (horizontal-scroll-bar-mode . nil)
  ;;         (jit-lock-debug-mode . nil)
  ;;         (global-font-lock-mode . nil)
  ;;         (font-lock-mode . nil)
  ;;         (blink-cursor-mode . nil)
  ;;         (window-divider-mode . nil)
  ;;         (auto-composition-mode . nil)
  ;;         (unify-8859-on-decoding-mode . nil)
  ;;         (unify-8859-on-encoding-mode . nil)
  ;;         (auto-encryption-mode . nil)
  ;;         (auto-compression-mode . nil)
  ;;         (temp-buffer-resize-mode . nil)
  ;;         (visible-mode . nil)
  ;;         ;; buffer-read-only
  ;;         (size-indication-mode . nil)
  ;;         (column-number-mode . nil)
  ;;         (line-number-mode . nil)
  ;;         ;; auto-fill-function 
  ;;         (global-visual-line-mode . nil)
  ;;         (visual-line-mode . nil)
  ;;         (transient-mark-mode . nil)
  ;;         (next-error-follow-minor-mode . nil)
  ;;         (completion-in-region-mode . nil)
  ;;         (auto-save-visited-mode . nil)
  ;;         (auto-save-mode . nil)
  ;;         (auto-fill-mode . nil)
  ;;         (abbrev-mode . nil)
  ;;         (overwrite-mode . nil)
  ;;         (view-mode . nil)
  ;;         (hs-minor-mode . nil)))
  ;;         :config
  ;;         (minions-mode 1))
* Custom Tweaks
** Sentence highlight
#+BEGIN_SRC emacs-lisp
  (use-package sentence-highlight :load-path "~/.emacs.d/sync0/" 
    :after cycle-themes
    :commands sentence-highlight-mode
    :config 
    (progn
     (set-face-foreground 'sentence-highlight-face "#002b36")
      (defun sync0-change-sentence-highlight-color ()
        "Change the sentence hightlight color based on the doom-theme enabled." 
        (when (boundp 'cycle-themes-last-theme-set)
          (if (equal cycle-themes-last-theme-set 'doom-spacegrey)
            ;; solarized-light
            (set-face-foreground 'sentence-highlight-face "#ECBE7B")
            ;; space-grey
            (set-face-foreground 'sentence-highlight-face "#b48ead"))))

        (add-hook 'cycle-themes-after-cycle-hook #'sync0-change-sentence-highlight-color)))
  #+END_SRC 
** Date
#+BEGIN_SRC emacs-lisp
  (defun insert-current-day () 
    (insert (shell-command-to-string "echo -n $(date +%d)")))

  (defun insert-current-moth () 
    (insert (shell-command-to-string "echo -n $(date +%B)")))

  (defun sync0-insert-today-timestamp () 
  "Insert today's date in the YYYY/MM/DD format"
    (insert (shell-command-to-string "echo -n $(date +'%Y/%m/%d')")))

(defun sync0-insert-dates ()
  "insert a bunch of dates"
  (interactive)
  (let* ((month 4)
         (day 1)
         (time (encode-time 1 1 0 day month 2019)))
    (while (= (nth 4 (decode-time time)) month)
      (insert (concat "*** " (format-time-string "%d/%m/%Y \n" time)))
      (setq day (1+ day))
      (setq time (encode-time 1 1 0 day month 2019)))))

(defun sync0-insert-weeks ()
  "insert a bunch of weeks"
  (interactive)
  (let* ((weeky 1))
    (while (< weeky 32)
      (insert (format  "** \ordinalnum{%s} Week \n" weeky))
      (setq weeky (1+ weeky)))))
#+END_SRC
** Automatic abbrevs integration with ispell
#+BEGIN_SRC emacs-lisp
;;(define-key ctl-x-map "\C-i"
  ;;#'endless/ispell-word-then-abbrev)

(defun endless/simple-get-word ()
  (car-safe (save-excursion (ispell-get-word nil))))

(defun endless/ispell-word-then-abbrev ()
  "Call `ispell-word', then create an abbrev for it.
With prefix P, create local abbrev. Otherwise it will
be global.
If there's nothing wrong with the word at point, keep
looking for a typo until the beginning of buffer. You can
skip typos you don't want to fix with `SPC', and you can
abort completely with `C-g'."
  (interactive)
  (let (bef aft)
    (save-excursion
      (while (if (setq bef (endless/simple-get-word))
                 ;; Word was corrected or used quit.
                 (if (ispell-word nil 'quiet)
                     nil ; End the loop.
                   ;; Also end if we reach `bob'.
                   (not (bobp)))
               ;; If there's no word at point, keep looking
               ;; until `bob'.
               (not (bobp)))
        (backward-word)
        (backward-char))
      (setq aft (endless/simple-get-word)))
    (if (and aft bef (not (equal aft bef)))
        (let ((aft (downcase aft))
              (bef (downcase bef)))
          (define-abbrev local-abbrev-table bef aft)
          (message "\"%s\" now expands to \"%s\" %sally"
                   bef aft "loc"))
      (user-error "No typo at or before point"))))

;; set a faster shortcut
(define-key global-map (kbd "M-i") 'endless/ispell-word-then-abbrev)
#+END_SRC 
** Dictionary look up
#+BEGIN_SRC emacs-lisp
  (autoload 'ispell-get-word "ispell")

  (defun sync0-lookup-word (word)
    "Search an online dictionary for the word at point according
    to the active language minor mode."
            (interactive (list (save-excursion (car (ispell-get-word nil)))))
    (cond  ((bound-and-true-p orwell-mode) 
            (browse-url (format "https://www.merriam-webster.com/dictionary/%s" word)))
           ((bound-and-true-p rabelais-mode) 
            (browse-url (format "https://larousse.fr/dictionnaires/francais/%s" word)))
           (t "No language minor mode specified")))

  (defun sync0-lookup-conjugation (word)
    "Search an online dictionary for the word at point according
    to the active language minor mode."
            (interactive (list (save-excursion (car (ispell-get-word nil)))))
    (cond  ((bound-and-true-p orwell-mode) 
            (browse-url (format "https://www.merriam-webster.com/dictionary/%s" word)))
           ((bound-and-true-p rabelais-mode) 
            (browse-url (format "http://la-conjugaison.nouvelobs.com/du/verbe/%s.php" word)))
           (t "No language minor mode specified")))

  (global-set-key (kbd "M-#") 'sync0-lookup-word)
  (global-set-key (kbd "M-$") 'sync0-lookup-conjugation)
  #+END_SRC 
** Yasnippet Quote 
#+BEGIN_SRC emacs-lisp
  (defun sync0-print-bibtex-key ()
    "Print the bibtex key of the document"
    (save-excursion 
      (goto-char (point-min))
      (when 
          (re-search-forward "#\\+CREATOR: \\([[:alnum:]]+\\)" nil t 1)
        (match-string 1))))

  (defun sync0-print-bibtex-key-two ()
    "Print the bibtex key of the document"
    (if (progn (save-excursion 
                 (goto-char (point-min))
                 (re-search-forward "#\\+CREATOR: \\([[:alnum:]]+\\)" nil t 1)))
        (match-string 1)
      (progn (save-excursion
               (when 
                   (re-search-backward "cite\\[.*\\]{\\(.+\\)}" nil t 1)
                 (match-string 1))))))


  ;;   (defun sync0-search-bibtex-key ()
  ;;     "Print the bibtex key of the document"
  ;;   (save-excursion 
  ;; (progn (goto-char (point-min))
  ;; (re-search-forward "^#\+CREATOR:")
  ;; (+ (point) 1)
  ;; (thing-at-point 'word 'no-properties))))

  ;; (defun sync0-last-cited-page ()
  ;;   "Search for the page cited in the last quote environment"
  ;;   (interactive)
  ;;   (save-excursion
  ;;     (if
  ;;         (search-backward "#+BEGIN_QUOTE" nil nil 2)
  ;;         (progn   (search-forward "p." nil nil 1)
  ;;                  ;; (re-search-forward "p\. [0-9]+" nil nil 1)
  ;;                  (re-search-forward "[0-9]+" nil nil 1)
  ;;                  ;; (forward-char 1)
  ;;                  ;; (looking-at "[0-9]+")
  ;;                  (match-string 0))
  ;;       (print "1"))))

  (defun sync0-last-cited-page ()
    "Search for the page cited in the last quote environment"
    (save-excursion
      (if (search-backward "#+BEGIN_QUOTE" nil t 2)
          (let ((match (progn (re-search-forward "p\. [0-9]+" nil nil 1)
                              (match-string 0))))
            (substring match 3))
        (print "1"))))

  (defun sync0-last-cited-page-two ()
    "Search for the page cited in the last quote environment"
    (interactive)
    (save-excursion
      (if
          (search-backward "cite" nil nil 2)
          (let ((match (progn (re-search-forward "p\. [0-9]+" nil nil 1)
                              (match-string 0))))
            (substring match 3))
        (print "1"))))

  ;; (defun sync0-last-cited-page-three ()
  ;;   "Search for the page cited in the last quote environment"
  ;;   (save-excursion
  ;;     (when
  ;;         (re-search-backward "cite\[[0-9]+\]" nil t 1)
  ;;       (let ((match (progn (forward-char 5)
  ;;                           (thing-at-point 'number 'no-properties))))
  ;;         (message "%s" match)))))

  (defun sync0-last-cited-page-three ()
    "Search for the page cited in the last quote environment"
    (save-excursion
      (when
          (re-search-backward "cite\\[\\([0-9]+\\)\\]" nil t 1)
        (match-string 1))))

  (defun sync0-last-cited-author ()
    "Search for the page cited in the last quote environment"
    (save-excursion
      (when 
          (re-search-backward "cite\\[.*\\]{\\(.+\\)}" nil t 1)
        (match-string 1))))

  ;; (save-match-data ; is usually a good idea
  ;;   (and (string-match "\\`\\([^@]+\\)@\\([^@]+\\)\\'" email)
  ;;        (setq user (match-string 1 email)
  ;;              domain (match-string 2 email) ) ))
  #+END_SRC 
** Yasnippet authors
#+BEGIN_SRC emacs-lisp
    ;; (defun sync0-bibtex-extract-lastnames ()
    ;; "Extract the author or editor from entry as string"
    ;; (interactive)
    ;; (save-excursion
    ;;     (re-search-backward "^author")
    ;;     (search-forward "= ")
    ;;     (let* ((x (progn (looking-at "{.+}")(match-string 0)))
    ;;           (y (substring x 1 -1)))
    ;;       (if  (string-match "and" y)
    ;;            (let* ((z (split-string y "and"))
    ;;              (fname (let* ((first (nth 0 z))
    ;;                         (broken (split-string first ",")))
    ;;                         (nth 0 broken)))
    ;;              (sname (let* ((first (nth 1 z))
    ;;                         (broken (split-string first ",")))
    ;;                         (nth 0 broken))))
    ;;     (message "the strings are %s and %s" fname sname))
    ;;         (let* ((z (split-string y ","))
    ;;                (w  (elt z 0)))
    ;;     (message "the string is %s" w))))))

    (defun sync0-bibtex-extract-editors ()
    "Extract the author or editor from entry as string"
    (interactive)
    (save-excursion
        (re-search-backward "^editor")
        (search-forward "= ")
        (let* ((authorstring (progn (looking-at "{.+}")(match-string 0)))
              (firstlast (substring authorstring 1 -1)))
          (if  (string-match "and" firstlast)
               (let* ((authors (split-string firstlast "and"))
                 (f_lastname (let* ((first (nth 0 authors))
                            (twoparts (split-string first ",")))
                            (nth 0 twoparts)))
                 (s_lastname (let* ((first (nth 1 authors))
                            (twoparts (split-string first ",")))
                            (nth 0 twoparts))))
        (message "%s,%s" f_lastname s_lastname))
            (let* ((twoparts (split-string firstlast ","))
                   (lastname  (elt twoparts 0)))
        (message "%s" lastname))))))

    (defun sync0-bibtex-extract-lastnames ()
    "Extract the author or editor from entry as string"
    (interactive)
    (save-excursion
        (re-search-backward "^author")
        (search-forward "= ")
        (let* ((authorstring (progn (looking-at "{.+}")(match-string 0)))
              (firstlast (substring authorstring 1 -1)))
          (if  (string-match "and" firstlast)
               (let* ((authors (split-string firstlast "and"))
                 (f_lastname (let* ((first (nth 0 authors))
                            (twoparts (split-string first ",")))
                            (nth 0 twoparts)))
                 (s_lastname (let* ((first (nth 1 authors))
                            (twoparts (split-string first ",")))
                            (nth 0 twoparts))))
        (message "%s,%s" f_lastname s_lastname))
            (let* ((twoparts (split-string firstlast ","))
                   (lastname  (elt twoparts 0)))
        (message "%s" lastname))))))


  (defun sync0-bibtex-extract-editors-lowercase ()
    "Extract the author or editor from entry as string"
    (interactive)
    (save-excursion
      (re-search-backward "^editor")
      (search-forward "= ")
      (let* ((authorstring (progn (looking-at "{.+}")(match-string 0)))
             (firstlast (substring authorstring 1 -1)))
        (if  (string-match "and" firstlast)
            (let* ((authors (split-string firstlast "and"))
                   (f_author (let* ((first (nth 0 authors))
                                      (twoparts (split-string first ","))
                                      (lastname (nth 0 twoparts))
                                      (firstnamespace (nth 1 twoparts))
                                      (firstname (substring firstnamespace 1 -1))
                                      (downlastname  (downcase lastname))
                                      (downfirstname  (downcase firstname)))
                                 (message "%s-%s" downlastname downfirstname)))
                   (s_author (let* ((first (nth 1 authors))
                                      (twoparts (split-string first ","))
                                 (lastnamespace (nth 0 twoparts))
                                 (firstnamespace (nth 1 twoparts))
                                 (lastname (substring lastnamespace 1))
                                 (firstname (substring firstnamespace 1))
                                 (downlastname  (downcase lastname))
                                 (downfirstname  (downcase firstname)))
                                 (message "%s-%s" downlastname downfirstname))))
                            (message "%s, %s" f_author s_author))
          (let* ((twoparts (split-string firstlast ","))
                 (lastname  (elt twoparts 0))
                 (firstnamespace  (elt twoparts 1))
                 (firstname (substring firstnamespace 1))
                 (downlastname  (downcase lastname))
                 (downfirstname  (downcase firstname)))
            (message "%s-%s" downlastname downfirstname))))))

  (defun sync0-bibtex-extract-lastnames-lowercase ()
    "Extract the author or editor from entry as string"
    (interactive)
    (save-excursion
      (re-search-backward "^author")
      (search-forward "= ")
      (let* ((authorstring (progn (looking-at "{.+}")(match-string 0)))
             (firstlast (substring authorstring 1 -1)))
        (if  (string-match "and" firstlast)
            (let* ((authors (split-string firstlast "and"))
                   (f_author (let* ((first (nth 0 authors))
                                      (twoparts (split-string first ","))
                                      (lastname (nth 0 twoparts))
                                      (firstnamespace (nth 1 twoparts))
                                      (firstname (substring firstnamespace 1 -1))
                                      (downlastname  (downcase lastname))
                                      (downfirstname  (downcase firstname)))
                                 (message "%s-%s" downlastname downfirstname)))
                   (s_author (let* ((first (nth 1 authors))
                                      (twoparts (split-string first ","))
                                 (lastnamespace (nth 0 twoparts))
                                 (firstnamespace (nth 1 twoparts))
                                 (lastname (substring lastnamespace 1))
                                 (firstname (substring firstnamespace 1))
                                 (downlastname  (downcase lastname))
                                 (downfirstname  (downcase firstname)))
                                 (message "%s-%s" downlastname downfirstname))))
                            (message "%s, %s" f_author s_author))
          (let* ((twoparts (split-string firstlast ","))
                 (lastname  (elt twoparts 0))
                 (firstnamespace  (elt twoparts 1))
                 (firstname (substring firstnamespace 1))
                 (downlastname  (downcase lastname))
                 (downfirstname  (downcase firstname)))
            (message "%s-%s" downlastname downfirstname))))))


            (setq sync0-bibtex-types '("Manual" "Patent" "Report" "Thesis" "Article" "Paper"))

            (setq sync0-bibtex-simon-arkseries '("Personal Pappers (1929-1979)" "Schoolwork and Early Career (1929-1943)" "Illinois Institute of Technology (1942-1949)" "RAND Corporation (1949-1973)" "Carnegie Mellon University (1948-2001)" "Consulting (1942-2000)" "Lectures and Talks (1951-2000)" "Publications (1949-2000)" "Correspondence (1940-2001)" "Dissertations (1956-1999)" "Awards (1958-1998)" "Miscellaneous (1942-2003)"))

  ;; (defun sync0-bibtex-extract-lastnames-lowercase ()
  ;;   "Extract the author or editor from entry as string"
  ;;   (interactive)
  ;;   (save-excursion
  ;;     (re-search-backward "^author")
  ;;     (search-forward "= ")
  ;;     (let* ((authorstring (progn (looking-at "{.+}")(match-string 0)))
  ;;            (firstlast (substring authorstring 1 -1)))
  ;;       (if  (string-match "and" firstlast)
  ;;           (let* ((authors (split-string firstlast "and"))
  ;;                  (f_lastname (let* ((first (nth 0 authors))
  ;;                                     (twoparts (split-string first ","))
  ;;                                     (lastname (nth 0 twoparts)))
  ;;                                (downcase lastname)))
  ;;                  (s_lastname (let* ((first (nth 1 authors))
  ;;                                     (twoparts (split-string first ","))
  ;;                                (lastname (nth 0 twoparts)))
  ;;                              (downcase lastname))))
  ;;             (message "%s,%s" f_lastname s_lastname))
  ;;         (let* ((twoparts (split-string firstlast ","))
  ;;                (lastname  (elt twoparts 0))
  ;;                (downlastname  (downcase lastname)))
  ;;           (message "%s" downlastname))))))
  #+END_SRC 
** Sync0 Bibtex
#+BEGIN_SRC emacs-lisp
        (defun sync0-bibtex-next-key ()
        "Print the bibtex key of the document"
        (interactive)
        (let ((bibtex-key (re-search-forward "@.+{" nil nil 1)))
          (goto-char bibtex-key)))

  (defun sync0-bibtex-previous-key ()
    "Print the bibtex key of the document"
    (interactive)
    (let ((bibtex-key (re-search-backward "@.+{" nil nil 2)))
      (goto-char bibtex-key)
      (re-search-forward "@.+{" nil nil 1)))

      ;; (defun sync0-bibtex-previous-key ()
      ;;   "Print the bibtex key of the document"
      ;;   (interactive)
      ;;   (let ((bibtex-key (re-search-backward "@.+{" nil nil 2)))
      ;;     (goto-char bibtex-key)))


    (with-eval-after-load 'evil
                             (evil-define-key 'normal bibtex-mode-map
                               ;; "<" 'outline-previous-visible-heading
                               ;; ">" 'outline-next-visible-heading
                               ;;  (kbd "C->") 'org-forward-heading-same-level
                               ;; (kbd "C-<") 'org-backward-heading-same-level
                               "K" 'sync0-bibtex-previous-key
                               "J" 'sync0-bibtex-next-key))
                               ;; "k" 'previous-line
                               ;; "j" 'next-line)

(defvar sync0-bibtex-reference-keys
  (lazy-completion-table sync0-bibtex-reference-keys
                         (lambda () (sync0-bibtex-parse-keys nil t)))
  "Completion table for BibTeX reference keys.
The CDRs of the elements are t for header keys and nil for crossref keys.")

(defun sync0-bibtex-parse-keys (&optional abortable verbose)
  "Set `bibtex-reference-keys' to the keys used in the whole buffer.
Find both entry keys and crossref entries.  If ABORTABLE is non-nil abort
on user input.  If VERBOSE is non-nil give messages about progress.
Return alist of keys if parsing was completed, `aborted' otherwise.
If `bibtex-parse-keys-fast' is non-nil, use fast but simplified algorithm
for parsing BibTeX keys.  If parsing fails, try to set this variable to nil."
  (if (eq major-mode 'bibtex-mode)
      (let (ref-keys crossref-keys)
        (save-excursion
          (save-match-data
            (if verbose
                (bibtex-progress-message
                 (concat (buffer-name) ": parsing reference keys")))
            (catch 'userkey
              (goto-char (point-min))
              (if bibtex-parse-keys-fast
                  (let ((case-fold-search t)
                        (re (concat bibtex-entry-head "\\|"
                                    ",[ \t\n]*crossref[ \t\n]*=[ \t\n]*"
                                    "\\(\"[^\"]*\"\\|{[^}]*}\\)[ \t\n]*[,})]")))
                    (while (re-search-forward re nil t)
                      (if (and abortable (input-pending-p))
                          ;; user has aborted by typing a key: return `aborted'
                          (throw 'userkey 'aborted))
                      (cond ((match-end 3)
                             ;; This is a crossref.
                             (let ((key (buffer-substring-no-properties
                                         (1+ (match-beginning 3)) (1- (match-end 3)))))
                               (unless (assoc key crossref-keys)
                                 (push (list key) crossref-keys))))
                            ;; only keys of known entries
                            ((assoc-string (bibtex-type-in-head)
                                           bibtex-entry-alist t)
                             ;; This is an entry.
                             (let ((key (bibtex-key-in-head)))
                               (unless (assoc key ref-keys)
                                 (push (cons key t) ref-keys)))))))

                (let (;; ignore @String entries because they are handled
                      ;; separately by `bibtex-parse-strings'
                      (bibtex-sort-ignore-string-entries t)
                      bounds)
                  (bibtex-map-entries
                   (lambda (key _beg end)
                     (if (and abortable
                              (input-pending-p))
                         ;; user has aborted by typing a key: return `aborted'
                         (throw 'userkey 'aborted))
                     (if verbose (bibtex-progress-message))
                     (unless (assoc key ref-keys)
                       (push (cons key t) ref-keys))
                     (if (and (setq bounds (bibtex-search-forward-field "crossref" end))
                              (setq key (bibtex-text-in-field-bounds bounds t))
                              (not (assoc key crossref-keys)))
                         (push (list key) crossref-keys))))))

              (dolist (key crossref-keys)
                (unless (assoc (car key) ref-keys) (push key ref-keys)))
              (if verbose
                  (bibtex-progress-message 'done))
              ;; successful operation --> return `bibtex-reference-keys'
              (setq bibtex-reference-keys ref-keys)))))))

  #+END_SRC 
** More Syn0 bibtex

(defun sync0-bibtex-list-publishers ()
 (interactive)
 (save-excursion
   (progn 
    (while (and (re-search-forward "^[ \t]*@" nil nil 1)
                (re-search-forward "^publisher = " nil nil 1))
     (let* ((pubstringfull  (progn (looking-at "{.+}")
                                   (match-string 0)))
            (pubstring     (substring pubstringfull 1 -1)))
         (add-to-list 'sync0-bibtex-publisher-list 'pubstring)))
      (message "%s" sync0-bibtex-publisher-list))))


(defun sync0-bibtex-list-publishers ()
 (interactive)
 (save-excursion
   (progn 
    (while (re-search-forward "^[ \t]*@" nil t 1)
      (let* ((pubstringfull  (when  (re-search-forward "^publisher = " nil nil 1)
                                    (looking-at "{.+}")
                                    (match-string 0)))
            (pubstring     (substring pubstringfull 1 -1)))
         (cons pubstring sync0-bibtex-publisher-list)))
      (message "%s" sync0-bibtex-publisher-list))))

(defun sync0-bibtex-list-publishers ()
 (interactive)
 (save-excursion
   (progn 
    (while (re-search-forward "^[ \t]*@" nil t 1)
      (let* ((pubstringfull  (when  (re-search-forward "^publisher = " nil nil 1)
                                    (looking-at "{.+}")
                                    (match-string 0)))
            (pubstring     (substring pubstringfull 1 -1)))
         (cons pubstring sync0-bibtex-publisher-list)))
      (message "%s" sync0-bibtex-publisher-list))))


(defun sync0-bibtex-list-publishers ()
 (interactive)
 (save-excursion
   (progn 
    (while (re-search-forward "^publisher = " nil t 1)
      (let* ((pubstringfull  (progn 
                                    (looking-at "{.+}")
                                    (match-string 0)))
            (pubstring     (substring pubstringfull 1 -1)))
         (cons pubstring sync0-bibtex-publisher-list)))
      (message "%s" sync0-bibtex-publisher-list))))



(defun sync0-bibtex-list-publishers ()
 (interactive)
 (save-excursion

   (cl-loop for item = (parsebib-find-next-item)
            while item do
    (let* ((pubstringfull (when (re-search-forward "^publisher = " nil nil 1)
                                (looking-at "{.+}")
                                (match-string 0)))
           (pubstring     (substring pubstringfull 1 -1)))

(cl-loop for pubstring in '(fred sue alice joe june)
              collect name
              append kids)

(cl-loop for name in '(fred sue alice joe june)
              for kids in '((bob ken) () () (kris sunshine) ())
              collect name
              append kids)


(defun sync0-bibtex-list-publishers ()
 (interactive)
 (save-excursion
   (let* ((pubstringfull (progn (re-search-forward "^publisher = {.+}," nil nil 1)
                                (match-string 0)))
            (pubstring     (substring pubstringfull 13 -2)))
      (message "%s" pubstring))))


         (push (cons pubstring t) ref-keys)))))))
         (push (list key) crossref-keys))))

   )))


  ;; (goto-char (point-min))
  (cl-loop with entry = nil
           for entry-type = (parsebib-find-next-item)
           while entry-type do
            (unless 
             (setq entry (parsebib-read-entry entry-type nil strings))
             (if entry
                (puthash (cdr (assoc-string "=key=" entry)) entry hash))))
    hash))


    (re-search-forward "^publisher = ")

(cl-loop for buf in (buffer-list)
              collect (buffer-file-name buf))

** Exportable time stamps
#+BEGIN_SRC emacs-lisp
  (defun sync0-update-timestamp ()
    "Update current #+DATE timestamp"
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (let ((regex "[0-9][0-9][0-9][0-9]\/[0-9][0-9]\/[0-9][0-9]")
            (date (shell-command-to-string "echo -n $(date +'%Y/%m/%d')")))
        ;; (when (search-forward "#+DATE:" nil nil 1)
        ;;   (if (progn (forward-char 1)(looking-at regex))
        ;;       (replace-match date)
        ;;     (sync0-insert-today-timestamp)))
        (when (search-forward "Last modified:" nil nil 1)
          (if (progn (forward-char 1)(looking-at regex))
              (replace-match date)
            (sync0-insert-today-timestamp))))))

  ;; (defun sync0-update-timestamp ()
  ;;   "Update current #+DATE timestamp"
  ;;   (interactive)
  ;;   (save-excursion
  ;;     (goto-char (point-min))
  ;;     (let ((regex "[0-9][0-9][0-9][0-9]\/[0-9][0-9]\/[0-9][0-9]")
  ;;           (date (shell-command-to-string "echo -n $(date +'%Y/%m/%d')")))
  ;;       (when (search-forward "#+DATE:" nil nil 1)
  ;;         (if (progn (forward-char 1)(looking-at regex))
  ;;             (replace-match date)
  ;;           (sync0-insert-today-timestamp)))
  ;;       (when (search-forward "Last modified:" nil nil 1)
  ;;         (if (progn (forward-char 1)(looking-at regex))
  ;;             (replace-match date)
  ;;           (sync0-insert-today-timestamp))))))

  ;;   (defun sync0-update-timestamp ()
  ;;     "Update current #+DATE timestamp"
  ;;     (interactive)
  ;;     (save-excursion
  ;;         (goto-char (point-min))
  ;; (when (re-search-forward "DATE:")
  ;; (re-search-forward "[0-9]+\/[0-9]+\/[0-9]+")
  ;; (let ((date (sync0-insert-today-timestamp)))
  ;; (replace-match date)))))

  (add-hook 'before-save-hook (lambda ()
                                (when (and (eq major-mode 'org-mode)
                                           (not (equal buffer-file-name "/home/sync0/Dropbox/research/forschungsbuch.org"))
                                           (equal default-directory "/home/sync0/Dropbox/research/"))
                                  (sync0-update-timestamp))))

  #+END_SRC 
** Auto update Org Modified Property
#+BEGIN_SRC emacs-lisp
        (defun yant/getentryhash ()
        "Get the hash sum of the text in current entry, except :HASH: and :MODIFIED: property texts."
        (save-excursion
          (let* ((beg (point-min))
             (end (point-max))
             (full-str (buffer-substring beg end))
             (str-nohash (if (string-match "^ *:HASH:.+\n" full-str)
                     (replace-match "" nil nil full-str)
                   full-str))
             (str-nohash-nomod (if (string-match "^ *:MODIFIED:.+\n" str-nohash)
                       (replace-match "" nil nil str-nohash)
                         str-nohash))
             (str-nohash-nomod-nopropbeg (if (string-match "^ *:PROPERTIES:\n" str-nohash-nomod)
                             (replace-match "" nil nil str-nohash-nomod)
                           str-nohash-nomod))
             (str-nohash-nomod-nopropbeg-end (if (string-match "^ *:END:\n" str-nohash-nomod-nopropbeg)
                                 (replace-match "" nil nil str-nohash-nomod-nopropbeg)
                               str-nohash-nomod-nopropbeg)))
            (sxhash str-nohash-nomod-nopropbeg-end))))

      (defun yant/update-modification-time ()
        "Set the :MODIFIED: property of the current entry to '%Y/%m/%d' and update :HASH: property."
  (save-excursion
  (goto-char (point-min))
  (progn
  (unless (looking-at "\* .+")
  (org-forward-heading-same-level (point)))
        (org-set-property "HASH" (format "%s" (yant/getentryhash)))    
        (org-set-property "MODIFIED" (format-time-string "%Y/%m/%d")))))

      ;; (defun yant/skip-nonmodified ()
      ;;   "Skip org entries, which were not modified according to the :HASH: property"
      ;;   (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      ;;     (if (string= (org-entry-get (point) "HASH" nil) (format "%s" (yant/getentryhash)))
      ;;     next-headline
      ;;       nil)))

      ;; (add-hook 'before-save-hook (lambda ()
      ;;                   (when (and (eq major-mode 'org-mode)
      ;;                     (not (equal buffer-file-name "/home/sync0/Dropbox/research/master.org"))
      ;;                    (equal default-directory "/home/sync0/Dropbox/research/"))
      ;;                 (org-map-entries #'yant/update-modification-time nil 'file #'yant/skip-nonmodified))))


    ;;   (add-hook 'before-save-hook (lambda ()
    ;;                     (when (and (eq major-mode 'org-mode)
    ;;                       (not (equal buffer-file-name "/home/sync0/Dropbox/research/forschungsbuch/.org"))
    ;;                      (equal default-directory "/home/sync0/Dropbox/research/"))
    ;; (yant/update-modification-time))))

  #+END_SRC 
** Useful Key Bindings
 #+BEGIN_SRC emacs-lisp
;; Font size change
 (define-key global-map (kbd "C-=") 'text-scale-increase)
 (define-key global-map (kbd "C--") 'text-scale-decrease)

;; Cycle through buffers
 (global-set-key (kbd "<C-tab>") 'bury-buffer)

;; Quickly save
 (global-set-key "\M-w" 'save-buffer)

;; Quickly work with bookmarks
  (global-set-key (kbd "M-m") 'bookmark-set)
  (global-set-key (kbd "M-b") 'counsel-bookmark)
 #+END_SRC
*** Load EMACS initialization file
 (global-set-key (kbd "C-c i") 
 (lambda() (interactive)(org-babel-load-file "~/.emacs.d/emacs_settings.org")))
*** Ctrl-<space> to pop-global-mark
 (defun pop-local-or-global-mark ()
  "Pop to local mark if it exists or to the global mark if it does not."
  (interactive)
  (if (mark t)
      (pop-to-mark-command)
      (pop-global-mark)))

;; keybinding
;;(global-set-key (kbd "C-SPC") nil) ;; default bound to set-mark
;;(global-set-key (kbd "C-SPC") 'pop-local-or-global-mark) 
