#+TITLE: Emacs Settings
#+AUTHOR: Carlos Alberto Rivera Carreño
#+EMAIL: cantorlunae@gmail.com
#+STARTUP: noindent  overview
#+PROPERTY: header-args :tangle yes
* Initialization
** Notes
- Remember that <s + tab creates a code block for adding more entries. remember to add to it "emacs-lisp".
- Remember the location for hunspell dictionaries should be in /usr/share/hunspell.
** Lexical bindings
#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
#+END_SRC 
** Tangling 
#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC 
** Packages
#+BEGIN_SRC emacs-lisp
(require 'cl)
(require 'package)
(package-initialize)

;; Repositories 
(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))

;; Install missing packages

(setq package-list '(
alert
all-the-icons
all-the-icons-ivy
anzu
async
auctex
biblio
biblio-core
bind-key
cl
counsel
          ;;company              ; Modular text completion framework
dash
doom-themes
eldoc-eval
epl
ess
evil
evil-anzu
evil-multiedit
;; define-word
f
ghub
          ;;git-gutter-fringe    ; Fringe version of git-gutter.el
          ;;golden-ratio         ; Automatic resizing windows to golden ratio
git-commit
gntp
goto-chg
helm
helm-bibtex
helm-core
hlinum
hydra
iedit
ivy
julia-mode
key-chord
let-alist
log4e
magit
memoize
minimap
magit-popup
neotree
nlinum
nlinum-hl
org
;;org-bullets
org-gcal
org-ref
parsebib
pdf-tools
pkg-info
popup
powerline
projectile           ; Manage and navigate projects in Emacs easily
request
request-deferred
s
smooth-scrolling
solaire-mode
swiper
tablist
undo-tree
use-package
with-editor
;; which-key
yasnippet))

; fetch the list of packages available 
(unless package-archive-contents
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

;; avoid error with package signatures
(setq package-check-signature nil)
#+END_SRC
** Idle require
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/sync0_git/idle-require.el")
(load "idle-require")             ; Need in order to use idle-require

(dolist (feature
         '(
           tex-mode))               ; TeX, LaTeX, and SliTeX mode commands
  (idle-require feature))

(setq idle-require-idle-delay 5)
(idle-require-mode 1)
#+END_SRC
** Workspace settings 
#+BEGIN_SRC emacs-lisp
       (tool-bar-mode -1) ; introduced in emacs 21
       (menu-bar-mode -1)
       (scroll-bar-mode -1)
       (menu-bar-showhide-fringe-menu-customize-disable)
       (add-to-list 'default-frame-alist '(fullscreen . maximized))

       (setq mode-line-format nil
       inhibit-splash-screen t
       echo-keystrokes 0.1
       auto-revert-interval 1
       ;right-margin-width 70
;;(setq-default truncate-lines 1)
;;(setq-default word-wrap nil)
       ;;(setq left-margin-width 26)
       ;; (setq right-margin-width 26)
)
       ;; (add-hook 'emacs-startup-hook 'toggle-frame-maximized)

   (setq-default                    ; Maximum line width
              ;truncate-lines t                  ; Don't fold lines
              indent-tabs-mode nil              ; Use spaces instead of tabs
              split-width-threshold 160         ; Split verticly by default
              split-height-threshold nil        ; Split verticly by default
              ;auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere
)


;;Workspace keybindgs
(defun toggle-mode-line () "toggles the modeline on and off"
  (interactive) 
  (setq mode-line-format
    (if (equal mode-line-format nil)
        (default-value 'mode-line-format)) )
  (redraw-display))

(global-set-key [C-f11] 'toggle-mode-line)
(global-set-key (kbd "<f8>") 'tool-bar-mode)
(global-set-key (kbd "<f9>") 'menu-bar-mode)
#+END_SRC
** Mixed settings
#+BEGIN_SRC emacs-lisp
;; Bookmarks directory
(setq bookmark-default-file (concat user-emacs-directory "bookmarks")
      bookmark-save-flag 1)

;; Autosave
(setq auto-save-interval 100
         auto-save-timeout 60)

;; CUSTOM directory
(setq custom-file (expand-file-name "custom_settings.el" user-emacs-directory))
(load custom-file)

;; Remove yes-no EMACS inconsistency
(fset 'yes-or-no-p 'y-or-n-p)

;; Git gutter thingy
(setq fringes-outside-margins nil)

;; Force UTF-8 encoding

;; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
;; (setq utf-translate-cjk-mode nil)
(set-language-environment 'utf-8)
;; backwards compatibility as default-buffer-file-coding-system
;; is deprecated in 23.2.
;; (if (boundp buffer-file-coding-system)
;;    (setq buffer-file-coding-system 'utf-8)
;; (setq default-buffer-file-coding-system 'utf-8))

;; set the default encoding system
(setq default-file-name-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(when (display-graphic-p)

;; Treat clipboard input as UTF-8 string first; compound text next, etc.
   (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC
** List of recent files
#+BEGIN_SRC emacs-lisp
(require 'recentf)
(setq recentf-max-saved-items 25
      recentf-max-menu-items 25)
(recentf-mode +1)

(global-set-key (kbd "<f5>") 'recentf-open-files)
#+END_SRC
** Margins to buffer
#+BEGIN_SRC emacs-lisp
;; setting margins at start up
;;(setq left-margin-width 26)
;;(setq right-margin-width 26)

;; margins function
(defun my-toggle-margins ()
"Set margins in current buffer."
(interactive)
  (if (or (> left-margin-width 0) (> right-margin-width 0))
    (progn
      (setq left-margin-width 0)
      (setq right-margin-width 0)
      (set-window-buffer (selected-window) (current-buffer)))
    (setq left-margin-width 26)
    (setq right-margin-width 26)
    (set-window-buffer (selected-window) (current-buffer))))

;; set key binding
(global-set-key [C-f9] 'my-toggle-margins)
#+END_SRC
** Text settings
#+BEGIN_SRC emacs-lisp
;; Monospaced faces 
;; define default faces
(set-face-attribute 'default nil :font "Fira Mono")
(set-face-attribute 'default nil :height 130)

 (defun my-buffer-face-mode-fixed ()
   "Sets a fixed width (monospace) font in current buffer"
   (interactive)
   (setq buffer-face-mode-face '(:family "Fira Mono" :height 130 :spacing monospace))
   (buffer-face-mode))

;; Variable-width faces 
 (defun my-buffer-face-mode-variable ()
   "Set font to a variable width (proportional) fonts in current buffer"
   (interactive)
   (setq buffer-face-mode-face '(:family "Linux Libertine Display" :height 160))
   ;;(setq buffer-face-mode-face '(:family "Linux Libertine Display" :height 160 :width expanded))
   (buffer-face-mode))

;; Set default font faces for Info, ERC, and Org
 (add-hook 'erc-mode-hook 'my-buffer-face-mode-variable)
 (add-hook 'Info-mode-hook 'my-buffer-face-mode-variable)
 (add-hook 'org-mode-hook 'my-buffer-face-mode-variable)

;; Allow narrowing
(put 'narrow-to-region 'disabled nil)

;; Word wrap
 (setq org-startup-truncated t)

 ;; Auto-fill settings
 (setq-default fill-column 75)
 (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
 ;; respect de la typographie française par fill
 (setq fill-nobreak-predicate '(fill-french-nobreak-p))
 (add-hook 'text-mode-hook 'turn-off-auto-fill)
 ;; (add-hook 'org-mode-hook 'turn-on-auto-fill)
 #+END_SRC
*** Replace smart quotes with straight quotes 
Replace smart quotes with straight quotes so that spell check can recognize
words with contractions like “don’t” and “can’t.” For when I paste text in
that I’ve copied from the web.
#+BEGIN_SRC emacs-lisp
(setq smart-quote-regexp-replacements
'(
("\\(\\w\\)- " . "\\1")
("\\(\\w\\)\\(  [-—] \\|—\\)" . "\\1---")

))

(defun replace-smart-quotes-regexp (beg end)
  "Replace 'smart quotes' in buffer or region with ascii quotes."
  (interactive "r")
  (mapcar
   (lambda (r)
     (save-excursion
       (replace-regexp (car r) (cdr r) nil beg (min end (point-max)))))
   smart-quote-regexp-replacements)
  )

(defun replace-smart-quotes (beg end)
  "Replace 'smart quotes' in buffer or region with ascii quotes."
  (interactive "r")
;;(while (search-forward-regexp "- " nil to)
;; (replace-match "") nil t)
;; add alpha. And replace the alpha.

  (replace-smart-quotes-regexp beg end)
  (format-replace-strings '(
                            ("\x201C" . "``")
                            ("“" . "``")
                            ("\x201D" . "''")
                            ("”" . "''")
                            ("\x2018" . "`")
                            ("\x2019" . "'")
                            ("’" . "'")
;;("''" . "\"")
;;("​" . "")
;;("…" . "...")
("…" . "\\ldots")
("..." . "\\ldots")
;;("• " . "- ")
;;(" " . "")
("  " . " ")

;("ó" . "-")
;("á" . "-")
;("Õ" . "'")
;("Õ" . "'")
;("Ò" . "\"")
;("Ó" . "\"")

;("―" . "\"")
;("‖" . "\"")

;; ("- " . "") ; also remove stray spac- es
;; ("­ " . "") ; also remove stray spac- es
)
                       nil   beg (min end (point-max)))

)
#+END_SRC 
** 取 Solarized theme
#+BEGIN_SRC emacs-lisp
;;(add-to-list 'custom-theme-load-path "/home/sync0/.emacs.d/elpa/")
;; Don't change size of org-mode headlines (but keep other size-changes)
;;(setq solarized-scale-org-headlines nil)
;; Don't change the font for some headings and titles
;;(setq solarized-use-variable-pitch nil)

;; load light theme
;;(load-theme 'solarized-light t)

;; load dark theme
;;(load-theme 'solarized-dark t)
#+END_SRC
** Abbrev Mode
#+BEGIN_SRC emacs-lisp
;; avoid expansion character insertion
(defun dont-insert-expansion-char ()  t)    ;; this is the "hook" function
  (put 'dont-insert-expansion-char 'no-self-insert t)   ;; the hook should have a "no-self-insert"-property set 

;; tell emacs where to read abbrev
(setq abbrev-file-name             
        "~/.emacs.d/abbrev_defs")    

;; save abbrevs when files are saved
  (setq save-abbrevs t)              

;; avoid errors when reading abbrev_defs
 (if (file-exists-p abbrev-file-name)
        (quietly-read-abbrev-file))

;; automatically turn on abbrev-mode for the following modes
(dolist (hook '(org-mode-hook
                    emacs-lisp-mode-hook
                    text-mode-hook))
      (add-hook hook (lambda () (abbrev-mode 1))))

;; try emacs to accept ' as a word constituent. 
(setq dabbrev-abbrev-char-regexp  "\\sw")
#+END_SRC
** Elisp evaluation
#+BEGIN_SRC emacs-lisp
;; (add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)
;; (add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode)
#+END_SRC 
** Annoying character replacement
(defcustom smart-to-ascii '(("\x201C" . "``")
                ("\x201D" . "''")
                ("\x2018" . "`")
                            ("\x2019" . "'")
                            ;; en-dash
                            ("\x2013" . "--")
                            ;; em-dash
                            ("\x2014" . "---"))
  ""
  :type '(repeat (cons (string :tag "Smart Character  ")
                       (string :tag "Ascii Replacement"))))

(defun replace-smart-to-ascii (beg end)
  (interactive "r")
  (format-replace-strings smart-to-ascii
                          nil beg end))

;; make it automatic
(advice-add 'yank :after (lambda (&optional ignore)
                           (replace-smart-to-ascii (mark) (point)))
            '(name replace-smart))
* Packages 
** Doom theme
#+BEGIN_SRC emacs-lisp
(require 'doom-themes)

;; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled

;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
;; may have their own settings.
(load-theme 'doom-one t)
;;(load-theme 'doom-one-vibrant t)
;;(load-theme 'doom-molokai t)
;;(load-theme 'doom-nova t)
(load-theme 'doom-one-light t)
;;(load-theme 'doom-peacock t)
;;(load-theme 'doom-tomorrow-night t)
;;(load-theme 'doom-solarized-light t)
(load-theme 'doom-spacegrey t)

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Enable custom neotree theme
(doom-themes-neotree-config)  ; all-the-icons fonts must be installed!

;; Corrects (and improves) org-mode's native fontification.
(doom-themes-org-config)

;; Cycley between thèmes
(add-to-list 'load-path "~/.emacs.d/sync0_git/cycle-themes.el/")
(load "cycle-themes")

(setq cycle-themes-theme-list
'(doom-spacegrey doom-one-light doom-one doom-molokai doom-solarized-light))

(cycle-themes-mode)
#+END_SRC 
** Spellchecking
 #+BEGIN_SRC emacs-lisp
;; Ispell - spell checking
;; basic setup

 (cond
   ;; try hunspell at first
   ;; if hunspell does NOT exist, use aspell
  ((executable-find "hunspell")
   (setq ispell-program-name "hunspell")
   (setq ispell-local-dictionary "fr_FR")
   ;;(setq ispell-local-dictionary "en_US")
   (setq ispell-local-dictionary-alist '(  
     (nil "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US" ) nil utf-8)
     ("english" "[[:alpha:]]" "[^[:alpha:]]" "[']" t ("-d" "en_US" ) nil utf-8)
     ("german" "[[:alpha:]ÄÖÜéäöüß]" "[^[:alpha:]ÄÖÜéäöüß]" "[']" t ("-d" "de_DE") nil utf-8)
     ("spanish" "[[:alpha:]ÁÉÍÓÚÄËÏÖÜÑáéíóúäëïöüñ]" "[^[:alpha:]ÁÉÍÓÚÄËÏÖÜÑáéíóúäëïöüñ]" "[']" t ("-d" "es_ES") nil utf-8)
     ("italian" "[[:alpha:]AEÉIOUàèéìòù]" "[^[:alpha:]AEÉIOUàèéìòù]" "[---']" t ("-d" "it_IT") "~tex" nil utf-8)
     ("french" "[[:alpha:]ÀÂÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü]" "[^[:alpha:]ÀÂÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü]" "[']" t ("-d" "fr_FR") nil  utf-8))))

  ((executable-find "aspell")
   (setq ispell-program-name "aspell")
   ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
   (setq ispell-extra-args '("--sug-mode=ultra"))))
   ;;(setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))))
   ;;(setq ispell-extra-args '("--sug-mode=ultra" "--lang=fr_FR"))))

 ;; check next highlighted word custom function
 (defun flyspell-check-next-highlighted-word ()
   "Custom function to spell check next highlighted word"
   (interactive)
   (flyspell-goto-next-error)
   (ispell-word)
   )

 ;; keybindings
 ;;(global-set-key (kbd "<f7>") 'ispell-word)
 (global-set-key (kbd "C-S-<f7>") 'flyspell-mode)
 (global-set-key (kbd "C-M-<f7>") 'flyspell-buffer)
 (global-set-key (kbd "C-<f7>") 'flyspell-check-previous-highlighted-word)
 (global-set-key (kbd "M-<f7>") 'flyspell-check-next-highlighted-word)

;; ignore tex commands
 (add-hook 'org-mode-hook (lambda () (setq ispell-parser 'tex)))
 (defun flyspell-ignore-tex ()
   (interactive)
   (set (make-variable-buffer-local 'ispell-parser) 'tex))
 (add-hook 'org-mode-hook 'flyspell-ignore-tex)

;; ignore sections of files for spellcheck
 (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
 (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
 (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))
 (add-to-list 'ispell-skip-region-alist '("^\\*\sEinstellungen" . "^\\*\\*\sEnde"))

;; Flyspell
 ;;(setq-default flyspell-mode t)
 ;; better performance
 (setq flyspell-issue-message-flag nil)

;; Flyspell lazy
 (add-to-list 'load-path "~/.emacs.d/sync0_git/flyspell-lazy")
 (require 'flyspell-lazy)
 (flyspell-lazy-mode 1)
 (flyspell-mode 1)      ; or (flyspell-prog-mode)
 #+END_SRC 
** Auc-Tex
*** set pdf conversion automatic
#+BEGIN_SRC emacs-lisp
(setq Tex-PDF-mode t)
#+END_SRC
** EVIL mode 
*** initializing
#+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode 1)
#+END_SRC
*** Key-chord for fast exit insert mode
#+BEGIN_SRC emacs-lisp
;; (require 'evil-escape)
;; (evil-escape 1)
;; (setq-default evil-escape-key-sequence "fd")
;; (setq-default evil-escape-delay 0.2)

 ;; (require 'key-chord)
 ;;(key-chord-mode 1)
 ;;(key-chord-define evil-insert-state-map  "fd" 'evil-normal-state)
#+END_SRC 
*** input methods 
#+BEGIN_SRC emacs-lisp
  ;; set default input method
  ;; (setq default-input-method "TeX")

  ;; no input method for evil normal state
  (add-hook 'evil-normal-state-entry-hook
    (lambda () (set-input-method 'nil)))

;; Spanish

  ;; spanish-postfix for evil insert mode
  ;;(add-hook 'evil-insert-state-entry-hook
  ;; (lambda () (set-input-method "spanish-postfix")))

  ;; spanish-postfix for evil insert mode
  ;;(add-hook 'evil-insert-state-entry-hook
  ;; (lambda () (set-input-method "spanish-postfix")))

;; Latin

  ;; latin-1-postfix for evil replace mode
  ;;(add-hook 'evil-replace-state-entry-hook
  ;; (lambda () (set-input-method "latin-1-postfix")))

  ;; latin-1-postfix for evil replace mode
  ;;(add-hook 'evil-replace-state-entry-hook
  ;; (lambda () (set-input-method "latin-1-postfix")))

;; French 

  ;; french-postfix for evil insert mode 
(add-hook 'evil-insert-state-entry-hook 
(lambda () (set-input-method "french-postfix")))

  ;; french-postfix for evil replace mode
(add-hook 'evil-replace-state-entry-hook
(lambda () (set-input-method "french-postfix")))

;; German 

  ;; german-postfix for evil insert mode
 ;;(add-hook 'evil-insert-state-entry-hook
 ;;(lambda () (set-input-method "german-postfix")))

  ;; german-postfix for evil replace mode
;;(add-hook 'evil-replace-state-entry-hook
;;(lambda () (set-input-method "german-postfix")))


  ;; (key-chord-define evil-insert-state-map  "fd" 'evil-normal-state)



  ;; (add-hook 'evil-insert-state-entry-hook 'my-french-setup)
  ;; (add-hook 'evil-normal-state-entry-hook 'my-english-setup)
  ;; (add-hook 'evil-replace-state-entry-hook 'my-french-setup)

  ;; (add-hook 'evil-normal-state-entry-hook 'toggle-input-method)
  ;; (add-hook 'evil-insert-state-entry-hook 'toggle-input-method)
  ;; (add-hook 'evil-replace-state-entry-hook 'toggle-input-method)

  ;; keybing
  ;;    (global-set-key (kbd "s-SPC") 'evil-toggle-input-method)
#+END_SRC

(defun my-chinese-setup ()
  "Set up my private Chinese environment."
  (if (equal current-language-environment "Chinese-GB")
      (setq default-input-method "chinese-tonepy")))
(add-hook 'set-language-environment-hook 'my-chinese-setup)

;;  
(defun my-french-setup ()
  "Set up my private Chinese environment."
  (if (equal default-input-method 'nil)
      (setq default-input-method "french-postfix")))

(defun my-english-setup ()
  "Set up my private Chinese environment."
  (if (equal default-input-method "french-postfix")
      (setq default-input-method 'nil)))

;; force EMACS to use a default input method
(defvar use-default-input-method t)
(make-variable-buffer-local 'use-default-input-method)
(defun activate-default-input-method ()
  (interactive)
  (if use-default-input-method
      (activate-input-method default-input-method)
    (inactivate-input-method)))
(add-hook 'after-change-major-mode-hook 'activate-default-input-method)
(add-hook 'minibuffer-setup-hook 'activate-default-input-method)
(defun inactivate-default-input-method ()
  (setq use-default-input-method nil))
(add-hook 'c-mode-hook 'inactivate-default-input-method)

;; make a mode use default input methods by default
(defun activate-default-input-method ()
  (interactive)
  (activate-input-method default-input-method))
  
(add-hook 'org-mode-hook 'activate-default-input-method)
*** EVIL org
**** basic settings
#+BEGIN_SRC emacs-lisp
(defun clever-insert-item ()
  "Clever insertion of org item."
  (if (not (org-in-item-p))
      (insert "\n")
    (org-insert-item))
  )

(defun evil-org-eol-call (fun)
  "Go to end of line and call provided function.
FUN function callback"
  (end-of-line)
  (funcall fun)
  (evil-append nil)
  )
#+END_SRC
**** key bindings
#+BEGIN_SRC emacs-lisp
;; redefinition evils visual mode map
(evil-define-key 'normal org-mode-map
  ;; "<" 'outline-previous-visible-heading
  ">"   'org-forward-heading-same-level
  "<"  'org-backward-heading-same-level
  ;; ">" 'outline-next-visible-heading
  "H" 'org-metaleft
  "L" 'org-metaright
  "K" 'org-metaup
  "J" 'org-metadown
 ;; "K" 'outline-previous-visible-heading
  ;;"J" 'outline-next-visible-heading
 ;; "H" (if (fboundp 'org-backward-same-level)
	;;   'org-backward-same-level
	  ;;'org-backward-heading-same-level)
;;  "L" (if (fboundp 'org-forward-same-level) ;to be backward compatible with older org version
	;;   'org-forward-same-level
	  ;;'org-forward-heading-same-level)
;;  "<" 'org-metaleft
 ;; ">" 'org-metaright
  "k" 'previous-line
  "j" 'next-line
;;  "m" 'set-mark-command
  "q" 'fill-paragraph
  "o" '(lambda () (interactive) (evil-org-eol-call 'clever-insert-item))
  "O" '(lambda () (interactive) (evil-org-eol-call 'org-insert-heading))
  "$" 'org-end-of-line
  "^" 'org-beginning-of-line
  "[" 'backward-sentence
  "]" 'forward-sentence
  "{" 'org-backward-paragraph
  "}" 'org-forward-paragraph
  "-" 'org-cycle-list-bullet
  (kbd "<tab>") 'org-cycle)

;; redefinition evils visual mode map
;;(evil-define-key 'visual global-map
 ;; "-" '
  ;;(kbd "<tab>") 'org-cycle)

(evil-define-key 'visual org-mode-map
  "e" 'org-emphasize
)
#+END_SRC
*** 取 EVIL org_copy
**** basic settings
(defun clever-insert-item ()
  "Clever insertion of org item."
  (if (not (org-in-item-p))
      (insert "\n")
    (org-insert-item))
  )

(defun evil-org-eol-call (fun)
  "Go to end of line and call provided function.
FUN function callback"
  (end-of-line)
  (funcall fun)
  (evil-append nil)
  )
**** key bindings
(evil-define-key 'normal org-mode-map
  "K" 'outline-previous-visible-heading
  "L" (if (fboundp 'org-forward-same-level) ;to be backward compatible with older org version
	   'org-forward-same-level
	  'org-forward-heading-same-level)
  "H" (if (fboundp 'org-backward-same-level)
	   'org-backward-same-level
	  'org-backward-heading-same-level)
  "J" 'outline-next-visible-heading
  "k" 'previous-line
  "j" 'next-line
  "m" 'set-mark-command
  "q" 'fill-paragraph
  "o" '(lambda () (interactive) (evil-org-eol-call 'clever-insert-item))
  "O" '(lambda () (interactive) (evil-org-eol-call 'org-insert-heading))
  "$" 'org-end-of-line
  "^" 'org-beginning-of-line
  "<" 'org-metaleft
  ">" 'org-metaright
  "[" 'backward-sentence
  "]" 'forward-sentence
  "{" 'org-backward-paragraph
  "}" 'org-forward-paragraph
  "-" 'org-cycle-list-bullet
  (kbd "<tab>") 'org-cycle)
*** ESC quits almost anything
#+BEGIN_SRC emacs-lisp
   (define-key evil-normal-state-map [escape] 'keyboard-quit)
   (define-key evil-visual-state-map [escape] 'keyboard-quit)
   (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
   (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
   (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
   (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
   (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC
*** Change color of evil cursor
#+BEGIN_SRC emacs-lisp
(setq evil-mode-line-format nil
         evil-insert-state-cursor '(bar "#dc322f")
         evil-normal-state-cursor '(box "#268bd2")
         evil-visual-state-cursor '(box "#d33682"))
#+END_SRC 
*** Improve EVIL behavior with visual lines
#+BEGIN_SRC emacs-lisp
;; Make movement keys work like they should
(define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
; Make horizontal movement cross lines                                    
(setq-default evil-cross-lines t)
#+END_SRC
*** quickly switch buffers
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "C-j") 'next-buffer)
(define-key evil-normal-state-map (kbd "C-k") 'previous-buffer)
(define-key evil-normal-state-map (kbd "C-S-h") 'evil-window-left)
(define-key evil-normal-state-map (kbd "C-S-j") 'evil-window-down)
(define-key evil-normal-state-map (kbd "C-S-k") 'evil-window-up)
(define-key evil-normal-state-map (kbd "C-S-l") 'evil-window-right)

;; make navigation easy
(setq frame-title-format "%b")
#+END_SRC 
*** turn off auto-indent 
(setq evil-auto-indent nil)
*** 取 EVIL multiple cursors
#+BEGIN_SRC emacs-lisp
;;(require 'evil-mc)
;;(global-evil-mc-mode  1)
;;(define-key evil-mc-key-map (kbd "C->") 'evil-mc-make-and-goto-next-match)
;;(define-key evil-mc-key-map (kbd "M->") 'evil-mc-skip-and-goto-next-cursor)
;;(define-key evil-mc-key-map (kbd "M->") 'evil-mc-make-and-goto-next-cursor)
;;(define-key evil-mc-key-map (kbd "C-<") 'evil-mc-make-and-goto-prev-match)
;;(define-key evil-mc-key-map (kbd "M-<") 'evil-mc-skip-and-goto-prev-cursor)
;;(define-key evil-mc-key-map (kbd "M-<") 'evil-mc-make-and-goto-prev-cursor)
#+END_SRC 
*** EVIL multiedit
#+BEGIN_SRC emacs-lisp
(require 'evil-multiedit)

;; Keybindings

;; Highlights all matches of the selection in the buffer.
(define-key evil-visual-state-map "R" 'evil-multiedit-match-all)

;; Match the word under cursor (i.e. make it an edit region). Consecutive presses will
;; incrementally add the next unmatched match.
(define-key evil-normal-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
;; Match selected region.
(define-key evil-visual-state-map (kbd "M-d") 'evil-multiedit-and-next)
;; Insert marker at point
(define-key evil-insert-state-map (kbd "M-d") 'evil-multiedit-toggle-marker-here)

;; Same as M-d but in reverse.
(define-key evil-normal-state-map (kbd "M-D") 'evil-multiedit-match-and-prev)
(define-key evil-visual-state-map (kbd "M-D") 'evil-multiedit-and-prev)

;; OPTIONAL: If you prefer to grab symbols rather than words, use
;; `evil-multiedit-match-symbol-and-next` (or prev).

;; Restore the last group of multiedit regions.
(define-key evil-visual-state-map (kbd "C-M-D") 'evil-multiedit-restore)

;; RET will toggle the region under the cursor
(define-key evil-multiedit-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)

;; ...and in visual mode, RET will disable all fields outside the selected region
(define-key evil-motion-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)

;; For moving between edit regions
(define-key evil-multiedit-state-map (kbd "C-n") 'evil-multiedit-next)
(define-key evil-multiedit-state-map (kbd "C-p") 'evil-multiedit-prev)
(define-key evil-multiedit-insert-state-map (kbd "C-n") 'evil-multiedit-next)
(define-key evil-multiedit-insert-state-map (kbd "C-p") 'evil-multiedit-prev)

;; Ex command that allows you to invoke evil-multiedit with a regular expression, e.g.
(evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match)
#+END_SRC 
** Projectile
#+BEGIN_SRC emacs-lisp
;; enable projectile by default
(projectile-mode)

;; replace annoying EMACS cursor commands
(global-set-key (kbd "C-p") nil) 

;; add a more nemonic command
 (setq projectile-keymap-prefix (kbd "C-p"))
 (require 'projectile)
#+END_SRC
** Swiper - Ivy - Counsel
*** basic config
#+BEGIN_SRC emacs-lisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) ") 
#+END_SRC
*** keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "M-y") 'counsel-yank-pop)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-load-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
#+END_SRC
*** projectile settings
#+BEGIN_SRC emacs-lisp
(setq projectile-completion-system 'ivy)
#+END_SRC
*** add cycling to counsel-yank-pop
(use-package counsel
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))
** Org-mode 
*** Capture mode
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "~/Dropbox/org/todo.org")
(define-key global-map "\C-cc" 'org-capture)
;; == Capture Mode Settings ==
;; Define the custum capture templates
(defvar org-capture-templates '(
             ("t" "Tâche" entry (file+headline "~/Dropbox/org/todo.org" "Université")
              "**** 無 %?")
("a" "Appointment" entry (file  "~/Dropbox/org/gcal.org" )
	 "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
	 ("b" "Blank" entry (file org-default-notes-file)
	  "**** %?")
	 ;;("m" "Meeting" entry (file org-default-notes-file)
	  ;;"* MEETING with %? :MEETING:\n%t" :clock-in t :clock-resume t)
	 ;;("d" "Diary" entry (file+datetree "~/org/diary.org")
	  ;;"* %?\n%U\n" :clock-in t :clock-resume t)
	 ;;("D" "Daily Log" entry (file "~/org/daily-log.org")
	  ;;"* %u %?\n*Summary*: \n\n*Problem*: \n\n*Insight*: \n\n*Tomorrow*: " :clock-in t :clock-resume t)
	 ("i" "Idea" entry (file+headline "~/Dropbox/org/todo.org" "Idées")
	  "*** %? :Idea: \n%u" :prepend t)
))
#+END_SRC 
**** Another settings
(defvar org-capture-templates
       '(("t" "todo" entry (file org-default-notes-file)
       "*** 無 %?\n%u\n%a\n" :clock-in t :clock-resume t)
	 ("b" "Blank" entry (file org-default-notes-file)
	  "*** %?\n%u")
	 ("m" "Meeting" entry (file org-default-notes-file)
	  "* MEETING with %? :MEETING:\n%t" :clock-in t :clock-resume t)
	 ;;("d" "Diary" entry (file+datetree "~/org/diary.org")
	  ;;"* %?\n%U\n" :clock-in t :clock-resume t)
	 ;;("D" "Daily Log" entry (file "~/org/daily-log.org")
	  ;;"* %u %?\n*Summary*: \n\n*Problem*: \n\n*Insight*: \n\n*Tomorrow*: " :clock-in t :clock-resume t)
	 ("i" "Idea" entry (file org-default-notes-file)
	  "* %? :IDEA: \n%u" :clock-in t :clock-resume t)
))


(setq org-capture-templates
      '(("a" "Appointment" entry (file  "~/Dropbox/orgfiles/gcal.org" )
	 "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
	("l" "Link" entry (file+headline "~/Dropbox/orgfiles/links.org" "Links")
	 "* %? %^L %^g \n%T" :prepend t)
	("b" "Blog idea" entry (file+headline "~/Dropbox/orgfiles/i.org" "Blog Topics:")
	 "* %?\n%T" :prepend t)
	("t" "To Do Item" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do")
	 "* TODO %?\n%u" :prepend t)
	("n" "Note" entry (file+headline "~/Dropbox/orgfiles/i.org" "Note space")
	 "* %?\n%u" :prepend t)
	("j" "Journal" entry (file+datetree "~/Dropbox/journal.org")
	 "* %?\nEntered on %U\n  %i\n  %a")
	("s" "Screencast" entry (file "~/Dropbox/orgfiles/screencastnotes.org")
	 "* %?\n%i\n")))
*** Tags
#+BEGIN_SRC emacs-lisp
(setq org-tag-alist '(
		      ("examinatio" . ?e)
		      ("projectum" . ?p)
		      ("legere" . ?l)
		      ("revisere" . ?r)
		      ("chores" . ?c)
		      ("hodie" . ?h)
		      ("noexport" . ?n)
		      ))

;; Allow setting single tags without the menu
;;(setq org-fast-tag-selection-single-key 'expert)

#+END_SRC 
*** Agenda
#+BEGIN_SRC emacs-lisp
;; specify agenda files
(setq org-agenda-files (list "~/Dropbox/org/gcal.org"
                                            "~/Dropbox/org/unterrichte.org"
                                            "~/Dropbox/org/ereignisse.org"
        ;;                                    "~/Dropbox/org/gewohnheiten.org"
                                            "~/Dropbox/org/jahrestage.org"
                                             "~/Dropbox/org/todo.org"))

(setq org-use-fast-todo-selection t) 
;; Include the todo keywords
(setq org-fast-tag-selection-include-todo t)
(setq org-fast-tag-selection-single-key t)

;; necessary function 1
(defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.
PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))

;; necessary function 2
(defun air-org-skip-subtree-if-habit ()
  "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-entry-get nil "STYLE") "habit")
        subtree-end
      nil)))

;; Compact the block agenda view (disabled)
(setq org-agenda-compact-blocks nil)

;; Make agenda the only window by default
(setq org-agenda-window-setup  'only-window)

;; build composite agenda view
(setq org-agenda-custom-commands
 '(("x" agenda)
    ;;("n" "power agenda" ((agenda  "") (alltodo))
     ;;                ((org-agenda-ndays 10)
;;	                   (org-agenda-start-on-weekday nil)
;;	                   (org-agenda-start-day "-1d")))
    ("H" "Horaire hebdomadaire" (
	         (agenda "" ((org-agenda-overriding-header "Today's Schedule:")
					    (org-agenda-span 'day)
					    (org-agenda-ndays 14)
					    (org-agenda-start-on-weekday nil)
					    (org-agenda-start-day "+0d")
					    (org-agenda-todo-ignore-deadlines nil)))
                              (tags-todo "universitas/!+次|+待|+中"
					   ((org-agenda-overriding-header "Current University Tasks:")
					    ))
                              (tags-todo "universitas/!+無"
					   ((org-agenda-overriding-header "Undone University Tasks:")
					    ))
				 (agenda "" ((org-agenda-overriding-header "Week At A Glance:")
				 	    (org-agenda-ndays 7)
				 	    (org-agenda-start-day "+1d")
				 	    (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
				 	    (org-agenda-prefix-format '((agenda . "  %-12:c%?-12t %s [%b] ")))))
))
      ("d" "Daily agenda and all TODOs"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "" ((org-agenda-ndays 1)))
          (alltodo ""
                   ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                   (air-org-skip-subtree-if-priority ?A)
                                                   (org-agenda-skip-if nil '(scheduled deadline))))
                    (org-agenda-overriding-header "ALL normal priority tasks:"))))
;; list of crazy options
         ((org-agenda-compact-blocks t)))
    ;;("N" todo-tree "無")
    ;;("w" todo "待")
("s" "Study Planner" (
          (tags-todo "revisere/!+次|+待|+中|+無"
                                                             ((org-agenda-overriding-header "Revisions:")))
          (tags-todo "legere/!+次|+待|+中|+無"
                                                             ((org-agenda-overriding-header "Lectures:")))
          (tags-todo "projectum/!+次|+待|+中|+無"
                                                             ((org-agenda-overriding-header "Projects:")))
          (tags-todo "examinatio/!+次|+待|+中|+無"
                                                             ((org-agenda-overriding-header "Examens:"))))
;; list options for block display
         ((org-agenda-compact-blocks t)
          (org-agenda-view-columns-initially t)))

;;("h" "Aujourd'hui" (
 ;;         (tags-todo "revisere&hodie/!+次|+待|+中|+無"
  ;;                                                           ((org-agenda-overriding-header "Révisions:")))
   ;;       (tags-todo "legere&hodie/!+次|+待|+中|+無"
    ;;                                                         ((org-agenda-overriding-header "Lectures:")))
     ;;     (tags-todo "projectum&hodie/!+次|+待|+中|+無"
       ;;                                                      ((org-agenda-overriding-header "Projects:")))
         ;; (tags-todo "examinatio&hodie/!+次|+待|+中|+無"
           ;;                                                  ((org-agenda-overriding-header "Examens:"))))
;; list options for block display
       ;;  ((org-agenda-compact-blocks t)
         ;; (org-agenda-view-columns-initially t)))

    ("h" "Révision des Tâches" (

         (tags "PRIORITY=\"A\""
           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("完" "取")))
            (org-agenda-overriding-header "Tâches prioritaires:")))
          ;;(agenda "" ((org-agenda-ndays 14)))

          (alltodo ""
           ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("中" "次"))
                                                             (air-org-skip-subtree-if-habit)
                                                             (air-org-skip-subtree-if-priority ?A)))
                                                             ;;(org-agenda-skip-if nil '(scheduled deadline))))
                                                             (org-agenda-overriding-header "Tâches en cours:")))
          (alltodo ""
           ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("待"))
                                                             (air-org-skip-subtree-if-habit)
                                                             (air-org-skip-subtree-if-priority ?A)))
                                                             ;;(org-agenda-skip-if nil '(scheduled deadline))))
                                                             (org-agenda-overriding-header "Tâches en attente:")))
          (alltodo ""
           ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("無"))
                                                             (air-org-skip-subtree-if-habit)
                                                             (air-org-skip-subtree-if-priority ?A)
                                                             (org-agenda-skip-if nil '(scheduled deadline))))
                                                             (org-agenda-overriding-header "Tâches à faire:"))))
;; list options for block display
          ((org-agenda-compact-blocks t)))))

;; Display properties
(setq org-cycle-separator-lines 0)
(setq org-tags-column 80)
(setq org-agenda-tags-column org-tags-column)
(setq org-agenda-sticky t)

(setq org-refile-targets (quote (("todo.org" :maxlevel . 2))))
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)


;; function to have evil bindings in org-agenda
(defun air-org-agenda-next-header ()
  "Jump to the next header in an agenda series."
  (interactive)
  (air--org-agenda-goto-header))

(defun air-org-agenda-previous-header ()
  "Jump to the previous header in an agenda series."
  (interactive)
  (air--org-agenda-goto-header t))

(defun air--org-agenda-goto-header (&optional backwards)
  "Find the next agenda series header forwards or BACKWARDS."
  (let ((pos (save-excursion
               (goto-char (if backwards
                              (line-beginning-position)
                            (line-end-position)))
               (let* ((find-func (if backwards
                                     'previous-single-property-change
                                   'next-single-property-change))
                      (end-func (if backwards
                                    'max
                                  'min))
                      (all-pos-raw (list (funcall find-func (point) 'org-agenda-structural-header)
                                         (funcall find-func (point) 'org-agenda-date-header)))
                      (all-pos (cl-remove-if-not 'numberp all-pos-raw))
                      (prop-pos (if all-pos (apply end-func all-pos) nil)))
                 prop-pos))))
    (if pos (goto-char pos))
    (if backwards (goto-char (line-beginning-position)))))


;; fast access agenda view
(defun air-pop-to-org-agenda (&optional split)
  "Visit the org agenda, in the current window or a SPLIT."
  (interactive "P")
  (org-agenda nil "h") ;; the h corresponds to the agenda view that will be displayed once this command is called
  (when (not split)
    (delete-other-windows)))

;;(define-key evil-normal-state-map (kbd "S-SPC") 'air-pop-to-org-agenda)
(global-set-key [f6] 'air-pop-to-org-agenda)

;; sacha's configuration 
(defun sacha/org-agenda-new ()
  "Create a new note or task at the current agenda item.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
  (interactive)
  (org-agenda-switch-to)
  (org-capture 0))

(defun sacha/org-agenda-mark-done-and-add-followup ()
    "Mark the current TODO as done and add another task after it.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
    (interactive)
    (org-agenda-todo "DONE")
    (org-agenda-switch-to)
    (org-capture 0 "t"))


;; movement in agenda buffer
(eval-after-load "org-agenda"
'(progn
(define-key org-agenda-mode-map "j" 'org-agenda-next-item)
(define-key org-agenda-mode-map "k" 'org-agenda-previous-item)
(define-key org-agenda-mode-map "J" 'air-org-agenda-next-header)
(define-key org-agenda-mode-map "K" 'air-org-agenda-previous-header)
;; New key assignment
(define-key org-agenda-mode-map "N" 'sacha/org-agenda-new)
;; Override the key définition
(define-key org-agenda-mode-map "X" 'sacha/org-agenda-mark-done-and-add-followup)
))
#+END_SRC
**** Stuck projects 
 ;; (setq org-stuck-projects      '("TODO={.+}/-DONE" nil nil "SCHEDULED:\\|DEADLINE:"))
**** GJ agenda
    ("W" "Weekly Review"
         ((tags "PRIORITY=\"A\""
           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("完" "取")))
            (org-agenda-overriding-header "Tâches prioritaires:")))
          (agenda "" ((org-agenda-ndays 7)))
          (alltodo ""
           ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("中"))
                                                             (air-org-skip-subtree-if-habit)
                                                             (air-org-skip-subtree-if-priority ?A)
                                                             (org-agenda-skip-if nil '(scheduled deadline))))
                                                             (org-agenda-overriding-header "Tâches en cours:")))
          (alltodo ""
           ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("無"))
                                                             (air-org-skip-subtree-if-habit)
                                                             (air-org-skip-subtree-if-priority ?A)
                                                             (org-agenda-skip-if nil '(scheduled deadline))))
                                                             (org-agenda-overriding-header "Tâches urgentes:")))
          (alltodo ""
           ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("待"))
                                                             (air-org-skip-subtree-if-habit)
                                                             (air-org-skip-subtree-if-priority ?A)
                                                             (org-agenda-skip-if nil '(scheduled deadline))))
                                                             (org-agenda-overriding-header "Tâches en attente:"))))
          ((org-agenda-compact-blocks t)))))



("s" "Study Planner" (
          (tags "+revisere"
           ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取"))
                                                                (air-org-skip-subtree-if-habit)
                                                                (org-agenda-skip-if nil '(scheduled deadline))))
                                                             (org-agenda-overriding-header "Revisions:")))
          (tags "+legere"
           ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取"))
                                                             (air-org-skip-subtree-if-habit)
                                                             (org-agenda-skip-if nil '(scheduled deadline))))
                                                             (org-agenda-overriding-header "Lectures:")))
          (tags "+projectum"
           ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取"))
                                                             (air-org-skip-subtree-if-habit)
                                                             (org-agenda-skip-if nil '(scheduled deadline))))
                                                             (org-agenda-overriding-header "Projects:")))
          (tags "+examinatio"
           ((org-agenda-skip-function '(or 
                                                             (org-agenda-skip-entry-if 'todo '("完" "取"))
                                                             (air-org-skip-subtree-if-habit)
                                                             (org-agenda-skip-if nil '(scheduled deadline))))
            (org-agenda-overriding-header "Examens:")))
          ))

;; Custom agenda command definitions
(setq org-agenda-custom-commands
      '(("h" "Habits" agenda "STYLE=\"habit\""
	 ((org-agenda-overriding-header "Habits")
	  (org-agenda-sorting-strategy
	   '(todo-state-down effort-up category-keep))))
	(" " "Export Schedule" ((agenda "" ((org-agenda-overriding-header "Today's Schedule:")
					    (org-agenda-span 'day)
					    (org-agenda-ndays 1)
					    (org-agenda-start-on-weekday nil)
					    (org-agenda-start-day "+0d")
					    (org-agenda-todo-ignore-deadlines nil)))
				(tags-todo "-INACTIVE-CANCELLED-ARCHIVE/!NEXT"
					   ((org-agenda-overriding-header "Next Tasks:")
					    ))
				(tags "REFILE-ARCHIVE-REFILE=\"nil\""
				      ((org-agenda-overriding-header "Tasks to Refile:")
				       (org-tags-match-list-sublevels nil)))
				(tags-todo "-INACTIVE-HOLD-CANCELLED-REFILE-ARCHIVEr/!"
					   ((org-agenda-overriding-header "Active Projects:")
					    (org-agenda-skip-function 'gs/select-projects)))
				(tags-todo "-INACTIVE-HOLD-CANCELLED-REFILE-ARCHIVE-STYLE=\"habit\"/!-NEXT"
					   ((org-agenda-overriding-header "Standalone Tasks:")
					    (org-agenda-skip-function 'gs/select-standalone-tasks)))
				;; (agenda "" ((org-agenda-overriding-header "Week At A Glance:")
				;; 	    (org-agenda-ndays 5)
				;; 	    (org-agenda-start-day "+1d")
				;; 	    (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
				;; 	    (org-agenda-prefix-format '((agenda . "  %-12:c%?-12t %s [%b] ")))))
				(tags-todo "-INACTIVE-HOLD-CANCELLED-REFILE-ARCHIVE/!-NEXT"
					   ((org-agenda-overriding-header "Remaining Project Tasks:")
					    (org-agenda-skip-function 'gs/select-project-tasks)))
				(tags "INACTIVE-ARCHIVE"
	;;			      ((org-agenda-overriding-header "Inactive Projects and Tasks")
	;;			       (org-tags-match-list-sublevels nil)))
				(tags "ENDOFAGENDA"
				      ((org-agenda-overriding-header "End of Agenda")
				       (org-tags-match-list-sublevels nil))))
	 ((org-agenda-start-with-log-mode t)
	  (org-agenda-log-mode-items '(clock))
	  (org-agenda-prefix-format '((agenda . "  %-12:c%?-12t %(gs/org-agenda-add-location-string)% s")
				      (timeline . "  % s")
				      (todo . "  %-12:c %(gs/org-agenda-prefix-string) ")
				      (tags . "  %-12:c %(gs/org-agenda-prefix-string) ")
				      (search . "  %i %-12:c")))
	  (org-agenda-todo-ignore-deadlines 'near)
	  (org-agenda-todo-ignore-scheduled t)))
	("X" "Agenda" ((agenda "") (alltodo))
	 ((org-agenda-ndays 10)
	  (org-agenda-start-on-weekday nil)
	  (org-agenda-start-day "-1d")
	  (org-agenda-start-with-log-mode t)
	  (org-agenda-log-mode-items '(closed clock state)))
	 )))
*** Clocking
#+BEGIN_SRC emacs-lisp
;; Agenda clock report parameters
(setq org-agenda-clockreport-parameter-plist
      '(:link t :maxlevel 6 :fileskip0 t :compact t :narrow 60 :score 0))

;; If idle for more than 15 minutes, resolve the things by asking what to do
;; with the clock time
(setq org-clock-idle-time 15)

;; global Effort estimate values
(setq org-global-properties
      '(("Effort_ALL" .
         "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")))
;;        1    2    3    4    5    6    7    8    9    0
;; These are the hotkeys ^

;; Set default column view headings: Task Priority Effort Clock_Summary
(setq org-columns-default-format "%TAGS %ITEM(Task) %1PRIORITY %DEADLINE %SCHEDULED %10CLOCKSUM")
;;(setq org-columns-default-format "%50ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM %16TIMESTAMP_IA")
;;(setq org-columns-default-format "%50ITEM(Task) %2PRIORITY %10Effort(Effort){:} %10CLOCKSUM")

;; Show lot of clocking history so it's easy to pick items off the `C-c I` list
(setq org-clock-history-length 23)

(defun eos/org-clock-in ()
  (interactive)
  (org-clock-in '(4)))

(global-set-key (kbd "C-c I") #'eos/org-clock-in)
(global-set-key (kbd "C-c O") #'org-clock-out)

;; Resume clocking task when emacs is restarted
(org-clock-persistence-insinuate)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist 'history)
;;(setq org-clock-persist t)
;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)
;; Do not prompt to resume an active clock, just resume it
(setq org-clock-persist-query-resume nil)

;; Change tasks to whatever when clocking in
(setq org-clock-in-switch-to-state "中")
;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks
;; with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)
;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)
;; use pretty things for the clocktable
(setq org-pretty-entities t)
#+END_SRC 
*** initial visualization
**** initial indentation
#+BEGIN_SRC emacs-lisp 
(setq org-startup-indented nil)         
#+END_SRC
**** begin displaying entire trees
#+BEGIN_SRC emacs-lisp 
;; (setq org-startup-folded nil) 
#+END_SRC
**** better display of italics & bold
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC
*** custom TODO states 
#+BEGIN_SRC emacs-lisp
(setq org-use-fast-todo-selection nil)
(setq org-todo-keywords 
          '((sequence "無(t)" "次" "中" "待" "完(d)")
            (sequence "阻" "取(c)")))
            ;;(sequence "疑(q)" "|" "答(a)")))
;; (sequence "待(w)" "次" "取(c)")
            ;;(sequence "待(w)" "|" "取(c)")

;; set faces for org-todo-keywords
(setq org-todo-keyword-faces
      '(("無" . (:foreground "#dc322f" :weight bold))
        ("完" . (:foreground "#859900" :weight bold))   
        ("疑" . (:foreground "#d33682" :weight bold))
        ("答" . (:foreground "#268bd2" :weight bold)) 
        ("待" . (:foreground "#cb4b16" :weight bold))
        ("取" . (:foreground "#6c71c4" :weight bold)) 
        ("中" . (:foreground "#b58900" :weight bold)) 
        ))

(defun gs/mark-next-done-parent-tasks-todo ()
 ;; "Visit each parent task and change 中 (or 完) states to 無."
  ;; Don't change the value if new state is "完"
  (let ((mystate (or (and (fboundp 'org-state)
                          (member state
				  (list "中" "無")))
                     (member (nth 2 (org-heading-components))
			     (list "中" "無")))))
    (when mystate
      (save-excursion
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) (list "中" "完"))
            (org-todo "無")))))))

(add-hook 'org-after-todo-state-change-hook 'gs/mark-next-done-parent-tasks-todo 'append)
#+END_SRC
*** org-bullets
#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(setq org-bullets-bullet-list '("一" "二" "三" "四" "五" "六" "七" "八" "七" "九" "十"))
#+END_SRC 
*** hook flyspell into org-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'flyspell-mode)
;; (add-hook 'org-mode-hook 'flyspell-buffer)
#+END_SRC
*** 取 word count (experimental)
(eval-when-compile (require 'cl))
;; (require 'org)
(defun org-wc-in-heading-line ()
  "Is point in a line starting with `*'?"
  (equal (char-after (point-at-bol)) ?*))

;;;###autoload
(defun org-word-count (beg end)
  "Report the number of words in the Org mode buffer or selected region."
  (interactive
   (if (use-region-p)
       (list (region-beginning) (region-end))
     (list (point-min) (point-max))))
  (message (format "%d words in %s."
                   (org-word-count-aux beg end)
                   (if (use-region-p) "region" "buffer"))))

(defun org-word-count-aux (beg end)
  "Report the number of words in the selected region.
Ignores: heading lines,
         blocks,
         comments,
         drawers.
LaTeX macros are counted as 1 word."

  (let ((wc 0)
        (latex-macro-regexp "\\\\[A-Za-z]+\\(\\[[^]]*\\]\\|\\){\\([^}]*\\)}"))
    (save-excursion
      (goto-char beg)
      (while (< (point) end)
        (cond
         ;; Ignore heading lines, and sections tagged 'nowc' or 'noexport'.
         ((org-wc-in-heading-line)
          (let ((tags (org-get-tags-at)))
            (if (or (member "nowc" tags)
                    (member "noexport" tags))
                (outline-next-heading)
              (forward-line))))
         ;; Ignore blocks.
         ((org-at-block-p)
          (goto-char (match-end 0)))
         ;; Ignore comments.
         ((org-at-comment-p)
          (forward-line))
         ;; Ignore drawers.
         ((org-at-drawer-p)
          (progn (goto-char (match-end 0))
                 (re-search-forward org-property-end-re end t)
                 (forward-line)))
         ;; Count latex macros as 1 word, ignoring their arguments.
         ((save-excursion
            (if (> (point-min) (point)) (backward-char) )
            (looking-at latex-macro-regexp))
          (goto-char (match-end 0))
          (setf wc (+ 2 wc)))
         (t
          (progn
            (and (re-search-forward "\\w+\\W*" end 'skip)
                 (incf wc)))))))
    wc))

;;;###autoload
(defun org-wc-count-subtrees ()
  "Count words in each subtree, putting result as the property :org-wc on that heading."
  (interactive)
  (remove-text-properties (point-min) (point-max)
                          '(:org-wc t))
  (save-excursion
    (goto-char (point-max))
    (while (outline-previous-heading)
      (save-restriction
        (org-narrow-to-subtree)
        (let ((wc (org-word-count-aux (point-min) (point-max))))
          (put-text-property (point) (point-at-eol) :org-wc wc)
          (goto-char (point-min)))))))

;;;###autoload
(defun org-wc-display (total-only)
  "Show subtree word counts in the entire buffer.
With prefix argument, only show the total wordcount for the buffer or region
in the echo area.

Use \\[org-wc-remove-overlays] to remove the subtree times.

Ignores: heading lines,
         blocks,
         comments,
         drawers.
LaTeX macros are counted as 1 word."
  (interactive "P")
  (let ((beg (if (region-active-p) (region-beginning) (point-min)))
        (end (if (region-active-p) (region-end) (point-max))))
  (org-wc-remove-overlays)
  (unless total-only
    (let ((bmp (buffer-modified-p))
          wc
          p)
      (org-wc-count-subtrees)
      (save-excursion
        (goto-char (point-min))
        (while (or (and (equal (setq p (point)) (point-min))
                        (get-text-property p :org-wc))
                   (setq p (next-single-property-change
                            (point) :org-wc)))
          (goto-char p)
          (when (setq wc (get-text-property p :org-wc))
            (org-wc-put-overlay wc (funcall outline-level))))
        ;; Arrange to remove the overlays upon next change.
        (when org-remove-highlights-with-change
          (org-add-hook 'before-change-functions 'org-wc-remove-overlays
                        nil 'local)))
    (set-buffer-modified-p bmp)))
  (org-word-count beg end)))

(defvar org-wc-overlays nil)
(make-variable-buffer-local 'org-wc-overlays)

(defun org-wc-put-overlay (wc &optional level)
  "Put an overlay on the current line, displaying word count.
If LEVEL is given, prefix word count with a corresponding number of stars.
This creates a new overlay and stores it in `org-wc-overlays', so that it
will be easy to remove."
  (let* ((c 60)
         (l (if level (org-get-valid-level level 0) 0))
         (off 0)
         ov tx)
    (org-move-to-column c)
    (unless (eolp) (skip-chars-backward "^ \t"))
    (skip-chars-backward " \t")
    (setq ov (make-overlay (1- (point)) (point-at-eol))
          tx (concat (buffer-substring (1- (point)) (point))
                     (make-string (+ off (max 0 (- c (current-column)))) ?.)
                     (org-add-props (format "%s" (number-to-string wc))
                         (list 'face 'org-wc-overlay))
                     ""))
    (if (not (featurep 'xemacs))
        (overlay-put ov 'display tx)
      (overlay-put ov 'invisible t)
      (overlay-put ov 'end-glyph (make-glyph tx)))
    (push ov org-wc-overlays)))

;;;###autoload
(defun org-wc-remove-overlays (&optional beg end noremove)
  "Remove the occur highlights from the buffer.
BEG and END are ignored.  If NOREMOVE is nil, remove this function
from the `before-change-functions' in the current buffer."
  (interactive)
  (unless org-inhibit-highlight-removal
    (mapc 'delete-overlay org-wc-overlays)
    (setq org-wc-overlays nil)
    (unless noremove
      (remove-hook 'before-change-functions
                   'org-wc-remove-overlays 'local))))

(provide 'org-wc)
**** setting short-cut key
#+BEGIN_SRC emacs-lips
(define-key org-mode-map "\C-c\C-w" 'org-word-count)
#+END_SRC
*** enable word count mode
; (add-hook 'org-mode-hook 'wc-mode)
*** org2blog 
#+BEGIN_SRC emacs-lisp
;; (setq load-path (cons "~/.emacs.d/org2blog/" load-path))
;; (require 'org2blog-autoloads)
;; (setq org-list-allow-alphabetical t)

;; blog setup
;; (setq org2blog/wp-blog-alist
;;       '(("cahiers"
;;          :url "https://cyberneticrevolutionary.wordpress.com/xmlrpc.php"
;;          :username "cyberneticrevolutionary"
;;          :password "kosmos666"
;;          :default-title "Penseé"
;;          :tags-as-categories nil)))
#+END_SRC
**** default template
(setq org2blog/wp-buffer-template
      "-----------------------
#+TITLE: %s
#+DATE: %s
-----------------------\n")
(defun my-format-function (format-string)
  (format format-string
          org2blog/wp-default-title
          (format-time-string "%Y-%m-%d" (current-time)))))
          (setq org2blog/wp-buffer-format-function
'my-format-function)
*** keybindings
#+BEGIN_SRC emacs-lisp
;; fast insert drawer
;; (define-key org-mode-map (kbd "C-d") 'org-insert-drawer)
;; fast show in buffer
;; (define-key org-mode-map (kbd "C-b") 'org-tree-to-indirect-buffer)
#+END_SRC
*** export settings for LaTeX
#+BEGIN_SRC emacs-lisp
;; export references (to tables, graphics, etc.) properly, evaluating the +NAME property. 
(setq org-latex-prefer-user-labels t)

;; export process is sent to the background
 (setq org-export-in-background t)

;; select tasks (i.e., TODOs) for export
 (setq org-export-with-tasks '("完" "無" "中" "待" "疑"))

;; speed keybinding for latex pdf export
(global-set-key "\M-p" 'org-latex-export-to-pdf)

;(add-hook 'org-mode-hook
;     (lambda () (define-key global-map "\M-p" 'org-latex-export-to-pdf)))
     ;;(lambda () (define-key org-mode-map "\M-p" 'org-latex-export-to-pdf)))

;; Default packages included in every tex file, pdflatex or xelatex
;;(setq org-latex-packages-alist
;;      '(("" "graphicx" t)
;;        ("" "longtable" nil)
;;        ("" "float" nil)))

;; source: https://lists.gnu.org/archive/html/emacs-orgmode/2013-06/msg00240.html
(defun my-auto-tex-cmd (backend)
  "When exporting from .org with latex,
  automatically run latex, pdflatex, or xelatex as appropriate,
  using latexmk."
  (let ((texcmd))
    (setq texcmd "latexmk -pdf %f")
    (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
        (progn
          (setq texcmd "latexmk -pdf -pdflatex='pdflatex -file-line-error --shell-escape -synctex=1' %f")
          (setq org-latex-default-packages-alist
                '(("AUTO" "inputenc" t)
                  ("T1"   "fontenc"   t)
                  (""     "fixltx2e"  nil)
                  (""     "wrapfig"   nil)
                  (""     "soul"      t)
                  (""     "textcomp"  t)
                  (""     "marvosym"  t)
                  (""     "wasysym"   t)
                  (""     "latexsym"  t)
                  (""     "amssymb"   t)
                  (""     "hyperref"  nil)))))
    (if (string-match "LATEX_CMD: xelatex" (buffer-string))
        (progn
          (setq texcmd "latexmk -pdflatex='xelatex -file-line-error --shell-escape -synctex=1' -pdf %f")
          (setq org-latex-default-packages-alist
                '(("" "fontspec" t)
                  ("" "xunicode" t)
                  ("" "url" t)
                  ;; ("" "rotating" t)
                  ;; ("" "memoir-article-styles" t)
                  ;; ("american" "babel" t)
                  ;; ("babel" "csquotes" t)
                  ;; ("" "listings" nil)
                  ;; ("svgnames" "xcolor" t)
                  ("" "soul" t)
                  ("xetex, colorlinks=true, urlcolor=FireBrick, plainpages=false, pdfpagelabels, bookmarksnumbered" "hyperref" nil)
                  ))
          (setq org-latex-classes
                (cons '("memarticle"
                        "\\documentclass[12pt,oneside,article]{memoir}"
                        ("\\section{%s}" . "\\section*{%s}")
                        ("\\subsection{%s}" . "\\subsection*{%s}")
                        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                        ("\\paragraph{%s}" . "\\paragraph*{%s}")
                        ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                      org-latex-classes))))

    (setq org-latex-pdf-process (list texcmd))))
(add-hook 'org-export-before-parsing-hook 'my-auto-tex-cmd)
#+END_SRC
*** Export to Word (doc)
#+BEGIN_SRC emacs-lisp
;; This setup is tested on Emacs 24.3 & Emacs 24.4 on Linux/OSX
;; org v7 bundled with Emacs 24.3
(setq org-export-odt-preferred-output-format "doc")
;; org v8 bundled with Emacs 24.4
(setq org-odt-preferred-output-format "doc")
;; BTW, you can assign "pdf" in above variables if you prefer PDF format

;; for page breaks add this to org files
;; #+ODT: <text:p text:style-name="PageBreak"/>
#+END_SRC 
*** Add custom LaTeX export classes
#+BEGIN_SRC emacs-lisp
;; KOMA-Script classes
(require 'ox-latex)
(with-eval-after-load 'ox-latex
(add-to-list 'org-latex-classes
         '("scrartcl"
             "\\documentclass{scrartcl}"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(add-to-list 'org-latex-classes
         '("scrreprt"
             "\\documentclass{scrreprt}"
             ("\\chapter{%s}" . "\\chapter*{%s}")
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(add-to-list 'org-latex-classes
         '("scrbook"
             "\\documentclass{scrbook}"
             ("\\part{%s}" . "\\part*{%s}")
             ("\\chapter{%s}" . "\\chapter*{%s}")
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
)
#+END_SRC
*** Custom add org headings
#+BEGIN_SRC emacs-lisp
(setq org-blank-before-new-entry
      '((heading . nil)
       (plain-list-item . nil)))

(defun call-rebinding-org-blank-behaviour (fn)
  (let ((org-blank-before-new-entry
         (copy-tree org-blank-before-new-entry)))
    (when (org-at-heading-p)
      (rplacd (assoc 'heading org-blank-before-new-entry) nil))
    (call-interactively fn)))

(defun smart-org-meta-return-dwim ()
  (interactive)
  (call-rebinding-org-blank-behaviour 'org-meta-return))

(defun smart-org-insert-todo-heading-dwim ()
  (interactive)
  (call-rebinding-org-blank-behaviour 'org-insert-todo-heading))

(define-key org-mode-map (kbd "M-<return>") 'smart-org-meta-return-dwim)
#+END_SRC
*** MobileOrg
#+BEGIN_SRC emacs-lisp
;; Set to the location of your Org files on your local system
(setq org-directory "~/Dropbox/org")
;; Set to the name of the file where new notes will be stored
(setq org-mobile-inbox-for-pull "~/Dropbox/org/moborg_notes.org")
;; Set to <your Dropbox root directory>/MobileOrg.
(setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
#+END_SRC 
*** Org-ref 
#+BEGIN_SRC emacs-lisp
(setq reftex-default-bibliography '("/home/sync0/Documents/mendeley/library.bib"))

;; see org-ref for use of these variables
(setq org-ref-bibliography-notes "/home/sync0/Dropbox/org/master.org"
          org-ref-default-bibliography '("/home/sync0/Documents/mendeley/library.bib")
          org-ref-pdf-directory "/home/sync0/Documents/mendeley/"
          bibtex-completion-bibliography 'org-ref-default-bibliography
          org-ref-open-pdf-function 'org-ref-get-mendeley-filename
)

;; set ivy for completion
(setq org-ref-completion-library 'org-ref-ivy-cite)
(require 'org-ref)
#+END_SRC 
**** Fix open-pdf issue
##+BEGIN_SRC emacs-lisp
(defun org-ref-open-bibtex-pdf ()
  (interactive)
  (save-excursion
    (bibtex-beginning-of-entry)
    (let* ((bibtex-expand-strings t)
           (entry (bibtex-parse-entry t))
           (key (reftex-get-bib-field "=key=" entry))
           (pdf (org-ref-get-mendeley-filename key)))
      (message "%s" pdf)
      (if (file-exists-p pdf)
          (org-open-link-from-string (format "[[file:%s]]" pdf))
        (ding)))))
        ##+END_SRC 
**** ivy-bibtex
;; autoload ivy-bibtex
(add-to-list 'load-path "~/.emacs.d/ivy-bibtex/")
(autoload 'ivy-bibtex "ivy-bibtex" "" t)

(setq bibtex-completion-bibliography '("~/Documents/mendeley/master.bib")
         bibtex-completion-library-path '("~/Documents/mendeley/")
         bibtex-completion-pdf-field "file"
         bibtex-completion-notes-path "~/Dropbox/org/master.org"
         bibtex-completion-pdf-symbol "在文"
         bibtex-completion-notes-symbol "筆錄")
**** Open pdfs
#+BEGIN_SRC emacs-lisp
(defun my/org-ref-open-pdf-at-point ()
  "Open the pdf for bibtex key under point if it exists."
  (interactive)
  (let* ((results (org-ref-get-bibtex-key-and-file))
         (key (car results))
     (pdf-file (car (bibtex-completion-find-pdf key))))
    (if (file-exists-p pdf-file)
    (funcall bibtex-completion-pdf-open-function pdf-file)
      (message "No PDF found for %s" key))))

;; open in different viewer
(setq bibtex-completion-pdf-open-function
  (lambda (fpath)
    (call-process "mendeleydesktop" nil 0 nil fpath)))
#+END_SRC 
****  custom template function
(setq bibtex-completion-notes-template-one-file
      (format
       "\n*** 未 ${title}\n :PROPERTIES:\n :AUTHOR: ${author}\n :YEAR: ${year}\n :Custom_ID: ${=key=}\n :END:\n"))
(setq org-ref-notes-function
      (lambda (thekey)
        (let ((bibtex-completion-bibliography (org-ref-find-bibliography)))
          (bibtex-completion-edit-notes
           (list (car (org-ref-get-bibtex-key-and-file thekey)))))))
(add-hook 'org-mode-hook
          (lambda ()
            (define-key org-mode-map  (kbd "C-c 9") 'org-ref-open-notes-at-point)))
**** 疑 custom notes function
(defvar org-ref-note-title-fortmat 
  "** 未 %t
 :PROPERTIES: 
  :AUTHOR: %9a
  :YEAR: %y
  :JOURNAL: %j
  :FILE: [[file:%F][%f]]
  :Custom_ID: %k
:END:")
**** Useful keybindings
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (define-key org-mode-map  (kbd "C-c 0") 'org-ref-open-bibtex-notes)))
(add-hook 'org-mode-hook
          (lambda ()
            (define-key org-mode-map  (kbd "C-c 8") 'ivy-bibtex)))
(add-hook 'org-mode-hook
          (lambda ()
            (define-key org-mode-map  (kbd "C-c 9") 'org-ref-open-notes-from-reftex)))
(define-key org-mode-map (kbd "C-c [") 'org-ref-ivy-insert-cite-link)
#+END_SRC 
*** Change default apps 
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
           '(lambda ()
            (delete '("\\.pdf\\'" . default) org-file-apps)
            (add-to-list 'org-file-apps '("\\.pdf\\'" . "mendeleydesktop %s"))))
#+END_SRC   
*** Editing source code
#+BEGIN_SRC emacs-lisp
;; color embeded source code
(setq org-src-fontify-natively t)

;; stop emacs asking for confirmation
(setq org-confirm-babel-evaluate nil)

;; export colored code blocks
(setq org-latex-listings 'minted)

;; set word wrap for code blocks
(setq org-latex-minted-options '(("breaklines" "true")
                                 ("breakanywhere" "true")))
#+END_SRC 
*** Code  export
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-export-exclude-tags "取")
#+END_SRC 
*** 取 Org clock budget 
(add-to-list 'load-path "~/.emacs.d/org-clock-budget")
(require 'org-clock-budget)
;(setq org-clock-budget-intervals '(
;("BUDGET_YEAR" org-clock-budget-interval-this-year)
;("BUDGET_MONTH" org-clock-budget-interval-this-month)
;("BUDGET_WEEK" org-clock-budget-interval-this-week)
;))
** Yasnippets
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-reload-all)
(add-hook 'org-mode-hook 'yas-minor-mode)
(add-hook 'latex-mode-hook 'yas-minor-mode)
(add-hook 'bibtex-mode-hook 'yas-minor-mode)
;; annoying warning
(add-to-list 'warning-suppress-types '(yasnippet backquote-change))
#+END_SRC
** All the icons
#+BEGIN_SRC emacs-lisp
(require 'all-the-icons)

;; ivy setup
(all-the-icons-ivy-setup)
#+END_SRC 
** Neotree
#+BEGIN_SRC emacs-lisp
(require 'neotree)
;; (global-set-key [f6] 'neotree-toggle)

;; theme config
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))

;; show neotree on startup
;; (neotree-show)

;; Every time when the neotree window is opened, let it find current file and jump to node.
(setq neo-smart-open t)

;; When running ‘projectile-switch-project’ (C-c p p), ‘neotree’ will change root automatically.
(setq projectile-switch-project-action 'neotree-projectile-action)

;; Similar to find-file-in-project, NeoTree can be opened (toggled) at projectile project root as follows:
 (defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (projectile-project-root))
          (file-name (buffer-file-name)))
      (neotree-toggle)
      (if project-dir
          (if (neo-global--window-exists-p)
              (progn
                (neotree-dir project-dir)
                (neotree-find file-name)))
        (message "Could not find git project root."))))

;; remap last function
;;(global-set-key [f6] 'neotree-project-dir)

;;(add-hook 'neotree-mode-hook
 ;;   (lambda ()
  ;;    (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
   ;;   (define-key evil-normal-state-local-map (kbd "I") 'neotree-hidden-file-toggle)
    ;;  (define-key evil-normal-state-local-map (kbd "z") 'neotree-stretch-toggle)
    ;;  (define-key evil-normal-state-local-map (kbd "R") 'neotree-refresh)
     ;; (define-key evil-normal-state-local-map (kbd "m") 'neotree-rename-node)
      ;;(define-key evil-normal-state-local-map (kbd "c") 'neotree-create-node)
      ;;(define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node)
      ;;(define-key evil-normal-state-local-map (kbd "s") 'neotree-enter-vertical-split)
      ;;(define-key evil-normal-state-local-map (kbd "S") 'neotree-enter-horizontal-split)
      ;;(define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter))))
#+END_SRC 
** Powerline
#+BEGIN_SRC emacs-lisp
(require 'powerline)
;; (powerline-evil-vim-color-theme)
#+END_SRC 
** Anzu
#+BEGIN_SRC emacs-lisp
(global-anzu-mode +1)

;; configuration for EVIL mode
;; Emacs 24.4 or higher
(with-eval-after-load 'evil
  (require 'evil-anzu))

;; Emacs <= 24.3
;;(eval-after-load 'evil
  ;;'(progn
     ;;(require 'evil-anzu)))
#+END_SRC 
** Smooth scrolling
#+BEGIN_SRC emacs-lisp
(require 'smooth-scrolling)
(smooth-scrolling-mode 1)
(setq smooth-scroll-margin 5)
#+END_SRC      
*** change behavior of org movent
#+BEGIN_SRC emacs-lisp
(setq org-special-ctrl-a/e t)
#+END_SRC 
*** useful scrolling things
#+BEGIN_SRC emacs-lisp
(defun gcm-scroll-down ()
   (interactive)
   (scroll-up 1))

(global-set-key (kbd "M-j") 'gcm-scroll-down)

(defun gcm-scroll-up ()
   (interactive)
   (scroll-down 1))

(global-set-key (kbd "M-k") 'gcm-scroll-up)
#+END_SRC 
** 取 Company mode
(require 'company)

(add-hook 'after-init-hook 'global-company-mode)

;; Don't enable company-mode in below major modes, OPTIONAL
(setq company-global-modes '(not eshell-mode comint-mode erc-mode rcirc-mode))

;; "text-mode" is a major mode for editing files of text in a human language"
;; most major modes for non-programmers inherit from text-mode
(defun text-mode-hook-setup ()
  ;; make `company-backends' local is critcal
  ;; or else, you will have completion in every major mode, that's very annoying!
  (make-local-variable 'company-backends)


(setq company-ispell-available t) ; error without this

  ;; company-ispell is the plugin to complete words
(add-to-list 'company-backends 'company-ispell)

;; OPTIONAL, if `company-ispell-dictionary' is nil, `ispell-complete-word-dict' is used
;; but I prefer hard code the dictionary path. That's more portable.
(setq company-ispell-dictionary (file-truename "~/.emacs.d/dictionaries/francais.txt")))


(add-hook 'text-mode-hook 'text-mode-hook-setup)

(defun toggle-company-ispell ()
  (interactive)
  (cond
   ((memq 'company-ispell company-backends)
    (setq company-backends (delete 'company-ispell company-backends))
    (message "company-ispell disabled"))
   (t
    (add-to-list 'company-backends 'company-ispell)
    (message "company-ispell enabled!"))))

;; skip the downcase that company does to the variables I autocomplete
(setq company-dabbrev-downcase 0)

;; time it takes before company begins completing
(setq company-idle-delay 0.1)
;;(setq company-selection-wrap-around t)
(define-key company-active-map [tab] 'company-complete)
;;(define-key company-active-map (kbd "M-j") 'company-select-next)
;;(define-key company-active-map (kbd "M-k") 'company-select-previous)
;;(add-hook 'company-mode-hook
 ;;           (lambda ()
   ;;           (define-key evil-insert-state-local-map (kbd "TAB") 'company-complete)
     ;;         (define-key evil-insert-state-local-map (kbd "C-j") 'company-select-next)
       ;;       (define-key evil-insert-state-local-map (kbd "C-k") 'company-select-previous)))

;; avoid conflict with yasnippet 
(advice-add 'company-complete-common :before (lambda () (setq my-company-point (point))))
(advice-add 'company-complete-common :after (lambda ()
  		  				(when (equal my-company-point (point))
  			  			  (yas-expand))))
** Solaire mode
#+BEGIN_SRC emacs-lisp
(require 'solaire-mode)

;; brighten buffers (that represent real files)
(add-hook 'after-change-major-mode-hook #'turn-on-solaire-mode)
;; To enable solaire-mode unconditionally for certain modes:
(add-hook 'ediff-prepare-buffer-hook #'solaire-mode)

;; ...if you use auto-revert-mode, this prevents solaire-mode from turning
;; itself off every time Emacs reverts the file
(add-hook 'after-revert-hook #'turn-on-solaire-mode)

;; highlight the minibuffer when it is activated:
(add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)

;; if the bright and dark background colors are the wrong way around, use this
;; to switch the backgrounds of the `default` and `solaire-default-face` faces.
;; This should be used *after* you load the active theme!
;;
;; NOTE: This is necessary for themes in the doom-themes package!
(solaire-mode-swap-bg)
#+END_SRC 
** 取 Hlinum
#+BEGIN_SRC emacs-lisp
;;(require 'hlinum)
;;(hlinum-activate)
#+END_SRC 
** Nlinum
#+BEGIN_SRC emacs-lisp
(global-nlinum-mode)
;; activate for doom-theme 
(setq nlinum-highlight-current-line t)
#+END_SRC 
** Nlinum hl 
#+BEGIN_SRC emacs-lisp
(require 'nlinum-hl) ; load this after nlinum
;; Changing fonts can leave nlinum line numbers in their original size; this
;; forces them to resize.
(advice-add #'set-frame-font :after #'nlinum-hl-flush-all-windows)
#+END_SRC 
** Hl-line mode
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
#+END_SRC 
** Magit
#+BEGIN_SRC emacs-lisp
;; bind a quick and dirty shortcut to 
(global-set-key (kbd "C-x g") 'magit-status)

;; bind the popup of popus
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
#+END_SRC 
** Org-gcal
#+BEGIN_SRC emacs-lisp
(setq package-check-signature nil)
(require 'org-gcal)

(setq org-gcal-client-id "907076689223-ch6g792uumt7kkh9j7pjm8i80qr7uccq.apps.googleusercontent.com"
	org-gcal-client-secret "mdYQf4gdYkwlQSAMYCHkSkHS"
	org-gcal-file-alist '(("cantorlunae@gmail.com" .  "~/Dropbox/org/gcal.org")
("uv89i0rlnv503i17nedvmo95f8@group.calendar.google.com" . "~/Dropbox/org/unterrichte.org")
("c83agj55j9uipbjdd2mmp7h9v8@group.calendar.google.com" . "~/Dropbox/org/ereignisse.org")
("ekk7658f3jm5fh1mea2sdnu8vc@group.calendar.google.com" . "~/Dropbox/org/gewohnheiten.org")
("#contacts@group.v.calendar.google.com" . "~/Dropbox/org/jahrestage.org")
))

;;(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
;;(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
#+END_SRC 
** Calfw
#+BEGIN_SRC emacs-lisp
(require 'calfw)
(require 'calfw-gcal)
(require 'calfw-org)

(defun my-open-calendar ()
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-source "Light Grey")  ; orgmode source
    ;;(cfw:org-create-source "Green")  ; orgmode source
    ;;(cfw:howm-create-source "Blue")  ; howm source
    ;;(cfw:cal-create-source "Orange") ; diary source
    ;;(cfw:ical-create-source "Moon" "~/moon.ics" "Gray")  ; ICS source1
    ;;(cfw:ical-create-source "gcal" "https://..../basic.ics" "IndianRed") ; google calendar ICS
   ))) 

;; keybinding
 (global-set-key (kbd "<f7>") 'cfw:open-org-calendar)
#+END_SRC 
*** Grid
#+BEGIN_SRC emacs-lisp
;; Unicode characters
(setq cfw:fchar-junction ?╋
      cfw:fchar-vertical-line ?┃
      cfw:fchar-horizontal-line ?━
      cfw:fchar-left-junction ?┣
      cfw:fchar-right-junction ?┫
      cfw:fchar-top-junction ?┯
      cfw:fchar-top-left-corner ?┏
      cfw:fchar-top-right-corner ?┓)
#+END_SRC 
*** 取 Months                                                                   :noexport:
 (;; Month
 (setq calendar-month-name-array
   ["Janvier" "Février" "Mars"     "April"   "Mai"      "Juin"
    "Juillet"    "Août"   "Septembre" "Octobre" "Novembre" "Décembre"])

 ;; Week days
 (setq calendar-day-name-array
       ["Dimanche" "Lundi" "Mardi" "Mercredi" "Jeudi" "Vendredi" "Samedi"])

 ;; First day of the week
 (setq calendar-week-start-day 1) ; 0:Sunday, 1:Mondaysetq cfw:org-agenda-schedule-args '(:timestamp))
**** Backup 
   (;; Month
   (setq calendar-month-name-array
     ["January" "February" "March"     "April"   "May"      "June"
      "July"    "August"   "September" "October" "November" "December"])

   ;; Week days
   (setq calendar-day-name-array
         ["Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday"])
*** 取 Face customization 
  (custom-set-faces
   '(cfw:face-title ((t (:foreground "#f0dfaf" :weight bold :height 2.0 :inherit variable-pitch))))
   '(cfw:face-header ((t (:foreground "#d0bf8f" :weight bold))))
   '(cfw:face-sunday ((t :foreground "#cc9393" :background "grey10" :weight bold)))
   '(cfw:face-saturday ((t :foreground "#8cd0d3" :background "grey10" :weight bold)))
   '(cfw:face-holiday ((t :background "grey10" :foreground "#8c5353" :weight bold)))
   '(cfw:face-grid ((t :foreground "DarkGrey")))
   '(cfw:face-default-content ((t :foreground "#bfebbf")))
   '(cfw:face-periods ((t :foreground "cyan")))
   '(cfw:face-day-title ((t :background "grey10")))
   '(cfw:face-default-day ((t :weight bold :inherit cfw:face-day-title)))
   '(cfw:face-annotation ((t :foreground "RosyBrown" :inherit cfw:face-day-title)))
   '(cfw:face-disable ((t :foreground "DarkGray" :inherit cfw:face-day-title)))
   '(cfw:face-today-title ((t :background "#7f9f7f" :weight bold)))
   '(cfw:face-today ((t :background: "grey10" :weight bold)))
   '(cfw:face-select ((t :background "#2f2f2f")))
   '(cfw:face-toolbar ((t :foreground "Steelblue4" :background "Steelblue4")))
   '(cfw:face-toolbar-button-off ((t :foreground "Gray10" :weight bold)))
   '(cfw:face-toolbar-button-on ((t :foreground "Gray50" :weight bold))))
** 取 Visual fill column
(require 'visual-fill-column)

;; visual-fill-column-mode will then be activated in every buffer that uses visual-line-mode
(global-visual-fill-column-mode)

;; Set column width.
(setq visual-fill-column-width 70)

;; Put the fringes outside the margins.
(setq visual-fill-column-fringes-outside-margins t)

;; Solve problem with adjusting text size and margin calculation
(advice-add 'text-scale-adjust :after #'visual-fill-column-adjust)
** Alert (Growl) 
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/sync0_git/alert")
(require 'alert)
#+END_SRC 
** Use package
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))
#+END_SRC 
** Guess Language
#+BEGIN_SRC emacs-lisp
(require 'guess-language)

;; Optionally:
(setq guess-language-languages '(en fr it))
(setq guess-language-min-paragraph-length 30)

;; Tell guess-language-mode which dictionary should be used 
(setq guess-language-langcodes '(
    (en . ("en_US" "English"))
    ;;(es . ("es_ES" "Spanish"))
    (fr . ("fr_FR" "French"))
    (it . ("it_IT" "Italian"))
    ;;(de . ("de_DE" "German"))
))

;; Activate guess-language-mode in the buffer in which you want to use it.
(add-hook 'text-mode-hook (lambda () (guess-language-mode 1)))

;; When a new language is detected, change abbrev maps
;;(defun my-custom-function (lang beginning end)
;;  (do-something))

;;(add-hook 'guess-language-after-detection-functions #'my-custom-function)

#+END_SRC 
* Custom Functions
** Date
#+BEGIN_SRC emacs-lisp
  (defun insert-current-day () (interactive)
    (insert (shell-command-to-string "echo -n $(date +%d)")))

  (defun insert-current-month () (interactive)
    (insert (shell-command-to-string "echo -n $(date +%B)")))
#+END_SRC
** Automatic abbrevs integration with ispell
#+BEGIN_SRC emacs-lisp
;;(define-key ctl-x-map "\C-i"
  ;;#'endless/ispell-word-then-abbrev)

(defun endless/simple-get-word ()
  (car-safe (save-excursion (ispell-get-word nil))))

(defun endless/ispell-word-then-abbrev (p)
  "Call `ispell-word', then create an abbrev for it.
With prefix P, create local abbrev. Otherwise it will
be global.
If there's nothing wrong with the word at point, keep
looking for a typo until the beginning of buffer. You can
skip typos you don't want to fix with `SPC', and you can
abort completely with `C-g'."
  (interactive "P")
  (let (bef aft)
    (save-excursion
      (while (if (setq bef (endless/simple-get-word))
                 ;; Word was corrected or used quit.
                 (if (ispell-word nil 'quiet)
                     nil ; End the loop.
                   ;; Also end if we reach `bob'.
                   (not (bobp)))
               ;; If there's no word at point, keep looking
               ;; until `bob'.
               (not (bobp)))
        (backward-word)
        (backward-char))
      (setq aft (endless/simple-get-word)))
    (if (and aft bef (not (equal aft bef)))
        (let ((aft (downcase aft))
              (bef (downcase bef)))
          (define-abbrev
            (if p local-abbrev-table global-abbrev-table)
            bef aft)
          (message "\"%s\" now expands to \"%s\" %sally"
                   bef aft (if p "loc" "glob")))
      (user-error "No typo at or before point"))))

(setq save-abbrevs 'silently)
(setq-default abbrev-mode t)

;; set a faster shortcut
(define-key global-map (kbd "M-i") 'endless/ispell-word-then-abbrev)
#+END_SRC 
* Useful Key Bindings
** Font size change
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
#+END_SRC
** Cycle through buffers
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<C-tab>") 'bury-buffer)
#+END_SRC
** Load EMACS initialization file
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c i") 
(lambda() (interactive)(org-babel-load-file "~/.emacs.d/emacs_settings.org")))
#+END_SRC
** Super-<space> to no shortcut
#+BEGIN_SRC emacs-lisp
;; (global-set-key (kbd "S-SPC") nil)
#+END_SRC
** Rebind frequent commands
*** Ctrl-<space> to pop-global-mark
#+BEGIN_SRC emacs-lisp
 (defun pop-local-or-global-mark ()
  "Pop to local mark if it exists or to the global mark if it does not."
  (interactive)
  (if (mark t)
      (pop-to-mark-command)
      (pop-global-mark)))

;; keybinding
;;(global-set-key (kbd "C-SPC") nil) ;; default bound to set-mark
;;(global-set-key (kbd "C-SPC") 'pop-local-or-global-mark) 
#+END_SRC
*** Quickly save
#+BEGIN_SRC emacs-lisp
(global-set-key "\M-w" 'save-buffer)
#+END_SRC  
*** Quickly work with bookmarks
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-m") 'bookmark-set)
(global-set-key (kbd "M-b") 'bookmark-jump)
#+END_SRC 
* Backups 
** Store all autosave files in the tmp dir
#+BEGIN_SRC emacs-lisp 
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC
** Backups in backup dir
#+BEGIN_SRC emacs-lisp 
(setq backup-by-copying t
      backup-directory-alist '(("." . "~/.emacs.d/backups"))
      delete-old-versions t
      kept-new-versions 10
      kept-old-versions 0
;; use versioned backups
      version-control t)

;; no lockfiles
(setq create-lockfiles nil) 
#+END_SRC
