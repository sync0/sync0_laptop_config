#+TITLE: Emacs Settings
#+AUTHOR: sync0
#+EMAIL: carc.sync0@gmail.com
#+STARTUP: indent showeverything nostars
# Necessary to export code from Emacs org mode to elisp. 
#+PROPERTY: header-args :tangle yes
* 完 Introduction 
This is my Emacs configuration file. As the sloppy code herein attests, I
am not a proficient programmer. I use Emacs primarily for taking notes and
writing academic articles, so these settings reflect that usage. 

The functions prefixed by ~sync0~ are not necessarily my creations; this is
just the placeholder I use to distinguish them from Emacs and other
packages' native functions.

Should you have any suggestions for improving the code, I would greatly
appreciate if you sent me an email.
** 完 Organization
I organize all my emacs configuration in ~init.org~. 
** 完 Tips
Before presenting the code, I have compiled a few tips that you might find
useful for setting up Emacs: 

 - In Org mode, ~<s + tab~ creates a code block. To make it executable,
   add the words ~emacs-lisp~ to the first line, right after ~#+BEGIN_SRC~.
 - The location for hunspell dictionaries should be in /usr/share/hunspell.
   Otherwise, an error arises that I have been unable to solve, even
   when declaring the path. 
* 完 Configuration
Some of the settings in this part are necessary to load Emacs packages, so
they must be placed in the beginning of the configuration file. Some others
do not require this position, but I have included them here for ease of
finding.

** 完 Tangling 
   This code sets up tangling to byte-compile the /init.org/ file
   automatically on save. Byte compiling this file speeds up Emacs on
   startup. Likewise, when byte-compiling, Emacs displays whether there are
   any errors or warnings, which simplifies debugging.

   #+BEGIN_SRC emacs-lisp
     (defun sync0-tangle-init ()
       "If the current buffer is 'init.org' the code-blocks are
     tangled, and the tangled file is compiled."
       (when (equal (buffer-file-name)
                    (expand-file-name (concat user-emacs-directory "init.org")))
         ;; Avoid running hooks when tangling.
         (let ((prog-mode-hook nil))
           (org-babel-tangle)
           (byte-compile-file (concat user-emacs-directory "init.el")))))
     (add-hook 'after-save-hook 'sync0-tangle-init)
   #+END_SRC 
** 完 Package management
These settings configure Emacs package manager and the package
 repositories.

   #+BEGIN_SRC emacs-lisp
          ;; Initialize Emac's package manager.
          (package-initialize)

          ;; Set up the package repositories.
          (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
          (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
          ;;     (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
          (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))

          (setq package-check-signature nil)
     #+END_SRC 

[[https://github.com/jwiegley][jwiegley's]] ~use-package~ macro simplifies package configuration in the ~.emacs~
startup file for faster startup and easier organization.

   #+BEGIN_SRC emacs-lisp
     ;; Verify that "use-package" is installed.
     (unless (package-installed-p 'use-package)
       ;; Refresh contents of package list.
       (package-refresh-contents)
       ;; Install "use-package".
       (package-install 'use-package))

     (setq use-package-verbose t)

     ;; Activate "use-package". 
     (require 'use-package)
     (require 'diminish)
     ;; Necessary to allow use-package to bind keys through ":bind" keyword.
     (require 'bind-key)
 #+END_SRC 

 See https://www.reddit.com/r/emacs/comments/cdei4p/failed_to_download_gnu_archive_bad_request/
   #+BEGIN_SRC emacs-lisp
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
 #+END_SRC 
** 完 Scratch message
 The following code changes the Emacs welcome message in the ~scratch~
 buffer. I use a fragment from the chapter "Where I Lived, and What I Lived
 for" from Thoreau's /Walden, or, Life in the Woods/ (1854). 

 #+BEGIN_SRC emacs-lisp
   (setq initial-scratch-message ";;
   ;; 
   ;; WHERE I LIVED, AND WHAT I LIVED FOR
   ;; 
   ;; I went to the woods because I wished to live deliberately, to
   ;; front only the essential facts of life, and see if I could not
   ;; learn what it had to teach, and not, when I came to die, discover
   ;; that I had not lived. I did not wish to live what was not life,
   ;; living is so dear; nor did I wish to practise resignation, unless
   ;; it was quite necessary. I wanted to live deep and suck out all
   ;; the marrow of life, to live so sturdily and Spartan-like as to
   ;; put to rout all that was not life, to cut a broad swath and shave
   ;; close, to drive life into a corner, and reduce it to its lowest
   ;; terms, and, if it proved to be mean, why then to get the whole
   ;; and genuine meanness of it, and publish its meanness to the
   ;; world; or if it were sublime, to know it by experience, and be
   ;; able to give a true account of it in my next excursion.
   ;; 
   ;; 
   ;; Henry David Thoreau, Walden (1854)")
   #+END_SRC 
** 完 Mode line
Display time in modeline.
  #+BEGIN_SRC emacs-lisp
    (setq display-time-string-forms
          '((propertize (format-time-string " %H:%M " now) 'face 'bold)))

    (display-time-mode 1)
    #+END_SRC 

Fancy battery. 
  #+BEGIN_SRC emacs-lisp
    (use-package fancy-battery
      :hook (after-init . fancy-battery-mode))
    #+END_SRC 
** 完 Toolbars
Define a function to toggle mode line. 
    #+BEGIN_SRC emacs-lisp
    (defun sync0-toggle-mode-line () 
      "toggles the modeline on and off"
      (interactive) 
      (setq mode-line-format
            (if (equal mode-line-format nil)
                (default-value 'mode-line-format)) )
      (redraw-display))
      #+END_SRC 

Hide tool bar, menu bar, and scroll bar at startup. 
    #+BEGIN_SRC emacs-lisp
      (tool-bar-mode -1) 
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
      (menu-bar-showhide-fringe-menu-customize-disable)
      #+END_SRC 

In case I need those annoying toolbars back, I bind them:
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "<f10>") 'sync0-toggle-mode-line)
      (global-set-key (kbd "<f8>") 'tool-bar-mode)
      (global-set-key (kbd "<f9>") 'menu-bar-mode)
      #+END_SRC 
** 完 Appeareance
    At startup,  maxmize Emacs' window. 
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'default-frame-alist '(fullscreen . maximized))
 #+END_SRC

Other settings.
    #+BEGIN_SRC emacs-lisp
      (setq-default                    
       ;; Avoid ugly problemes with git-gutter.
       fringes-outside-margins t
       ;; left-margin-width 3
       ;; right-margin-width 7
       left-fringe-width 3
       right-fringe-width 0
       ;; Remove continuation arrow on right fringe.
       fringe-indicator-alist (delq (assq 'continuation fringe-indicator-alist)
                                    fringe-indicator-alist)
       indicate-buffer-boundaries nil
       indicate-empty-lines nil
       max-mini-window-height 0.3)
 #+END_SRC

Configure window dividers. 
    #+BEGIN_SRC emacs-lisp
      ;; On graphical displays, you can use window dividers in order to separate
      ;; windows visually.
      (setq-default window-divider-default-places t
                    window-divider-default-bottom-width 0
                    window-divider-default-right-width 1)
      (add-hook 'emacs-startup-hook #'window-divider-mode)
 #+END_SRC
** 完 Sane defaults
   Define user information.
 #+BEGIN_SRC emacs-lisp
   (setq user-full-name "Carlos Alberto Rivera Carreño"
         user-mail-address "carc.sync0@gmail.com")
 #+END_SRC

 Configure bookmarks.  
 #+BEGIN_SRC emacs-lisp
   ;; Bookmarks directory
   (setq bookmark-default-file (concat user-emacs-directory "bookmarks")
         bookmark-save-flag 1)
 #+END_SRC

Configure autosave.
 #+BEGIN_SRC emacs-lisp
   (setq auto-save-interval 100
         auto-save-timeout 60)
 #+END_SRC

   Configure CUSTOM.
 #+BEGIN_SRC emacs-lisp
   ;; Set CUSTOM directory
   (setq custom-file (expand-file-name "custom_settings.el" user-emacs-directory))
   (load custom-file t)
 #+END_SRC

Configure line numbers
 #+BEGIN_SRC emacs-lisp
   ;; (when (version<= "26.0.50" emacs-version )
   ;; (global-display-line-numbers-mode))
 #+END_SRC

Eliminate Emacs' yes-no inconsistency. 
 #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
 #+END_SRC

Configure the default encoding system.
 #+BEGIN_SRC emacs-lisp
   (prefer-coding-system 'utf-8)
   (set-language-environment 'utf-8)
   (set-default-coding-systems 'utf-8)
   (set-terminal-coding-system 'utf-8)
   (set-keyboard-coding-system 'utf-8)
   (set-selection-coding-system 'utf-8)
   (setq default-file-name-coding-system 'utf-8)
   (setq locale-coding-system 'utf-8)
   (if (boundp buffer-file-coding-system)
       (setq buffer-file-coding-system 'utf-8)
     (setq default-buffer-file-coding-system 'utf-8))
   ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
   (when (display-graphic-p)
     (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
 #+END_SRC

Configure matching delimiters. 
    #+BEGIN_SRC emacs-lisp
      (setq show-paren-delay 0.1
            show-paren-highlight-openparen t
            show-paren-when-point-inside-paren t)
      (show-paren-mode 1)
 #+END_SRC

Other settings.
    #+BEGIN_SRC emacs-lisp
      (setq-default                    
       ;; Use spaces instead of tabs
       indent-tabs-mode nil              
       ;; Split verticly by default
       split-width-threshold 0         
       ;; Split verticly by default
       split-height-threshold nil        
       ;; disable bidirectional text for tiny performance boost
       bidi-display-reordering nil 
       ;; don't blink--too distracting
       blink-matching-paren nil    
       ;; hide cursors in other windows
       cursor-in-non-selected-windows nil  
;; Don't resize frames implicitly.
       frame-inhibit-implied-resize t
       highlight-nonselected-windows nil
;; Don't show the "Welcome to GNU Emacs ..." at startup
       inhibit-startup-screen t
       image-animate-loop t)
 #+END_SRC
** 完 Faces & text
    Adjust font size according to screen resolution (when I use dual monitor setup)
#+BEGIN_SRC emacs-lisp
    (if (> (display-pixel-width) 2000)
        ;; external monitor font size
        (progn (set-face-attribute 'default nil 
                              :family "Source Code Pro"
                              :height 120)
          (setq line-spacing 0))
      ;; laptop font size
      (progn (set-face-attribute 'default nil 
                            :family "Source Code Pro"
                            :height 115)
        (setq line-spacing 0)))
 #+END_SRC

Configure fixed-widht faces. 
  #+BEGIN_SRC emacs-lisp
    ;; (defun sync0-buffer-face-mode-fixed ()
    ;;   "Sets a fixed width (monospace) font in current buffer"
    ;;   (if (> (display-pixel-width) 2000)
    ;;       ;; external monitor font size
    ;;       (setq buffer-face-mode-face '(:family "Source Code Pro" :height 120)) 
    ;;     ;; laptop font size
    ;;     (setq buffer-face-mode-face '(:family "Source Code Pro" :height 115)))
    ;;   (buffer-face-mode))
 #+END_SRC

  Configure variable-width faces.
  #+BEGIN_SRC emacs-lisp
    (defun sync0-buffer-face-mode-variable ()
      "Set font to a variable width (proportional) fonts in current buffer"
      (if (> (display-pixel-width) 2000)
          ;; external monitor font size
          (setq buffer-face-mode-face '(:family "Linux Libertine O" :height 140))
        ;; laptop font size
        (setq buffer-face-mode-face '(:family "Linux Libertine O" :height 150)))
      (buffer-face-mode))
 #+END_SRC

    Configure default font faces for Info, ERC, and Org
#+BEGIN_SRC emacs-lisp
    (add-hook 'erc-mode-hook 'sync0-buffer-face-mode-variable)
    (add-hook 'Info-mode-hook 'sync0-buffer-face-mode-variable)
    (add-hook 'text-mode-hook 'sync0-buffer-face-mode-variable)
 #+END_SRC

  Allow narrowing
  #+BEGIN_SRC emacs-lisp
    (put 'narrow-to-region 'disabled nil)
 #+END_SRC

Configure Hooks. 
 #+BEGIN_SRC emacs-lisp
      (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
      (add-hook 'LaTeX-mode-hook 'turn-on-visual-line-mode)
      ;; (add-hook 'text-mode-hook 'turn-off-auto-fill)
      ;; (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
  #+END_SRC

  Other settings.
#+BEGIN_SRC emacs-lisp
  (setq 
   ;; Have sentences end with single espace.
   sentence-end-double-space nil
   ;; Have org-mode indent elisp sections.
   org-src-tab-acts-natively t
   ;; Word wrap in org mode.
   org-startup-truncated t)
 #+END_SRC
** 完 Backups 
 #+BEGIN_SRC emacs-lisp 
   (setq 
    ;; Store all autosave files in the tmp directory.
    auto-save-file-name-transforms
    `((".*" ,temporary-file-directory t))
    ;; Store all backups in the "backups" directory.
    backup-directory-alist '(("." . "~/.emacs.d/backups"))
    backup-by-copying t
    delete-old-versions t
    kept-new-versions 10
    kept-old-versions 0
    ;; Use versioned backups.
    version-control t
    ;; Don't create lockfiles.
    create-lockfiles nil) 
 #+END_SRC
** 無 Pre-package Functions
This is a collection of functions that become problematic when loaded
after packages are declared.

Replace smart quotes with straight quotes so that spell check can recognize
words with contractions like “don’t” and “can’t.” For when I paste text in
that I’ve copied from the web.

#+BEGIN_SRC emacs-lisp
(setq smart-quote-regexp-replacements
'(
("\\(\\w\\)- " . "\\1")
("\\(\\w\\)\\(  [-—] \\|—\\)" . "\\1---")

))

(defun replace-smart-quotes-regexp (beg end)
  "Replace 'smart quotes' in buffer or region with ascii quotes."
  (interactive "r")
  (mapcar
   (lambda (r)
     (save-excursion
       (replace-regexp (car r) (cdr r) nil beg (min end (point-max)))))
   smart-quote-regexp-replacements)
  )

(defun replace-smart-quotes (beg end)
  "Replace 'smart quotes' in buffer or region with ascii quotes."
  (interactive "r")
;;(while (search-forward-regexp "- " nil to)
;; (replace-match "") nil t)
;; add alpha. And replace the alpha.

  (replace-smart-quotes-regexp beg end)
  (format-replace-strings '(
                            ("\x201C" . "``")
                            ("“" . "``")
                            ("\x201D" . "''")
                            ("”" . "''")
                            ("\x2018" . "`")
                            ("\x2019" . "'")
                            ("’" . "'")
;;("''" . "\"")
;;("​" . "")
;;("…" . "...")
("…" . "\\ldots")
("..." . "\\ldots")
;;("• " . "- ")
;;(" " . "")
("  " . " "))
                       nil   beg (min end (point-max))))
#+END_SRC 
* 中 Packages 
** 完 auto-fill
 #+BEGIN_SRC emacs-lisp
   (use-package auto-fill-mode
     :hook (text-mode . turn-on-auto-fill)
     :init 
     ;; Configure exceptions for auto-fill mode. 
     (defun sync0-nobreak-p ()
       (and (looking-at "+[[:alnum:]]")
            (looking-back "^\\\[A-z]+{.+" (line-beginning-position))))
     :config
     ;; Define column width for auto-fill mode. 
     (setq-default fill-column 75)
     ;; Respect de la typographie française par auto-fill mode.
     ;; (setq fill-nobreak-predicate '(fill-french-nobreak-p))
     ;; Set hook for exceptions to auto-fill-mode.
     (add-hook 'fill-nobreak-predicate #'sync0-nobreak-p))
  #+END_SRC
** 完 abbrev
#+BEGIN_SRC emacs-lisp
  (use-package abbrev
    :custom
    ;; Tell Emacs where to read abbrevs.  
    (abbrev-file-name "~/.emacs.d/abbrev_defs")
    ;; Save abbrevs when files are saved.
    (save-abbrevs t)
    ;; Don't notify when abbrevs are saved.
    (save-abbrevs 'silently)
    ;; Accept ' as a word constituent. 
    (dabbrev-abbrev-char-regexp  "\\sw")
    :config
    ;; Avoid errors when reading abbrev_defs.
    (if (file-exists-p abbrev-file-name)
        (quietly-read-abbrev-file))

    ;; Avoid expansion character insertion. 
    ;; Use this function on a per-abbrev basis.
    ;; This is the "hook" function
    (defun dont-insert-expansion-char ()  t) 
    ;; The hook should have a "no-self-insert" property set 
    (put 'dont-insert-expansion-char 'no-self-insert t) 

    ;; Initialize abbrev-mode by default. 
    (setq-default abbrev-mode t)

    ;; Add abbrevs 
    (defun sync0-define-local-abbrev (name expansion)
      "Defines a new abbrev for current local abbrev table."
      (interactive "sEnter abbrev:\nsEnter expansion:")
      (when (and name expansion (not (equal name expansion)))
        (define-abbrev local-abbrev-table name expansion)
        (message "\"%s\" now expands to \"%s\" %sally"
                 name expansion "loc")))

    ;; Auto-update abbrev table on save.
    (add-hook 'after-save-hook (lambda ()
                                 (when (equal buffer-file-name "/home/sync0/.emacs.d/abbrev_defs")
                                   (read-abbrev-file)))))
  #+END_SRC 
** 完 recentf
A packate that displays a list of recent files. 
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :custom
    (recentf-max-saved-items 100)
    (recentf-max-menu-items 10)
    :config
    (recentf-mode +1)
    :bind (:map recentf-dialog-mode-map
                ("j"  . next-line)
                ("k"  . previous-line)))
#+END_SRC
** 完 highlight-indentation
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indentation
    :commands (highlight-indentation-mode highlight-indentation-current-column-mode))
  ;; ;; For modes with sub-par number fontification
  ;; (use-package highlight-numbers :commands highlight-numbers-mode)
  #+END_SRC 
** 完 rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (lisp-mode . rainbow-delimiters-mode)
    :custom (rainbow-delimiters-max-face-count 3))
  #+END_SRC 
** 完 all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons :after ivy
    :custom
    ;; improve performance 
    (inhibit-compacting-font-caches t)
    :config
    ;; ivy setup
    (all-the-icons-ivy-setup))
#+END_SRC 
** 完 doom-themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes  
    :init
    (progn
      (load-theme 'doom-nord t)
      (load-theme 'doom-nova t)
      (load-theme 'doom-solarized-light t)
      (load-theme 'doom-spacegrey t))
:custom
    (doom-themes-enable-bold t) ; if nil, bold is universally disabled
    (doom-themes-enable-italic t) ; if nil, italics is universally disabled
    :config
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons fonts must be installed).
    ;;    (doom-themes-neotree-config)  
    ;; Correct org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC 

   Cycle between themes.
#+BEGIN_SRC emacs-lisp
  (use-package cycle-themes :load-path "~/.emacs.d/sync0_git/cycle-themes.el/" 
    :after doom-themes
    :init 
    (setq cycle-themes-theme-list '(doom-nord doom-nova doom-solarized-light doom-spacegrey))
    :config 
    (cycle-themes-mode))
#+END_SRC 
** 完 solaire-mode
#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode :after doom-themes 
    :hook ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
    :config
    (add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)
    ;; (setq solaire-mode-remap-modeline nil)
    (solaire-mode-swap-bg))
#+END_SRC 
** 完 doom-modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline :after doom-themes
    :hook (after-init . doom-modeline-mode)
    :custom
    ;; How tall the mode-line should be. It's only respected in GUI.
    ;; If the actual char height is larger, it respects the actual height.
    (doom-modeline-height 25)
    ;; How wide the mode-line bar should be. It's only respected in GUI.
    (doom-modeline-bar-width 3)
    (doom-modeline-buffer-file-name-style 'truncate-upto-project)
    ;; Whether display icons in mode-line or not.
    (doom-modeline-icon (display-graphic-p))
    ;; Whether display the icon for major mode. It respects `doom-modeline-icon'.
    (doom-modeline-major-mode-icon t)
    ;; Whether display color icons for `major-mode'. It respects
    ;; `doom-modeline-icon' and `all-the-icons-color-icons'.
    (doom-modeline-major-mode-color-icon t)
    ;; Whether display icons for buffer states. It respects `doom-modeline-icon'.
    (doom-modeline-buffer-state-icon t)
    ;; Whether display buffer modification icon. It respects `doom-modeline-icon'
    ;; and `doom-modeline-buffer-state-icon'.
    (doom-modeline-buffer-modification-icon t)
    ;; Whether display minor modes in mode-line or not.
    ;; (setq doom-modeline-minor-modes (featurep 'minions))
    ;; If non-nil, a word count will be added to the selection-info modeline segment.
    (doom-modeline-enable-word-count t)
    ;; Whether display buffer encoding.
    (doom-modeline-buffer-encoding t)
    ;; Whether display indentation information.
    (doom-modeline-indent-info nil)
    ;; If non-nil, only display one number for checker information if applicable.
    (doom-modeline-checker-simple-format t)
    ;; The maximum displayed length of the branch name of version control.
    (doom-modeline-vcs-max-length 12)
    ;; Whether display perspective name or not. Non-nil to display in mode-line.
    (doom-modeline-persp-name nil)
    ;; Whether display icon for persp name. Nil to display a # sign. It respects `doom-modeline-icon'
    (doom-modeline-persp-name-icon nil)
    ;; Whether display `lsp' state or not. Non-nil to display in mode-line.
    (doom-modeline-lsp nil)
    ;; Whether display github notifications or not. Requires `ghub` package.
    (doom-modeline-github nil)
    ;; The interval of checking github.
    ;; (setq doom-modeline-github-interval (* 30 60))
    ;; Whether display mu4e notifications or not. Requires `mu4e-alert' package.
    (doom-modeline-mu4e t))
  #+END_SRC 
** 完 ispell
 #+BEGIN_SRC emacs-lisp
   (use-package ispell
:custom
      ;; Save a new word to personal dictionary without asking
      (ispell-silently-savep t)
      ;; Set up hunspell dictionaries
      (ispell-hunspell-dict-paths-alist
      '(("en_US-large" "/usr/share/hunspell/en_US-large.aff")
        ;; ("de_DE" "/usr/share/hunspell/de_DE.aff")
        ;; ("it_IT" "/usr/share/hunspell/it_IT.aff")
        ("es_ANY" "/usr/share/hunspell/es_ANY.aff")
        ("fr_FR" "/usr/share/hunspell/fr_FR.aff")))
     :config
     (cond
      ;; if hunspell does NOT exist, use aspell
      ((executable-find "hunspell")
       (setq ispell-program-name "hunspell")
       ;;(setq ispell-local-dictionary "en_US")
       (setq ispell-local-dictionary-alist '(  
                                             ;; (nil "[[:alpha:]]" "[^[:alpha:]]" "['-]" t ("-d" "en_US-large" ) nil utf-8)
                                             ("en_US-large" "[[:alpha:]]" "[^[:alpha:]]" "['-]" t ("-d" "en_US-large" ) nil utf-8)
                                             ;; ("de_DE" "[[:alpha:]ÄÖÜéäöüß]" "[^[:alpha:]ÄÖÜéäöüß]" "['’-]" t ("-d" "de_DE") nil utf-8)
                                             ("es_ANY" "[[:alpha:]ÁÉÍÓÚÄËÏÖÜÑáéíóúäëïöüñ]" "[^[:alpha:]ÁÉÍÓÚÄËÏÖÜÑáéíóúäëïöüñ]" "['’-]" t ("-d" "es_ANY") nil utf-8)
                                             ;; ("it_IT" "[[:alpha:]AEÉIOUàèéìòù]" "[^[:alpha:]AEÉIOUàèéìòù]" "['’-]" t ("-d" "it_IT") "~tex" nil utf-8)
                                             ("fr_FR" "[[:alpha:]ÀÂÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü]" "[^[:alpha:]ÀÂÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü]" "[’'-]" t ("-d" "fr_FR")  nil utf-8))))

      ((executable-find "aspell")
       (setq ispell-program-name "aspell")
       ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
       (setq ispell-extra-args '("--sug-mode=ultra"))))

     ;; Ignore sections of files for spellcheck
     (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXEMPLE"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_equation" . "#\\+END_equation"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_labeling" . "#\\+END_labeling"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_equation*" . "#\\+END_equation*"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_align" . "#\\+END_align"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_align*" . "#\\+END_align*"))
     (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
     (add-to-list 'ispell-skip-region-alist '("\\$" . "\\$")))
 #+END_SRC 
** 完 flyspell
 #+BEGIN_SRC emacs-lisp
   (use-package flyspell :after (org ispell)
     ;; :hook (text-mode . flyspell-mode)
     :custom
     (ispell-parser 'tex)
     (flyspell-issue-message-flag nil)
     :config
     ;; Check next highlighted word custom function.
     (defun sync0-flyspell-check-next-highlighted-word ()
       "Custom function to spell check next highlighted word"
       (interactive)
       (flyspell-goto-next-error)
       (ispell-word)))
 #+END_SRC 
** 完 tex
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :defer t
    :ensure auctex
    :custom
    (preview-gs-command "/usr/local/bin/gs")
    (TeX-PDF-mode t)
    :config
    ;; Compile tex documents automatically.
    (defun sync0-latex-fast-compile ()
      "Fast compile current file"
      (TeX-command "LaTeX" 'TeX-master-file))

    ;; Compile tex documents automatically after save.
    (defun sync0-after-save-actions ()
      "Used in `after-save-hook'."
      (when (equal this-command 'save-buffer)
        (when (equal major-mode 'latex-mode) 
          (sync0-latex-fast-compile))))

    ;; Set hooks to execute after files are saved. 
    :hook (after-save . sync0-after-save-actions))
  #+END_SRC 
** 完 no-break-fade
#+BEGIN_SRC emacs-lisp
  (use-package nobreak-fade :load-path "~/.emacs.d/sync0/nobreak-fade.el" 
    :after tex
    ;; :command nobreak-fade
    :config
    (autoload 'nobreak-fade-single-letter-p "nobreak-fade")
    (add-hook 'fill-nobreak-predicate 'nobreak-fade-single-letter-p))
    ;; (add-hook 'tex-mode-hook 'nobreak-fade)
#+END_SRC
** 完 projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile :after ivy
    :custom
    ;; (projectile-keymap-prefix (kbd "C-p"))
    (projectile-completion-system 'ivy)
    (projectile-enable-caching t)
    ;;(setq projectile-indexing-method 'alien)
    :config
    (add-to-list 'projectile-globally-ignored-files "node-modules")
    (projectile-mode))
#+END_SRC
** 完 swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper 
    :bind
    (("C-s" . swiper)))
#+END_SRC
** 完 counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel 
    :bind
    (("M-x" . counsel-M-x)
     ("M-y" . counsel-yank-pop)
     ("M-b" . counsel-bookmark)
     ("C-x C-f" . counsel-find-file)
     ("<f5>" . counsel-recentf)
     ("<f1> f" . counsel-describe-function)
     ("<f1> v" . counsel-describe-variable)
     ("<f1> l" . counsel-load-library)
     ("<f2> i" . counsel-info-lookup-symbol)
     ("<f2> u" . counsel-unicode-char)))
#+END_SRC
** 完 ivy 
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) ")
    :hook (after-init . ivy-mode))
#+END_SRC
** 完 epa-file
#+BEGIN_SRC emacs-lisp
  (use-package epa-file
    :custom
    (epa-file-encrypt-to '("carc.sync0@gmail.com"))
    (epa-file-select-keys 'silent)
    :config
    (epa-file-enable))
  #+END_SRC 
** 完 org 
Even though, by default, Emacs Org mode has the export keyword
~LATEX_COMPILER:~ to choose among the different engines (pdflatex, xelatex, or
lualatex), I had to tweek the settings to run LaTeX through ~latexmk~ for
biber to work properly with BibLaTeX. In layman English, the following
configuration is necessary for automatic bibliography management to work
properly when exporting org documents to LaTeX.

BTW, you can assign "pdf" in above variables if you prefer PDF format
for page breaks add this to org files
# #+ODT: <text:p text:style-name="PageBreak"/>

#+BEGIN_SRC emacs-lisp
  (use-package org 
    :init
    ;; (defun gs/mark-next-done-parent-tasks-todo ()
    ;;  ;; "Visit each parent task and change 中 (or 完) states to 無."
    ;;   ;; Don't change the value if new state is "完"
    ;;   (let ((mystate (or (and (fboundp 'org-state)
    ;;                           (member state
    ;; 				  (list "中" "無")))
    ;;                      (member (nth 2 (org-heading-components))
    ;; 			     (list "中" "無")))))
    ;;     (when mystate
    ;;       (save-excursion
    ;;         (while (org-up-heading-safe)
    ;;           (when (member (nth 2 (org-heading-components)) (list "中" "完"))
    ;;             (org-todo "無")))))))

    ;; (add-hook 'org-after-todo-state-change-hook 'gs/mark-next-done-parent-tasks-todo 'append)

    (defun sync0-org-tree-open-in-right-frame ()
      (interactive)
      (org-tree-to-indirect-buffer)
      (windmove-right))

    (defun sync0-call-rebinding-org-blank-behaviour (fn)
      (let ((org-blank-before-new-entry
             (copy-tree org-blank-before-new-entry)))
        (when (org-at-heading-p)
          (rplacd (assoc 'heading org-blank-before-new-entry) nil))
        (call-interactively fn)))

    (defun sync0-org-meta-return-dwim ()
      (interactive)
      (sync0-call-rebinding-org-blank-behaviour 'org-meta-return))

    (defun sync0-org-insert-todo-heading-dwim ()
      (interactive)
      (sync0-call-rebinding-org-blank-behaviour 'org-insert-todo-heading))
    :custom
    ;; Initial indentation
    (org-startup-indented nil)         
    ;; Begin displaying entire trees.
    ;;  (org-startup-folded nil)
    ;; Better display of italics & bold.
    (org-hide-emphasis-markers t)
    ;; Define org-tags.
    (org-tag-alist '(("Project" . ?p)
                     ("Examen" . ?e)
                     ("Lectures" . ?r)
                     ("Révisions" . ?v)
                     ("today" . ?h)
                     ("Idée" . ?i)
                     ("thesis" . ?t)
                     ("Question" . ?q)
                     ("noexport" . ?n)
                     ("Université" . ?u)))
    ;; Hide inherited tags from Org's agenda view.
    ;; org-agenda-show-inherited-tags nil
    ;; Define todo keywords.
    (org-todo-keywords '((sequence "無(u)" "次(n)" "中(i)" "待(w)" "完(d)")(sequence "阻(p)" "取(c)")))
    ;; Set faces for org-todo-keywords
    (org-todo-keyword-faces '(("無" . (:foreground "#dc322f" :weight bold))
                              ("完" . (:foreground "#859900" :weight bold))   
                              ("次" . (:foreground "#d33682" :weight bold))
                              ("阻" . (:foreground "#268bd2" :weight bold)) 
                              ("待" . (:foreground "#cb4b16" :weight bold))
                              ("取" . (:foreground "#6c71c4" :weight bold)) 
                              ("中" . (:foreground "#b58900" :weight bold))))
    (org-blank-before-new-entry '((heading . nil)(plain-list-item . nil)))
    ;; Color embeded source code
    (org-src-fontify-natively t)
    ;; stop emacs asking for confirmation
    (org-confirm-babel-evaluate nil)
;; Set path for org default directory (necessary for refile and agenda).
    (org-directory "~/Dropbox/org")
    (org-refile-use-outline-path 'file)
    ;; (org-refile-use-outline-path nil) ;; Sasha-Chua's config
    (org-outline-path-complete-in-steps nil)
    ;; (org-reverse-note-order t)
    (org-refile-allow-creating-parent-nodes 'confirm)
    ;; (org-blank-before-new-entry nil)
    (org-refile-use-cache nil)
    :config
    ;; org-refile
    (setq org-refile-targets (quote ((nil :maxlevel . 9)                ;; set default 
                                     ;; ("m2_notes.org" :maxlevel . 3)
                                     ;;(org-agenda-files :maxlevel . 9) ;; set for all agenda files
                                     ("todo.org" :maxlevel . 2))))

    ;; Set default apps.
    (add-hook 'org-mode-hook
              '(lambda ()
                 (delete '("\\.pdf\\'" . default) org-file-apps)
                 (add-to-list 'org-file-apps '("\\.pdf\\'" . "zathura %s"))))
    :bind (:map org-mode-map
                ("M-<return>" . sync0-org-meta-return-dwim)
                ("M-S-<return>" . sync0-org-insert-todo-heading-dwim)))
 #+END_SRC 
*** 完 org-capture
#+BEGIN_SRC emacs-lisp
  (use-package org-capture 
    :after 
    (org org-journal)
    :custom
    (org-default-notes-file "~/Dropbox/org/todo.org")
    :config 
    (setq org-capture-templates '(("j" "Journal Entry" entry (function org-journal-find-location)
                                   "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")

                                   ;; ("t" "Tache" entry
                                   ;; (file+olp "~/Dropbox/org/todo.org" "Tâches" "Indéfini")
                                   ;; "*** 無 %^{Tache} \n:PROPERTIES:\n:ADDED: %<[%Y-%m-%d]>\n:END:" :prepend t)

                                  ("t" "Journal Task" entry (function org-journal-find-location)
                                   "* 無 %^{Title}\n%i%?")

                                  ("q" "Question" entry (function org-journal-find-location)
                                   "* 無 %^{Title}\n:PROPERTIES:\n:ADDED: %<[%Y-%m-%d]>\n:TRACE: %a\n:END:%i%?")

                                  ;; ("b" "Book (todo)" entry
                                  ;;  (file+headline "~/Dropbox/org/notes.org" "Books")
                                  ;;  "** %^{book_title}\n:ORIGIN:\n%^{Where?}\n:END:\n:PROPERTIES:\n:ADDED: %<[%Y-%m-%d]>\n:TRACE: %a\n:END:\n" :prepend t)

                                  ;; ("r" "New Reading (master)" entry
                                  ;;  (file "~/Dropbox/research/forschungsbuch.org")
                                  ;;  "* %^{reading_title}\n:ORIGIN:\n%^{Where?}\n:END:\n:PROPERTIES:\n:YEAR:\n:JOURNAL:\n:VOLUME:\n:ISSUE:\n:PAGES:\n:ADDED: %<[%Y-%m-%d]>\n:TRACE: %a\n:END:\n" :prepend t)

                                  ("m" "Email" entry 
                                   (file+headline "~/Dropbox/org/todo.org" "Personnelles")
                                   "*** 無 %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n" :prepend t)))

    :bind 
    (("\C-c c" . org-capture)))
#+END_SRC 
*** 完 org-agenda
#+BEGIN_SRC emacs-lisp
  (use-package org-agenda 
    :after org
    :init
    ;; Set of functions to have evil bindings in org-agenda.
    (defun air-org-agenda-next-header ()
      "Jump to the next header in an agenda series."
      (interactive)
      (air--org-agenda-goto-header))

    (defun air-org-agenda-previous-header ()
      "Jump to the previous header in an agenda series."
      (interactive)
      (air--org-agenda-goto-header t))

    (defun air--org-agenda-goto-header (&optional backwards)
      "Find the next agenda series header forwards or BACKWARDS."
      (let ((pos (save-excursion
                   (goto-char (if backwards
                                  (line-beginning-position)
                                (line-end-position)))
                   (let* ((find-func (if backwards
                                         'previous-single-property-change
                                       'next-single-property-change))
                          (end-func (if backwards 'max 'min))
                          (all-pos-raw (list (funcall find-func (point) 'org-agenda-structural-header)
                                             (funcall find-func (point) 'org-agenda-date-header)))
                          (all-pos (cl-remove-if-not 'numberp all-pos-raw))
                          (prop-pos (if all-pos (apply end-func all-pos) nil)))
                     prop-pos))))
        (if pos (goto-char pos))
        (if backwards (goto-char (line-beginning-position)))))

    ;; Fast access agenda view.
    (defun air-pop-to-org-agenda (&optional split)
      "Visit the org agenda, in the current window or a SPLIT."
      (interactive "P")
      (org-agenda nil "h") ;; the h corresponds to the agenda view that will be displayed once this command is called
      (when (not split)
        (delete-other-windows)))

    ;; sacha's configuration 
    (defun sacha/org-agenda-new ()
      "Create a new note or task at the current agenda item.
                            Creates it at the same level as the previous task, so it's better to use
                            this with to-do items than with projects or headings."
      (interactive)
      (org-agenda-switch-to)
      (org-capture 0))

    (defun sacha/org-agenda-mark-done-and-add-followup ()
      "Mark the current TODO as done and add another task after it.
                            Creates it at the same level as the previous task, so it's better to use
                            this with to-do items than with projects or headings."
      (interactive)
      (org-agenda-todo "DONE")
      (org-agenda-switch-to)
      (org-capture 0 "t"))

    ;; necessary function 1
    (defun air-org-skip-subtree-if-priority (priority)
      "Skip an agenda subtree if it has a priority of PRIORITY.
                            PRIORITY may be one of the characters ?A, ?B, or ?C."
      (let ((subtree-end (save-excursion (org-end-of-subtree t)))
            (pri-value (* 1000 (- org-lowest-priority priority)))
            (pri-current (org-get-priority (thing-at-point 'line t))))
        (if (= pri-value pri-current)
            subtree-end
          nil)))

    ;; necessary function 2
    (defun air-org-skip-subtree-if-habit ()
      "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (if (string= (org-entry-get nil "STYLE") "habit")
            subtree-end
          nil)))

:custom
    (org-agenda-files (list "~/Dropbox/org/gcal.org"
                                 "~/Dropbox/org/unterrichte.org"
                                 "~/Dropbox/org/ereignisse.org"
                                 "~/Dropbox/org/todo.org"))
          (org-cycle-separator-lines 0)
          ;; Set property inheritance
          ;; org-use-property-inheritance '("PRIORITY" "DEADLINE" "SCHEDULED")
          ;; Choose the placement of org tags in org files.
          (org-tags-column 100)
          ;; Place org agenda tags in the same place as org tags.
          (org-agenda-tags-column org-tags-column)
          ;; Make org-agenda the only window by default.
          (org-agenda-window-setup 'only-window )
          ;; Build agenda manually (to update press "r").
          (org-agenda-sticky t)
          ;; Compact the block agenda view. This deletes the section separators.
          (org-agenda-compact-blocks t)
          ;; Allow one-key todo selection.
          (org-use-fast-todo-selection t)
          ;; Include the todo keywords in fast tag selection buffer.
          (org-fast-tag-selection-include-todo t)
          ;; Allow one-key tag selection.
          (org-fast-tag-selection-single-key t)
          ;; each habit to show up when it is next scheduled, but no further repetitions
          (org-agenda-repeating-timestamp-show-all nil)
          ;; This variable may be set to nil, t, or a number which will then
          ;; give the number of days before the actual deadline when the
          ;; prewarnings should resume.
          (org-agenda-skip-deadline-prewarning-if-scheduled t)
          (org-agenda-skip-scheduled-if-deadline-is-shown t)
          ;; Add appointments duration to column view's effort estimates.
          (org-agenda-columns-add-appointments-to-effort-sum t)
          ;;  org-agenda-deadline-leaders (quote ("  마감 " "%2d日後 " "%2d日前 "))
          ;;  org-agenda-scheduled-leaders (quote ("  豫定 " "%2d日前 "))
          (org-agenda-deadline-leaders (quote ("  豫定 " "%2d日後 " "%2d日前 ")))
          (org-agenda-scheduled-leaders (quote ("  豫定 " " 再日程 ")))

    :config
    (setq org-agenda-custom-commands
          '(("d" "Deux semaines" ((tags "PRIORITY=\"A\""
                                        ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("完" "取" "阻")))
                                         (org-agenda-prefix-format " %-12t%-6s %-15T ")
                                         (org-agenda-overriding-header "Tâches prioritaires:")))

                                  (agenda "" 
                                          ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                          (air-org-skip-subtree-if-priority ?A)))
                                           (org-agenda-span 'day)
                                           (org-agenda-start-day "+0d")
                                           ;; (org-agenda-prefix-format " %-12t%-12s %-15T %l ")
                                           (org-agenda-prefix-format " %-12t%-6s %-15T ")
                                           ;; This format calls for two consecutive 12-character fields for time (%t)
                                           ;; and scheduling information(%s), followed by a 30-character field for the
                                           ;; breadcrumbs (the path). The reason for using fixed fields is to improve
                                           ;; readability of the colums. Otherwise, apending and ~?~ character as in
                                           ;; ~%?t~, only adds the field if the category exists. While this sound like
                                           ;; a smart idea to save space, its very unreadable, so I advise against
                                           ;; using it. This format is applied equally to the next two sections,
                                           ;; precisely to avoid illegible output.
                                           (org-agenda-start-on-weekday nil)
                                           (org-agenda-overriding-header "Aujourd'hui:")))

                                  (agenda "" ((org-agenda-overriding-header "Prochains 7 jours:")
                                              (org-agenda-span 'week)
                                              (org-agenda-start-day "+1d")
                                              (org-agenda-start-on-weekday nil)
                                              ;; (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                                              (org-agenda-prefix-format " %-12t%-6s %-15T ")))

                                  (agenda "" ((org-agenda-overriding-header "Prochains 14 jours:")
                                              (org-agenda-span 'week)
                                              (org-agenda-start-day "+8d")
                                              (org-agenda-start-on-weekday nil)
                                              ;; (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                                              (org-agenda-prefix-format " %-12t%-6s %-15T "))))
             ;; list options for block display
             ((org-agenda-remove-tags t)
              (org-agenda-view-columns-initially t)))

            ("w" "Study Planner" ((tags-todo "review/!+次|+待|+中|+無|+阻"
                                             ((org-agenda-overriding-header "Revisions:")))
                                  (tags-todo "reading/!+次|+待|+中|+無|+阻"
                                             ((org-agenda-overriding-header "Lectures:")))
                                  (tags-todo "project/!+次|+待|+中|+無|+阻"
                                             ((org-agenda-overriding-header "Projets:")))
                                  (tags-todo "exam/!+次|+待|+中|+無|+阻"
                                             ((org-agenda-overriding-header "Examens:"))))
             ;; list options for block display
             ((org-agenda-remove-tags t)
              (org-agenda-view-columns-initially t)))

            ("h" "Tâches d'aujourd'hui" ((tags "PRIORITY=\"A\""
                                               ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("完" "取" "阻")))
                                                (org-agenda-prefix-format " %-12t%-6s %-15T ")
                                                (org-agenda-overriding-header "Tâches prioritaires:")))

                                         (agenda "" 
                                                 ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                                 (air-org-skip-subtree-if-priority ?A)))
                                                  (org-agenda-span 'day)
                                                  (org-agenda-start-on-weekday nil)
                                                  (org-agenda-start-day "+0d")
                                                  ;; (org-agenda-prefix-format " %-12t%-12s %-15T %l ")
                                                  (org-agenda-prefix-format " %-12t%-6s %-15T ")
                                                  ;; This format calls for two consecutive 12-character fields for time (%t)
                                                  ;; and scheduling information(%s), followed by a 30-character field for the
                                                  ;; breadcrumbs (the path). The reason for using fixed fields is to improve
                                                  ;; readability of the colums. Otherwise, apending and ~?~ character as in
                                                  ;; ~%?t~, only adds the field if the category exists. While this sound like
                                                  ;; a smart idea to save space, its very unreadable, so I advise against
                                                  ;; using it. This format is applied equally to the next two sections,
                                                  ;; precisely to avoid illegible output.
                                                  (org-agenda-overriding-header "Tâches d'aujourd'hui:")))
                                         (alltodo ""
                                                  ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                                  (org-agenda-skip-entry-if  'scheduled 'deadline)
                                                                                  (air-org-skip-subtree-if-habit)
                                                                                  (air-org-skip-subtree-if-priority ?A)))
                                                   (org-agenda-prefix-format " %-12t%-6s %-15T %l ")
                                                   (org-agenda-overriding-header "Autres tâches:"))))

             ;; list options for block display
             ((org-agenda-remove-tags t)
              (org-agenda-view-columns-initially t)))

            ("p" "Projets" (
                            (tags-todo "Projet"
                                       ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                       ;; (air-org-skip-subtree-if-priority ?A)
                                                                       (air-org-skip-subtree-if-habit)))
                                        (org-agenda-prefix-format " %-12t%-6s %-15e %?l")
                                        (org-agenda-overriding-header "Projets"))))
             ;; list options for block display
             ((org-agenda-remove-tags t)
              (org-agenda-view-columns-initially t)))

            ("y" "Placeholder" (
                                (tags "PRIORITY=\"A\""
                                      ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                      (air-org-skip-subtree-if-habit)))
                                       ;; (org-agenda-prefix-format " %-6s %-15T ")
                                       (org-agenda-prefix-format " %-12t%-6s ")
                                       (org-agenda-overriding-header "Tâches prioritaires:")))
                                (alltodo ""
                                         ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'nottodo '("中" "次"))
                                                                         (air-org-skip-subtree-if-habit)
                                                                         (air-org-skip-subtree-if-priority ?A)))
                                          ;; (org-agenda-prefix-format " %-6s %-15T ")
                                          (org-agenda-prefix-format " %-12t%-6s ")
                                          ;;(org-agenda-skip-if nil '(scheduled deadline))
                                          (org-agenda-overriding-header "Tâches en cours:")))
                                (tags-todo "Project"
                                           ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                           (air-org-skip-subtree-if-habit)))
                                            (org-agenda-prefix-format " %l %-12t%-6s ")
                                            (org-agenda-overriding-header "Projets")))
                                (tags-todo "Mémoire"
                                           ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                           (air-org-skip-subtree-if-habit)))
                                            (org-agenda-prefix-format " %l %-12t%-6s ")
                                            (org-agenda-overriding-header "Mémoire")))
                                (tags-todo "Épistémologie-Project"
                                           ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                           (air-org-skip-subtree-if-habit)))
                                            (org-agenda-prefix-format " %l %-12t%-6s ")
                                            (org-agenda-overriding-header "Épistémologie")))
                                (tags-todo "SocioEco-Project"
                                           ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                           (air-org-skip-subtree-if-habit)))
                                            (org-agenda-prefix-format " %l %-12t%-6s ")
                                            (org-agenda-overriding-header "Sociologie économique")))
                                (tags-todo "EcoPsycho-Project"
                                           ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("完" "取" "阻"))
                                                                           (air-org-skip-subtree-if-habit)))
                                            (org-agenda-prefix-format " %l %-12t%-6s ")
                                            (org-agenda-overriding-header "Économie et psychologie"))))
             ;; list options for block display
             ((org-agenda-remove-tags t)
              (org-agenda-view-columns-initially t)))
            ;; End of custom
            ))

    :bind 
           (([f6] . air-pop-to-org-agenda)
           ;; :map evil-normal-state-map
           ;;     ("S-SPC" . air-pop-to-org-agenda)
           :map org-agenda-mode-map
           ("j" . org-agenda-next-item)
           ("k" . org-agenda-previous-item)
           ("J" . air-org-agenda-next-header)
           ("K" . air-org-agenda-previous-header)
           ("N" . sacha/org-agenda-new)
           ("X" . sacha/org-agenda-mark-done-and-add-followup)))
 #+END_SRC
*** 完 org-journal
Although, I have been almost entirely paper-less since I started my
Master's degree, I have struggled to implement a planning workflow
(calendar, task list, etc.) that is both easy to maintain and easy to
use. After all, the litmus test of an efficient and consistent
planning workflow is daily use. The ~org-journal~ package contains a set
of functions to maintain a personal diary, using ~org-mode~ and Emacs.
For my daily planning needs, this is the package I currently use,
alongside the proverbial ~org-agenda~ and Google calendar.

Caveat: Unfortunately, I have been unable to coordinate my Emacs
workflow with my mobile phone; therefore, I sometimes require ~Todoist~
for things such as grocery shopping and recurring tasks. While you can
do all this within ~org-mode~, and I have, I am not satisfied with the
implementation so far. 

#+BEGIN_SRC emacs-lisp
  (use-package org-journal 
    :after 
    (org org-agenda)
    :init
    (defun org-journal-find-location ()
      ;; Open today's journal, but specify a non-nil prefix argument in order to
      ;; inhibit inserting the heading; org-capture will insert the heading.
      (org-journal-new-entry t)
      ;; Position point on the journal's top-level heading so that org-capture
      ;; will add the new entry as a child entry.
      (goto-char (point-min)))
    :custom
;; Set default directory to search for journal files. 
    (org-journal-dir (concat (file-name-as-directory org-directory) (format-time-string "journal/%Y")))
;; Create one journal file per month. 
    (org-journal-file-type 'monthly)
;; Change the title of journal files to the format: "YYYY_MM.gpg".
    (org-journal-file-format "%Y_%m")
;; Change the format of journal entries (org headlines) to "[Day], DD/MM/YYYY".
    (org-journal-date-format "%A, %d/%m/%Y")
;; Encrypt journal files.
    (org-journal-encrypt-journal t)
;; Don't encript individual entires in journal files. It's too cumbersome. 
    (org-journal-enable-encryption nil)
    (org-journal-enable-agenda-integration t)
    :config
;; This setup prevents slowing down agenda parsing. 
;; I create a variable to stand for the path of the journal file for the current month.  
;; Then, I have org-agenda parse only this path and not all the past journal files.
    (setq sync0-journal-this-month-file (concat (file-name-as-directory org-directory) "journal/" (format-time-string "%Y/%Y_%m") ".gpg"))
    (add-to-list 'org-agenda-files sync0-journal-this-month-file)
    :bind 
    (("C-c j" . org-journal-new-entry)))
  #+END_SRC 
*** 完 org-habits
This package is included in ~org-mode~; it simply allows the creation of
recurring tasks for use in ~org-agenda~. Although this introduces some
interesting functionality for tracking your habits, I found that I
didn't  use it consistently. I keep the configuration just in case I
change my mind someday.

Beware! There is a strange inconsistency when habits are enabled. See [[https://emacs.stackexchange.com/questions/26291/not-allowed-in-tags-type-agenda-using-custom-agenda]]

#+BEGIN_SRC emacs-lisp
  (use-package org-habit :after (org org-agenda)
    ;; :commands org-bullets-mode
    :config
    (setq org-habit-graph-column 80
          org-habit-show-habits-only-for-today nil))
  #+END_SRC 

This allow to hide certain tags in the agenda display, but include them in
the processing of agenda commands
(setq org-agenda-hide-tags-regexp "Achats\\|Doctorat\\|Habitudes\\|Téléchargements\\|Autres\\|Lectures\\|Project\\|Courriels\\|Administration\\|Projet\\|Université\\|Métier")
;;(setq org-agenda-hide-tags-regexp "noexport\\|university\\|today")

Stuck projects. 
I'm trying to setup the org-stuck-projects variable so that the "stuck
projects" agenda will list all headlines which are TODOs (any TODO keyword
except DONE) but those which don't have SCHEDULED or DEADLINE attributes
set. Currently I get an empty list with this setting for the variable:

     ;; (setq org-stuck-projects      '("TODO={.+}/-DONE" nil nil "SCHEDULED:\\|DEADLINE:"))
     ;; (setq org-stuck-projects      '("TODO={.+}/-DONE" nil nil "SCHEDULED:\\|DEADLINE:"))
*** 完 org-clock
#+BEGIN_SRC emacs-lisp
  (use-package org-clock :after (org org-agenda)
    :init
    (defun sync0-org-clock-in ()
      (interactive)
      (org-clock-in '(4)))
    :config
    ;; Set default column view headings: Task Priority Effort Clock_Summary
    ;; (setq org-columns-default-format "%TAGS %ITEM(Task) %1PRIORITY %DEADLINE %SCHEDULED %10CLOCKSUM")
    ;; (setq org-columns-default-format "%50ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM %16TIMESTAMP_IA")
    ;; (setq org-columns-default-format "%50ITEM(Task) %2PRIORITY %10Effort(Effort){:} %10CLOCKSUM")
    (setq org-columns-default-format "%1PRIORITY %2TODO %DEADLINE %60ITEM(Task) %5EFFORT(Effort){:} %5CLOCKSUM"
          org-agenda-clockreport-parameter-plist
          '(:link t :maxlevel 6 :fileskip0 t :compact t :narrow 60 :score 0)
          ;; Agenda clock report parameters
          ;; global Effort estimate values
          ;;        1    2    3    4    5    6    7    8    9    0
          ;; These are the hotkeys ^
          org-global-properties  '(("Effort_ALL" . "1:00 2:00 4:00 5:00 8:00 10:00 12:00 15:00 20:00 24:00"))
          ;; If idle for more than 15 minutes, resolve the things by asking what to do
          ;; with the clock time
          org-clock-idle-time 5
          ;; Show lot of clocking history so it's easy to pick items off the `C-c I` list
          org-clock-history-length 23
          ;; Save the running clock and all clock history when exiting Emacs, load it on startup
          org-clock-persist 'history
          ;; org-clock-persist t
          ;; Resume clocking task on clock-in if the clock is open
          org-clock-in-resume t
          ;; Do not prompt to resume an active clock, just resume it
          org-clock-persist-query-resume nil
          ;; Change tasks to whatever when clocking in
          org-clock-in-switch-to-state "中"
          ;; Save clock data and state changes and notes in the LOGBOOK drawer
          org-clock-into-drawer t
          ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks
          ;; with 0:00 duration
          org-clock-out-remove-zero-time-clocks t
          ;; Clock out when moving task to a done state
          org-clock-out-when-done t
          ;; Enable auto clock resolution for finding open clocks
          org-clock-auto-clock-resolution (quote when-no-clock-is-running)
          ;; Include current clocking task in clock reports
          org-clock-report-include-clocking-task t
          ;; use pretty things for the clocktable
          org-pretty-entities t)

    ;; Resume clocking task when emacs is restarted
    (org-clock-persistence-insinuate)

    :bind (("C-c I" . sync0-org-clock-in)
           ("C-c O" . org-clock-out)))
#+END_SRC 
*** 完 ox-latex
#+BEGIN_SRC emacs-lisp
  (use-package ox-latex :after org
    ;; :defines (org-latex-classes org-export-exclude-tags)
    :init

    (defun sync0-latex-and-beamer-export ()
      "Export current org file with beamer if it has beamer as latex class."
      (interactive)
      (when (equal major-mode 'org-mode) 
        (if (string-match "LATEX_CLASS: beamer" (buffer-string))
            (org-beamer-export-to-pdf)
          (org-latex-export-to-pdf))))
    :custom
    ;; Export references (to tables, graphics, etc.) properly, evaluating the +NAME property. 
    (org-latex-prefer-user-labels t)
    (org-latex-pdf-process (list "latexmk -lualatex -bibtex -f %f"))
    ;; export process is sent to the background
    (org-latex-listings 'minted)
    ;; set word wrap for code blocks
    (org-latex-minted-options '(("breaklines" "true")
                                ("breakanywhere" "true")))
    ;;  (org-latex-pdf-process (list "latexmk -lualatex -bibtex-cond -f %f")
    ;; (org-latex-logfiles-extensions (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl"))
    (org-export-in-background t)
    ;; select tasks (i.e., TODOs) for export
    (org-export-with-tasks '("次" "完" "無" "中" "待" "疑"))
    (org-export-date-timestamp-format "%Y/%m/%d")
    ;; Export to Microsoft Word (doc).
    (org-export-odt-preferred-output-format "doc")
    (org-odt-preferred-output-format "doc")
    (org-latex-logfiles-extensions (quote ("lof" "lot" "tex~" "idx" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "run.xml")))
    :config
    ;; (setq org-latex-logfiles-extensions (quote ("lof" "lot" "tex~" "idx" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "run.xml")))

    ;; Set tags to excluce from export. 
    (add-to-list 'org-export-exclude-tags "取")

    ;; To use KOMA-Script classes in LaTeX documents created through Org mode
    ;; export, it is necessary to explicitely add them to ~org-latex-classes~.
    ;; Moreover, this method can be used to create custom LaTeX classes.
    (add-to-list 'org-latex-classes '("scrartcl"
                                      "\\documentclass{scrartcl}"
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes '("scrreprt"
                                      "\\documentclass{scrreprt}"
                                      ("\\chapter{%s}" . "\\chapter*{%s}")
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes '("scrbook"
                                      "\\documentclass{scrbook}"
                                      ("\\part{%s}" . "\\part*{%s}")
                                      ("\\chapter{%s}" . "\\chapter*{%s}")
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes '("sync0book"
                                      "\\documentclass{scrbook}"
                                      ("\\chapter{%s}" . "\\chapter*{%s}")
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    :bind (:map org-mode-map ("M-p" . sync0-latex-and-beamer-export)))
#+END_SRC 
*** 完 org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets :after org
    :custom
    (org-bullets-bullet-list '("一" "二" "三" "四" "五"))
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC 
*** 完 org-mu4e
  This package stores org mode links to messages.
#+BEGIN_SRC emacs-lisp
  (use-package org-mu4e :after org
    :config
    ;; Store link to message if in header view, not to header query.
    (setq org-mu4e-link-query-in-headers-mode nil))
  #+END_SRC 
*** 完 ox-extra
  ;; (use-package org-plus-contrib :after org)
  ;; (use-package ox :after org)
  (use-package ox-extra :after org 
  :config
  (ox-extras-activate '(ignore-headlines)))
*** 完 org-ref 
#+BEGIN_SRC emacs-lisp
  (use-package org-ref :after (org ivy bibtex ivy-bibtex)
;;    :init 
    :custom
    (reftex-default-bibliography '("~/Dropbox/research/bibliography.bib"))
    ;; see org-ref for use of these variables
    ;; org-ref-bibliography-notes "~/Dropbox/research"
    ;; org-ref-notes-directory "~/Dropbox/research/"
    (org-ref-default-bibliography reftex-default-bibliography)
    (org-ref-pdf-directory "~/Documents/pdfs/")
    ;; org-ref-open-pdf-function 'org-ref-get-mendeley-filename
    ;; set ivy for completion
    (org-ref-completion-library 'org-ref-ivy-cite)
    (org-ref-open-pdf-function 'sync0-org-ref-open-pdf-at-point)
    ;; :config 
    ;; (setq org-ref-notes-function
    ;;       (lambda (thekey)
    ;;         (let ((bibtex-completion-bibliography (org-ref-find-bibliography)))
    ;;           (bibtex-completion-edit-notes
    ;;            (list (car (org-ref-get-bibtex-key-and-file thekey)))))))
:config
    ;; Tell org-ref to let helm-bibtex find notes for it
    ;; (setq org-ref-notes-function 'org-ref-notes-funcion-many-files)
    ;; Tell org-ref to let helm-bibtex find notes for it

    (defun sync0-org-ref-open-pdf-at-point ()
      "Open the pdf for bibtex key under point if it exists."
      (interactive)
      (let* ((results (org-ref-get-bibtex-key-and-file))
             (key (car results))
             (pdf-file (car(bibtex-completion-find-pdf key))))
        (if (file-exists-p pdf-file)
            (org-open-file pdf-file))
        (message "No PDF found for %s" key)))

    (setq org-ref-notes-function
          (lambda (thekey)
            (let ((bibtex-completion-bibliography (org-ref-find-bibliography)))
              (bibtex-completion-edit-notes
               (list (car (org-ref-get-bibtex-key-and-file thekey)))))))

    :bind (:map org-mode-map
                ("C-c ["  . org-ref-ivy-insert-cite-link)
                ;; ("C-c 9"  . org-ref-notes-function)
                ("C-c 9"  . ivy-bibtex)
                ("C-c 0"  . org-ref-open-citation-at-point)
                ("C-c 8"  . sync0-org-ref-open-pdf-at-point)
                :map bibtex-mode-map
                ;; ("C-c 9" . org-ref-open-bibtex-notes)
                ;; ("C-c 0" . ivy-bibtex)
                ("C-c 9"  . ivy-bibtex)
                ("C-c 8"  . sync0-org-ref-open-pdf-at-point)))
#+END_SRC 
*** 完 org-gcal
#+BEGIN_SRC emacs-lisp
  (use-package org-gcal :after org 
    :init
    (setq org-gcal-client-id "290464566541-1u8lseabker9nn607poqqijr3ehctk6a.apps.googleusercontent.com"
          org-gcal-client-secret "6hyt98lbk4qrK3481DwxDMos"
          org-gcal-file-alist '(("carc.sync0@gmail.com" .  "~/Dropbox/org/gcal.org")
                                ("5iudo90h5e3nabbubvsj1lov4o@group.calendar.google.com" . "~/Dropbox/org/unterrichte.org")
                                ("p9vu3a782nahsma6ud1rdg1qpc@group.calendar.google.com" . "~/Dropbox/org/ereignisse.org")
                                ("vbnn8eksqpqun2mbtdlknhh9uk@group.calendar.google.com" . "~/Dropbox/org/gewohnheiten.org")
                                ))
    :custom
    (org-gcal-auto-archive nil))
#+END_SRC 
*** 完 org-crypt
#+BEGIN_SRC emacs-lisp
  (use-package org-crypt :after org
    :custom
    (org-crypt-key "carc.sync0@gmail.com")
    (org-tags-exclude-from-inheritance (quote ("crypt")))
    :config
    (org-crypt-use-before-save-magic))
  #+END_SRC 
** 待 evil 
   #+BEGIN_SRC emacs-lisp
     (use-package evil  :after (org ivy)
       :bind (:map evil-normal-state-map
                   ("M-h" . next-buffer)
                   ("M-l" . previous-buffer)
                   ("M-2" . split-window-below)
                   ("M-3" . split-window-right)
                   ("M-o" . other-window)
                   ("/" . swiper)
                   :map minibuffer-local-map
                   ("ESC" . minibuffer-keyboard-quit)
                   :map minibuffer-local-ns-map
                   ("ESC" . minibuffer-keyboard-quit)
                   :map minibuffer-local-completion-map
                   ("ESC" . minibuffer-keyboard-quit)
                   :map minibuffer-local-must-match-map
                   ("ESC" . minibuffer-keyboard-quit)
                   :map minibuffer-local-isearch-map
                   ("ESC" . minibuffer-keyboard-quit))
       :init
       (defun sync0-insert-line-below ()
         "Insert an empty line below the current line."
         (interactive)
         (save-excursion
           (end-of-line)
           (open-line 1)))

       (defun sync0-insert-line-above ()
         "Insert an empty line above the current line."
         (interactive)
         (save-excursion
           (end-of-line 0)
           (open-line 1)))

       ;; setup functions
       (defun clever-insert-item ()
         "Clever insertion of org item."
         (if (not (org-in-item-p))
             (insert "\n")
           (org-insert-item)))

       (defun evil-org-eol-call (fun)
         "Go to end of line and call provided function. FUN function callback"
         (end-of-line)
         (funcall fun)
         (evil-append nil))

       ;; insert whitespace
       (defun sync0-insert-whitespace ()
         " Add a whitespace"
         (interactive)
         (insert " "))

       (evil-mode 1)
       :custom
       ;; turn off auto-indent 
       (evil-auto-indent nil)
       ;; Change color of evil cursor
       (evil-insert-state-cursor '(bar "#dc322f"))
       (evil-normal-state-cursor '(box "#268bd2"))
       (evil-visual-state-cursor '(box "#d33682"))
       :config
       (evil-escape-mode 1)

       (add-to-list 'evil-emacs-state-modes 'cfw:details-mode)

       ;; no input method for evil normal state
       (add-hook 'evil-normal-state-entry-hook
                 (lambda () (set-input-method 'nil)))

       ;; German 
       ;; german-postfix for evil insert mode
       ;;(add-hook 'evil-insert-state-entry-hook
       ;;(lambda () (set-input-method "german-postfix")))

       ;; key bindings
       ;; redefinition evils normal mode map
       (evil-define-key 'normal org-mode-map
         "<" 'outline-previous-visible-heading
         ">" 'outline-next-visible-heading
         (kbd "C->") 'org-forward-heading-same-level
         (kbd "C-<") 'org-backward-heading-same-level
         (kbd "<S-tab>") 'sync0-org-tree-open-in-right-frame 
         "H" 'org-metaleft
         "L" 'org-metaright
         "K" 'org-metaup
         "J" 'org-metadown
         "k" 'previous-line
         "j" 'next-line
         "U" 'undo-tree-redo
         ;; "m" 'set-mark-command
         ;; "s" 'fill-paragraph
         ;; "S" 'sync0-insert-line-below
         ;; (kbd "SPC") 'sync0-insert-whitespace
         "o" '(lambda () (interactive) (evil-org-eol-call 'clever-insert-item))
         "O" '(lambda () (interactive) (evil-org-eol-call 'org-insert-heading))
         "$" 'org-end-of-line
         "^" 'org-beginning-of-line
         "[" 'backward-sentence
         "]" 'forward-sentence
         "{" 'org-backward-paragraph
         "}" 'org-forward-paragraph
         "-" 'org-cycle-list-bullet
         (kbd "<tab>") 'org-cycle)

       (evil-define-key 'normal global-map
         "s" 'fill-paragraph
         "S" 'sync0-insert-line-below
         "zc" 'transpose-chars
         "zl" 'transpose-lines
         "zw" 'transpose-words
         "zp" 'transpose-paragraphs
         "zs" 'transpose-sentences
         (kbd "SPC") 'sync0-insert-whitespace)

       (evil-define-key 'normal LaTeX-mode-map
         "k" 'previous-line
         "j" 'next-line
         ;;  "m" 'set-mark-command
         "q" 'fill-paragraph
         "Q" 'sync0-insert-line-below
         (kbd "SPC") 'sync0-insert-whitespace
         "[" 'backward-sentence
         "]" 'forward-sentence)

       (evil-define-key 'visual LaTeX-mode-map
         "q" 'highlight-changes-remove-highlight)

       (evil-define-key 'visual org-mode-map
         "q" 'highlight-changes-remove-highlight
         "e" 'org-emphasize)

       ;; Improve EVIL behavior with visual lines
       (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
       (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
       (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
       (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)

       ;; Make horizontal movement cross lines                                    
       (setq-default evil-cross-lines t))
         #+END_SRC 
** 完 evil-escape
#+BEGIN_SRC emacs-lisp
  (use-package evil-escape :after evil
    ;; :commands evil-escape-mode
    :custom
    (evil-escape-excluded-states '(normal visual multiedit emacs motion))
    ;; (evil-escape-excluded-major-modes '(neotree-mode))
    (evil-escape-key-sequence "fd")
    (evil-escape-unordered-key-sequence t)
    (evil-escape-delay 0.25)
    :config
    ;; no `evil-escape' in minibuffer
    (push #'minibufferp evil-escape-inhibit-functions)
    :bind (:map evil-insert-state-map
                ("C-g"  . evil-escape)
                :map evil-replace-state-map
                ("C-g"  . evil-escape)
                :map evil-visual-state-map
                ("C-g"  . evil-escape)
                :map evil-operator-state-map
                ("C-g"  . evil-escape)))
#+END_SRC 
** 完 evil-multiedit
#+BEGIN_SRC emacs-lisp
  (use-package evil-multiedit :after evil
    :bind (:map evil-visual-state-map
    ;; Highlights all matches of the selection in the buffer.
    ("R" . evil-multiedit-match-all)
    ;; Match selected region.
    ("M-d" . evil-multiedit-and-next)
    ("M-D" . evil-multiedit-and-prev)
    ;; Restore the last group of multiedit regions.
    ("C-M-D"  . evil-multiedit-restore)
    :map evil-normal-state-map
    ;; Match the word under cursor (i.e. make it an edit region). Consecutive presses will
    ;; incrementally add the next unmatched match.
    ("M-d"  . evil-multiedit-match-and-next)
    :map evil-insert-state-map
    ;; Insert marker at point
    ("M-d"  . evil-multiedit-toggle-marker-here)
    :map evil-normal-state-map
    ;; Same as M-d but in reverse.
    ("M-D"  . evil-multiedit-match-and-prev)
    ;; OPTIONAL: If you prefer to grab symbols rather than words, use
    ;; `evil-multiedit-match-symbol-and-next` (or prev).
    ;; RET will toggle the region under the cursor
    :map evil-multiedit-state-map
    ("RET"  . evil-multiedit-toggle-or-restrict-region)
    ;; ...and in visual mode, RET will disable all fields outside the selected region
    ("RET"  . evil-multiedit-toggle-or-restrict-region)
    ;; For moving between edit regions
    ("C-n"  . evil-multiedit-next)
    ("C-p"  . evil-multiedit-prev)
    ("C-n"  . evil-multiedit-next)
    ("C-p"  . evil-multiedit-prev)))
  #+END_SRC 
** 完 bibtex 
#+BEGIN_SRC emacs-lisp
  (use-package bibtex
:init
    (defun sync0-bibtex-autokey-get-year ()
      "Return year field contents as a string obeying `bibtex-autokey-year-length'."
      (let ((yearfield (bibtex-autokey-get-field "date")))
        (substring yearfield (max 0 (- (length yearfield)
                                       bibtex-autokey-year-length)))))

    (defun sync0-bibtex-generate-autokey ()
      "This overwrites the bibtex-generate-autokey function that comes with Emacs.
        I want my keys to be formatted: authornameYEAR, then a letter
        if there is already an entry that matches authornameYEAR."
      (interactive)
      (let* ((names (bibtex-autokey-get-names))
             (year (sync0-bibtex-autokey-get-year))
             (existing-keys (bibtex-parse-keys)) key)
        (setq key (format "%s%s" names year))
        (let ((ret key))
          (cl-loop for c
                   from ?a to ?z
                   while (assoc ret existing-keys)
                   do (setq ret (format "%s%c" key c)))
          ret)))
:custom
    (bibtex-dialect 'biblatex) ;; biblatex as default bib format
          (bibtex-maintain-sorted-entries t)
          (bibtex-field-delimiters 'braces)
          (bibtex-entry-delimiters 'braces)
          (bibtex-comma-after-last-field t)
          (bibtex-align-at-equal-sign t)
          (bibtex-text-indentation 0)
          (bibtex-autokey-names 1)
          (bibtex-autokey-names-stretch 1)
          (bibtex-autokey-additional-names " et al")
          (bibtex-autokey-name-separator "_")
          (bibtex-autokey-name-year-separator "")
          (bibtex-autokey-name-length t)
          (bibtex-autokey-year-title-separator "")
          (bibtex-autokey-titleword-length 0)
          (bibtex-autokey-year-length 4)
          (bibtex-autokey-titleword-case-convert "uppercase")
          (bibtex-autokey-titlewords 0)
          (bibtex-entry-format '(opts-or-alts required-fields numerical-fields page-dashes whitespace braces last-comma delimiters sort-fields))
    :config
    (setq bibtex-BibTeX-entry-alist '(
                                      ("Article" "Article in Journal"
                                       ("author")
                                       ("date")
                                       ("title" "Title of the article (BibTeX converts it to lowercase)")
                                       ("subtitle" "Title of the article (BibTeX converts it to lowercase)")
                                       ("journaltitle")
                                       ("journalsubtitle")
                                       ("volume" "Volume of the journal")
                                       ("number" "Number of the journal (only allowed if entry contains volume)")
                                       ("issue" "Issue in the journal")
                                       ("pages" "Pages in the journal")
                                       ("url" "Pages in the journal")
                                       ("urldate" "Pages in the journal")
                                       ("doi" "Pages in the journal")
                                       ("library" "Pages in the journal")
                                       ("language" "Pages in the journal")
                                       ("langid" "Pages in the journal")
                                       ("langidopts" "Pages in the journal")
                                       ("file" "Pages in the journal")
                                       ("addendum" "Pages in the journal")
                                       ("keywords"))
                                      ("InProceedings" "Article in Conference Proceedings"
                                       ("author")
                                       ("date")
                                       ("title" "Title of the article (BibTeX converts it to lowercase)")
                                       ("subtitle" "Title of the article (BibTeX converts it to lowercase)")
                                       ("crossref")
                                       ("booktitle" "Name of the conference proceedings")
                                       ("booksubtitle" "Name of the conference proceedings")
                                       ("organization")
                                       ("eventdate")
                                       ("eventtitle")
                                       ("venue")
                                       ("series")
                                       ("volume" "Volume of the conference proceedings in the series")
                                       ("number" "Number of the conference proceedings in a small series (overwritten by volume)")
                                       ("pages" "Pages in the conference proceedings")
                                       ("edition" "Pages in the conference proceedings")
                                       ("publisher" "Publishing company, its location")
                                       ("editor" "Publishing company, its location")
                                       ("translator" "Publishing company, its location")
                                       ("location" "Publishing company, its location")
                                       ("url" "Publishing company, its location")
                                       ("urldate" "Publishing company, its location")
                                       ("doi" "Pages in the journal")
                                       ("library" "Pages in the journal")
                                       ("language" "Pages in the journal")
                                       ("langid" "Pages in the journal")
                                       ("langidopts" "Pages in the journal")
                                       ("file" "Pages in the journal")
                                       ("addendum")
                                       ("keywords"))
                                      ("InCollection" "Article in a Collection"
                                       (("author")
                                        ("title" "Title of the article (BibTeX converts it to lowercase)"))
                                       (("subtitle" "Title of the article (BibTeX converts it to lowercase)")
                                        ("date")
                                        ("crossref" "Title of the article (BibTeX converts it to lowercase)")
                                        ("booktitle" "Name of the conference proceedings")
                                        ("booksubtitle" "Name of the conference proceedings")
                                        ("series")
                                        ("volume" "Volume of the conference proceedings in the series")
                                        ("number" "Number of the conference proceedings in a small series (overwritten by volume)")
                                        ("chapter" "Number of the conference proceedings in a small series (overwritten by volume)")
                                        ("pages" "Pages in the conference proceedings")
                                        ("edition" "Publishing company, its location")
                                        ("publisher" "Publishing company, its location")
                                        ("editor" "Publishing company, its location")
                                        ("translator" "Publishing company, its location")
                                        ("location" "Publishing company, its location")
                                        ("url" "Publishing company, its location")
                                        ("urldate" "Publishing company, its location")
                                        ("doi" "Pages in the journal")
                                        ("library" "Pages in the journal")
                                        ("language" "Pages in the journal")
                                        ("langid" "Pages in the journal")
                                        ("langidopts" "Pages in the journal")
                                        ("file" "Pages in the journal")
                                        ("addendum")
                                        ("keywords")))
                                      ("InBook" "Chapter or Pages in a Book"
                                       (("title" "Title of the article (BibTeX converts it to lowercase)"))
                                       (("author")
                                        ("subtitle" "Title of the article (BibTeX converts it to lowercase)")
                                        ("date")
                                        ("origdate")
                                        ("origtitle")
                                        ("crossref" "Title of the article (BibTeX converts it to lowercase)")
                                        ("booktitle" "Name of the conference proceedings")
                                        ("booksubtitle" "Name of the conference proceedings")
                                        ("series")
                                        ("volume" "Volume of the conference proceedings in the series")
                                        ("number" "Number of the conference proceedings in a small series (overwritten by volume)")
                                        ("chapter" "Number of the conference proceedings in a small series (overwritten by volume)")
                                        ("pages" "Pages in the conference proceedings")
                                        ("edition" "Publishing company, its location")
                                        ("publisher" "Publishing company, its location")
                                        ("editor" "Publishing company, its location")
                                        ("translator" "Publishing company, its location")
                                        ("location" "Publishing company, its location")
                                        ("url" "Publishing company, its location")
                                        ("urldate" "Publishing company, its location")
                                        ("doi" "Pages in the journal")
                                        ("library" "Pages in the journal")
                                        ("language" "Pages in the journal")
                                        ("langid" "Pages in the journal")
                                        ("langidopts" "Pages in the journal")
                                        ("file" "Pages in the journal")
                                        ("addendum")
                                        ("keywords")))
                                      ("Proceedings" "Conference Proceedings"
                                       ("title" "Title of the conference proceedings")
                                       ("date")
                                       nil
                                       ("booktitle" "Title of the proceedings for cross references")
                                       ("editor")
                                       ("volume" "Volume of the conference proceedings in the series")
                                       ("number" "Number of the conference proceedings in a small series (overwritten by volume)")
                                       ("series" "Series in which the conference proceedings appeared")
                                       ("address")
                                       ("month")
                                       ("organization" "Sponsoring organization of the conference")
                                       ("publisher" "Publishing company, its location")
                                       ("note"))
                                      ("Book" "Book"
                                       ("author")
                                       ("date")
                                       ("origdate")
                                       ("origtitle")
                                       ("title" "Title of the article (BibTeX converts it to lowercase)")
                                       ("subtitle" "Title of the article (BibTeX converts it to lowercase)")
                                       ("booktitle" "Name of the conference proceedings")
                                       ("booksubtitle" "Name of the conference proceedings")
                                       ("series")
                                       ("volume" "Volume of the conference proceedings in the series")
                                       ("number" "Number of the conference proceedings in a small series (overwritten by volume)")
                                       ("edition" "Publishing company, its location")
                                       ("publisher" "Publishing company, its location")
                                       ("editor" "Publishing company, its location")
                                       ("translator" "Publishing company, its location")
                                       ("location" "Publishing company, its location")
                                       ("url" "Publishing company, its location")
                                       ("urldate" "Publishing company, its location")
                                       ("doi" "Pages in the journal")
                                       ("library" "Pages in the journal")
                                       ("isbn" "Pages in the journal")
                                       ("origlanguage" "Pages in the journal")
                                       ("language" "Pages in the journal")
                                       ("langid" "Pages in the journal")
                                       ("langidopts" "Pages in the journal")
                                       ("file" "Pages in the journal")
                                       ("addendum")
                                       ("keywords"))
                                      ("Unpublished" "Unpublished"
                                       ("author")
                                       ("date")
                                       ("title" "Title of the article (BibTeX converts it to lowercase)")
                                       ("subtitle" "Title of the article (BibTeX converts it to lowercase)")
                                       ("type" "Title of the article (BibTeX converts it to lowercase)")
                                       ("eventdate" "Title of the article (BibTeX converts it to lowercase)")
                                       ("eventtitle" "Title of the article (BibTeX converts it to lowercase)")
                                       ("venue" "Title of the article (BibTeX converts it to lowercase)")
                                       ("location" "Title of the article (BibTeX converts it to lowercase)")
                                       ("url" "Publishing company, its location")
                                       ("urldate" "Publishing company, its location")
                                       ("doi" "Pages in the journal")
                                       ("library" "Pages in the journal")
                                       ("origlanguage" "Pages in the journal")
                                       ("language" "Pages in the journal")
                                       ("langid" "Pages in the journal")
                                       ("langidopts" "Pages in the journal")
                                       ("file" "Pages in the journal")
                                       ("addendum")
                                       ("keywords"))
                                      ("Misc" "Miscellaneous" nil nil
                                       (("title" "Title of the article (BibTeX converts it to lowercase)"))
                                       (("author")
                                        ("date")
                                        ("subtitle" "Title of the article (BibTeX converts it to lowercase)")
                                        ("organization" "Title of the article (BibTeX converts it to lowercase)")
                                        ("type" "Title of the article (BibTeX converts it to lowercase)")
                                        ("version" "Title of the article (BibTeX converts it to lowercase)")
                                        ("location" "Title of the article (BibTeX converts it to lowercase)")
                                        ("url" "Publishing company, its location")
                                        ("urldate" "Publishing company, its location")
                                        ("doi" "Pages in the journal")
                                        ("library" "Pages in the journal")
                                        ("origlanguage" "Pages in the journal")
                                        ("language" "Pages in the journal")
                                        ("langid" "Pages in the journal")
                                        ("langidopts" "Pages in the journal")
                                        ("file" "Pages in the journal")
                                        ("addendum")
                                        ("keywords"))))))
  #+END_SRC 
** 完 ivy-bibtex
#+BEGIN_SRC emacs-lisp
  (use-package ivy-bibtex :after (org ivy bibtex)
    :custom 
    (bibtex-completion-bibliography '("~/Dropbox/research/bibliography.bib")) ;; writing completion
    (bibtex-completion-notes-path '"~/Dropbox/research")
    (bibtex-completion-library-path '("~/Dropbox/research/"))
    (bibtex-completion-pdf-field "file")
    (bibtex-completion-pdf-symbol "⌘")
    (bibtex-completion-notes-symbol "✎")
    (bibtex-completion-notes-template-multiple-files  
     "#+STARTUP: indent nostars logdrawer content
  ,#+TITLE: ${title}
  ,#+CREATOR: ${=key=}
  ,#+AUTHOR: ${author-or-editor}
  ,#+INTERLEAVE_PDF: ${file}
  ,#+SETUPFILE: \"~/Dropbox/typography/article_two_column.org\" 
  ,#+INCLUDE: \"~/Dropbox/typography/layouts.org::*Research: Two Column\" :only-contents t
  ,#+INCLUDE: \"~/Dropbox/typography/settings.org::*English\" :only-contents t

  ,#+BEGIN_modified
  fullcite:${=key=}
  \\tcblower
  Last modified: 
  ,#+END_modified


  # \\printbibliography[title=bibliographie,heading=subbibliography]
  # \\printbibliography[title=references]
  # \\printbibliography[title=bibliographie]")
    (ivy-bibtex-default-action 'ivy-bibtex-edit-notes))
#+END_SRC 
** 無 yasnippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet :defer t 
  :commands (yas-minor-mode) ; autoload `yasnippet' when `yas-minor-mode' is called
                                        ; using any means: via a hook or by user
                                        ; Feel free to add more commands to this
                                        ; list to suit your needs.
  :init ; stuff to do before requiring the package
  :config ; stuff to do after requiring the package
(progn
    (yas-reload-all)
;; annoying warning
(add-to-list 'warning-suppress-types '(yasnippet backquote-change)))
:hook ((LaTeX-mode . yas-minor-mode)
(org-mode . yas-minor-mode)
(mu4e-mode . yas-minor-mode)
(bibtex-mode . yas-minor-mode)))
#+END_SRC
** 完 anzu
#+BEGIN_SRC emacs-lisp
  (use-package anzu  
    :config 
    (global-anzu-mode))
#+END_SRC 
** 完 smooth-scrolling
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling 
    :custom
    (smooth-scroll-margin 5)
    :config
    (smooth-scrolling-mode 1))
#+END_SRC      
*** change behavior of org movent
#+BEGIN_SRC emacs-lisp
;(setq org-special-ctrl-a/e t)
#+END_SRC 
*** useful scrolling things
#+BEGIN_SRC emacs-lisp
(defun gcm-scroll-down ()
   (interactive)
   (scroll-up 1))

(global-set-key (kbd "M-j") 'gcm-scroll-down)

(defun gcm-scroll-up ()
   (interactive)
   (scroll-down 1))

(global-set-key (kbd "M-k") 'gcm-scroll-up)
#+END_SRC 
** 完 hl-line mode
#+BEGIN_SRC emacs-lisp
  (use-package hl-line 
    :hook ((text-mode conf-mode) . hl-line-mode)
    :custom
    ;; I don't need hl-line showing in other windows. This also offers a small
    ;; speed boost when buffer is displayed in multiple windows.
    (hl-line-sticky-flag nil)
    (global-hl-line-sticky-flag nil))
#+END_SRC 
** 完 smartparens 
#+BEGIN_SRC emacs-lisp
  ;; Auto-close delimiters and blocks as you type
  (use-package smartparens
    :hook (emacs-startup . smartparens-global-mode)
    :init
    (defun sp-latex-insert-spaces-inside-pair (_id action _context)
      "ID, ACTION, CONTEXT."
      (when (eq action 'insert)
        (insert "  ")
        (backward-char 1))
      (when (and (eq action 'wrap)
                 (save-excursion
                   (goto-char (sp-get sp-last-wrapped-region :beg-in))
                   (not (sp--looking-back-p "[[{(]"))))
        (save-excursion
          (goto-char (sp-get sp-last-wrapped-region :end-in))
          (insert " ")
          (goto-char (sp-get sp-last-wrapped-region :beg-in))
          (insert " "))))

    (defun sp-latex-skip-match-apostrophe (ms _mb me)
      "MS, MB, ME."
      (when (equal ms "'")
        (save-excursion
          (goto-char me)
          (looking-at-p "\\sw"))))

    (defun sp-latex-skip-double-quote (_id action _context)
      "ID, ACTION, CONTEXT."
      (when (eq action 'insert)
        (when (looking-at-p "''''")
          (delete-char -2)
          (delete-char 2)
          (forward-char 2))))

    (defun sp-latex-point-after-backslash (id action _context)
      "Return t if point follows a backslash, nil otherwise.
    This predicate is only tested on \"insert\" action.
    ID, ACTION, CONTEXT."
      (when (eq action 'insert)
        (let ((trigger (sp-get-pair id :trigger)))
          (looking-back (concat "\\\\" (regexp-quote (if trigger trigger id))) nil))))
    :custom
    (sp-autowrap-region nil) ; let evil-surround handle this
    (sp-highlight-pair-overlay nil)
    (sp-cancel-autoskip-on-backward-movement nil)
    (sp-show-pair-delay 0)
    (sp-max-pair-length 3)
    :config
    (require 'smartparens-config)

    ;; Add custom pairs
    ;; (require 'smartparens-latex)

    (add-to-list 'sp-navigate-skip-match
                 '((tex-mode plain-tex-mode latex-mode) . sp--backslash-skip-match))

    (sp-with-modes '(tex-mode
                     org-mode
                     plain-tex-mode
                     latex-mode
                     LaTeX-mode)

      (sp-local-pair "`" "'"
                     ;; :actions '(:rem autoskip)
                     ;; :skip-match 'sp-latex-skip-match-apostrophe
                     :unless '(sp-latex-point-after-backslash))

      ;; math modes, yay.  The :actions are provided automatically if
      ;; these pairs do not have global definitions.

      (sp-local-pair "$" "$")
      (sp-local-pair "\\[" "\\]"
                     :unless '(sp-latex-point-after-backslash))

      ;; disable useless pairs.
      (sp-local-pair "\\\\(" nil :actions nil)
      (sp-local-pair "'" nil :actions nil)
      (sp-local-pair "\\\"" nil :actions nil)

      ;; quote should insert ``'' instead of double quotes.  If we ever
      ;; need to insert ", C-q is our friend.
      ;; (sp-local-pair "``" "''"
      ;;                :trigger "\""
      ;;                :unless '(sp-latex-point-after-backslash)
      ;;                :post-handlers '(sp-latex-skip-double-quote))

      ;; add the prefix function sticking to {} pair
      (sp-local-pair "{" nil :prefix "\\\\\\(\\sw\\|\\s_\\)*")

      ;; do not add more space when slurping
      (sp-local-pair "{" "}")
      (sp-local-pair "(" ")")
      (sp-local-pair "[" "]")

      ;; pairs for big brackets.  Needs more research on what pairs are
      ;; useful to add here.  Post suggestions if you know some.
      (sp-local-pair "\\left(" "\\right)"
                     :trigger "\\l("
                     :when '(sp-in-math-p)
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\left[" "\\right]"
                     :trigger "\\l["
                     :when '(sp-in-math-p)
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\left\\{" "\\right\\}"
                     :trigger "\\l{"
                     :when '(sp-in-math-p)
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\left|" "\\right|"
                     :trigger "\\l|"
                     :when '(sp-in-math-p)
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\bigl(" "\\bigr)"
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\biggl(" "\\biggr)"
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\Bigl(" "\\Bigr)"
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\Biggl(" "\\Biggr)"
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\bigl[" "\\bigr]"
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\biggl[" "\\biggr]"
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\Bigl[" "\\Bigr]"
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\Biggl[" "\\Biggr]"
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\bigl\\{" "\\bigr\\}"
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\biggl\\{" "\\biggr\\}"
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\Bigl\\{" "\\Bigr\\}"
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\Biggl\\{" "\\Biggr\\}"
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\lfloor" "\\rfloor"
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\lceil" "\\rceil"
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair "\\langle" "\\rangle"
                     :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair  "\\lVert" "\\rVert"
                      :when '(sp-in-math-p)
                      :trigger "\\lVert"
                      :post-handlers '(sp-latex-insert-spaces-inside-pair))
      (sp-local-pair  "\\lvert" "\\rvert"
                      :when '(sp-in-math-p)
                      :trigger "\\lvert"
                      :post-handlers '(sp-latex-insert-spaces-inside-pair)))

    ;; some common wrappings
    ;; (sp-local-tag "\"" "``" "''" :actions '(wrap)))

    ;; disable smartparens in evil-mode's replace state (they conflict)
    (add-hook 'evil-replace-state-entry-hook #'turn-off-smartparens-mode)
    (add-hook 'evil-replace-state-exit-hook  #'turn-on-smartparens-mode)

    (defhydra hydra-learn-sp (:hint nil)
      "
        _B_ backward-sexp            -----
        _F_ forward-sexp               _s_ splice-sexp
        _L_ backward-down-sexp         _df_ splice-sexp-killing-forward
        _H_ backward-up-sexp           _db_ splice-sexp-killing-backward
      ^^------                         _da_ splice-sexp-killing-around
        _k_ down-sexp                -----
        _j_ up-sexp                    _C-s_ select-next-thing-exchange
      -^^-----                         _C-p_ select-previous-thing
        _n_ next-sexp                  _C-n_ select-next-thing
        _p_ previous-sexp            -----
        _a_ beginning-of-sexp          _C-f_ forward-symbol
        _z_ end-of-sexp                _C-b_ backward-symbol
      --^^-                          -----
        _t_ transpose-sexp             _c_ convolute-sexp
      -^^--                            _g_ absorb-sexp
        _x_ delete-char                _q_ emit-sexp
        _dw_ kill-word               -----
        _dd_ kill-sexp                 _,b_ extract-before-sexp
      -^^--                            _,a_ extract-after-sexp
        _S_ unwrap-sexp              -----
      -^^--                            _AP_ add-to-previous-sexp
        _C-h_ forward-slurp-sexp       _AN_ add-to-next-sexp
        _C-l_ forward-barf-sexp      -----
        _C-S-h_ backward-slurp-sexp    _ join-sexp
        _C-S-l_ backward-barf-sexp     _|_ split-sexp
      "
      ;; TODO: Use () and [] - + * | <space>
      ("B" sp-backward-sexp );; similiar to VIM b
      ("F" sp-forward-sexp );; similar to VIM f
      ;;
      ("L" sp-backward-down-sexp )
      ("H" sp-backward-up-sexp )
      ;;
      ("k" sp-down-sexp ) ; root - towards the root
      ("j" sp-up-sexp )
      ;;
      ("n" sp-next-sexp )
      ("p" sp-previous-sexp )
      ;; a..z
      ("a" sp-beginning-of-sexp )
      ("z" sp-end-of-sexp )
      ;;
      ("t" sp-transpose-sexp )
      ;;
      ("x" sp-delete-char )
      ("dw" sp-kill-word )
      ;;("ds" sp-kill-symbol ) ;; Prefer kill-sexp
      ("dd" sp-kill-sexp )
      ;;("yy" sp-copy-sexp ) ;; Don't like it. Pref visual selection
      ;;
      ("S" sp-unwrap-sexp ) ;; Strip!
      ;;("wh" sp-backward-unwrap-sexp ) ;; Too similar to above
      ;;
      ("C-h" sp-forward-slurp-sexp )
      ("C-l" sp-forward-barf-sexp )
      ("C-S-h" sp-backward-slurp-sexp )
      ("C-S-l" sp-backward-barf-sexp )
      ;;
      ;;("C-[" (bind (sp-wrap-with-pair "[")) ) ;;FIXME
      ;;("C-(" (bind (sp-wrap-with-pair "(")) )
      ;;
      ("s" sp-splice-sexp )
      ("df" sp-splice-sexp-killing-forward )
      ("db" sp-splice-sexp-killing-backward )
      ("da" sp-splice-sexp-killing-around )
      ;;
      ("C-s" sp-select-next-thing-exchange )
      ("C-p" sp-select-previous-thing )
      ("C-n" sp-select-next-thing )
      ;;
      ("C-f" sp-forward-symbol )
      ("C-b" sp-backward-symbol )
      ;;
      ;;("C-t" sp-prefix-tag-object)
      ;;("H-p" sp-prefix-pair-object)
      ("c" sp-convolute-sexp )
      ("g" sp-absorb-sexp )
      ("q" sp-emit-sexp )
      ;;
      (",b" sp-extract-before-sexp )
      (",a" sp-extract-after-sexp )
      ;;
      ("AP" sp-add-to-previous-sexp );; Difference to slurp?
      ("AN" sp-add-to-next-sexp )
      ;;
      ("_" sp-join-sexp ) ;;Good
      ("|" sp-split-sexp )) 

    :bind (("M-g M-p" . hydra-learn-sp/body)))
  #+END_SRC 
** 完 magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind
    ;; bind a quick and dirty shortcut to 
    (("C-x g" . magit-status)
     ;;  bind the popup of popus
     ("C-x M-g" . magit-dispatch)))
  #+END_SRC 
** 完 calendar & holidays
#+BEGIN_SRC emacs-lisp
  (use-package calendar 
    :custom
    (calendar-date-style 'european) 
          (european-calendar-style t)
          (calendar-week-start-day 0)    ; week starts on monday
          (calendar-day-name-array     ["Dimanche" "Lundi" "Mardi" "Mercredi" "Jeudi" "Vendredi" "Samedi"])
          (calendar-day-abbrev-array   ["dim" "lun" "mar" "mer" "jeu" "ven" "sam"])
          (calendar-month-name-array   ["Janvier" "Février" "Mars" "Avril" "Mai" "Juin" "Juillet"
                                       "Août" "Septembre" "Octobre" "Novembre" "Décembre"])
          (calendar-month-abbrev-array ["jan" "fév" "mar" "avr" "mai" "jun" "jul" "aoû" "sep" "oct" "nov" "déc"]))

    (use-package holidays :after calendar
      :custom
      (calendar-holidays
            '((holiday-easter-etc 0 "Pâques")
              (holiday-easter-etc 1 "Lundi de Pâques")
              (holiday-easter-etc 39 "Ascension")
              (holiday-easter-etc 49 "Pentecôte")
              (holiday-easter-etc -47 "Mardi gras"))))

#+END_SRC 
** 完 calfw
#+BEGIN_SRC emacs-lisp
(use-package calfw :after calendar
:init
(require 'calfw-org)
;;(require 'calfw-gcal)
;;(require 'calfw-cal)
(defun my-open-calendar ()
    (interactive)
    (let ((buf (get-buffer "*cfw-calendar*")))
      (if buf
          (pop-to-buffer buf nil)
        (cfw:open-calendar-buffer
         :contents-sources
         (list (cfw:org-create-source "#c0c5ce")) :view 'week))))
:custom
  (cfw:fchar-junction ?╋)
    (cfw:fchar-vertical-line ?┃)
        (cfw:fchar-horizontal-line ?━)
        (cfw:fchar-left-junction ?┣)
        (cfw:fchar-right-junction ?┫)
        (cfw:fchar-top-junction ?┯)
        (cfw:fchar-top-left-corner ?┏)
        (cfw:fchar-top-right-corner ?┓)
:bind
(("<f7>" . my-open-calendar)
 ;; ("<f7>" . cfw:open-org-calendar)
:map cfw:details-mode-map
("SPC"  . cfw:details-kill-buffer-command)))
#+END_SRC 
** 完 alert (Growl) 
#+BEGIN_SRC emacs-lisp
(use-package alert :load-path "~/.emacs.d/sync0_git/alert" :defer t)
#+END_SRC 
** 完 powerline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :if window-system
    :config (setq-default powerline-default-separator 'nil))
  #+END_SRC 
** Foreign languages
*** Foreign language setup
#+BEGIN_SRC emacs-lisp
    ;; (defun sync0-toggle-off-input-method ()
    ;;   (interactive)
    ;;   (if current-input-method (deactivate-input-method)))
    (defvar sync0-language-active 
      "Is a human language minor mode enabled?")

    (setq sync0-language-active nil)
    ;; (setq sync0-languages-list '(french english spanish))
    ;; (setq default-input-method nil)
    ;; (setq sync0-language-modes-list '(rabelais orwell marquez))

  ;;   (defun sync0-toggle-input-method ()
  ;;     (unless (or (equal sync0-language-active "english")
  ;; (equal sync0-language-active nil)) 
  ;; (set-input-method default-input-method)))

  ;;   (defun sync0-toggle-input-method ()
  ;;     (unless (equal sync0-language-active nil))
  ;; (activate-input-method default-input-method)))

  ;; add-hook 'evil-insert-state-entry-hook 

    ;; (defun sync0-toggle-input-method ()
    ;;   (unless (equal default-input-method nil) (activate-input-method default-input-method)))
    ;; (defun sync0-deactivate-input-method ()
    ;;   (unless (equal default-input-method nil) (activate-input-method nil)))
      ;; (unless (equal default-input-method nil) (deactivate-input-method)))


    ;; (add-hook 'evil-replace-state-entry-hook 'toggle-input-method)
    ;; (add-hook 'evil-insert-state-entry-hook (lambda () (set-input-method default-input-method)))
    ;; (add-hook 'evil-replace-state-entry-hook (lambda () (set-input-method default-input-method)))

    ;; (add-hook 'evil-replace-state-exit-hook 'deactivate-input-method)
  #+END_SRC 
*** Rabelais-mode
#+BEGIN_SRC emacs-lisp
  (define-minor-mode rabelais-mode
    "Minor mode for editing French text."
    ;; The initial value.
    :init-value nil
    ;; The indicator for the mode line.
    :lighter " rabelais"
    ;; Make it a global minor mode. 
    :global  t
    (cond 
     ((equal sync0-language-active "spanish")
      (progn 
        (marquez-mode -1)
         (remove-hook 'evil-insert-state-entry-hook (lambda () (set-input-method "spanish-postfix")))
         (setq sync0-language-active "french"
               local-abbrev-table rabelais-mode-abbrev-table)
         (add-hook 'evil-insert-state-entry-hook (lambda () (set-input-method "french-postfix")))
         (add-hook 'evil-insert-state-exit-hook (lambda () (set-input-method nil)))
         (flyspell-mode 1) 
         (ispell-change-dictionary "fr_FR")
         (add-to-list 'minor-mode-alist '(rabelais-mode " rabelais"))
         (abbrev-mode 1)
        (message "Marquez mode deactivated. Rabelais mode now active")))
     ((equal sync0-language-active "english")
      (progn 
        (orwell-mode -1)
         (remove-hook 'evil-insert-state-entry-hook (lambda () (set-input-method nil)))
         (setq sync0-language-active "french"
               local-abbrev-table rabelais-mode-abbrev-table)
         (add-hook 'evil-insert-state-entry-hook (lambda () (set-input-method "french-postfix")))
         (add-hook 'evil-insert-state-exit-hook (lambda () (set-input-method nil)))
         (flyspell-mode 1) 
         (ispell-change-dictionary "fr_FR")
         (add-to-list 'minor-mode-alist '(rabelais-mode " rabelais"))
         (abbrev-mode 1)
        (message "Orwell mode deactivated. Rabelais mode now active")))
  ((or (equal sync0-language-active nil)
       (equal sync0-language-active "french"))
         (setq sync0-language-active "french"
               local-abbrev-table rabelais-mode-abbrev-table)
         (add-hook 'evil-insert-state-entry-hook (lambda () (set-input-method "french-postfix")))
         (add-hook 'evil-insert-state-exit-hook (lambda () (set-input-method nil)))
         (flyspell-mode 1) 
         (ispell-change-dictionary "fr_FR")
         (add-to-list 'minor-mode-alist '(rabelais-mode " rabelais"))
         (abbrev-mode 1))))
  #+END_SRC 
*** Orwell-mode
#+BEGIN_SRC emacs-lisp
  (define-minor-mode orwell-mode
    "Minor mode for editing French text."
    ;; The initial value.
    :init-value nil
    ;; The indicator for the mode line.
    :lighter " orwell"
    ;; Make it a global minor mode. 
    :global  t
    (cond 
     ((equal sync0-language-active "spanish")
      (progn 
        (marquez-mode -1)
         (remove-hook 'evil-insert-state-entry-hook (lambda () (set-input-method "spanish-postfix")))
         (setq sync0-language-active "english"
               local-abbrev-table orwell-mode-abbrev-table)
         (add-hook 'evil-insert-state-entry-hook (lambda () (set-input-method nil)))
         (add-hook 'evil-insert-state-exit-hook (lambda () (set-input-method nil)))
         (flyspell-mode 1) 
         (ispell-change-dictionary "en_US-large")
         (add-to-list 'minor-mode-alist '(orwell-mode " orwell"))
         (abbrev-mode 1)
        (message "Marquez mode deactivated. Orwell mode now active")))
     ((equal sync0-language-active "french")
      (progn 
        (rabelais-mode -1)
         (remove-hook 'evil-insert-state-entry-hook (lambda () (set-input-method "french-postfix")))
         (setq sync0-language-active "english"
               local-abbrev-table orwell-mode-abbrev-table)
         (add-hook 'evil-insert-state-entry-hook (lambda () (set-input-method nil)))
         (add-hook 'evil-insert-state-exit-hook (lambda () (set-input-method nil)))
         (flyspell-mode 1) 
         (ispell-change-dictionary "en_US-large")
         (add-to-list 'minor-mode-alist '(orwell-mode " orwell"))
         (abbrev-mode 1)
        (message "Rabelais mode deactivated. Orwell mode now active")))
  ((or (equal sync0-language-active nil)
       (equal sync0-language-active "english"))
         (setq sync0-language-active "english"
               local-abbrev-table orwell-mode-abbrev-table)
         (add-hook 'evil-insert-state-entry-hook (lambda () (set-input-method nil)))
         (add-hook 'evil-insert-state-exit-hook (lambda () (set-input-method nil)))
         (flyspell-mode 1) 
         (ispell-change-dictionary "en_US-large")
         (add-to-list 'minor-mode-alist '(orwell-mode " orwell"))
         (abbrev-mode 1))))
  #+END_SRC 
*** Marquez-mode
#+BEGIN_SRC emacs-lisp
  (define-minor-mode marquez-mode
    "Minor mode for editing French text."
    ;; The initial value.
    :init-value nil
    ;; The indicator for the mode line.
    :lighter " marquez"
    ;; Make it a global minor mode. 
    :global  t
    (cond 
     ((equal sync0-language-active "english")
      (progn 
        (orwell-mode -1)
         (remove-hook 'evil-insert-state-entry-hook (lambda () (set-input-method nil)))
         (setq sync0-language-active "spanish"
               local-abbrev-table marquez-mode-abbrev-table)
         (add-hook 'evil-insert-state-entry-hook (lambda () (set-input-method "spanish-postfix")))
         (add-hook 'evil-insert-state-exit-hook (lambda () (set-input-method nil)))
         (flyspell-mode 1) 
         (ispell-change-dictionary "es_ANY")
         (add-to-list 'minor-mode-alist '(marquez-mode " marquez"))
         (abbrev-mode 1)
        (message "Orwell mode deactivated. Marquez mode now active")))
     ((equal sync0-language-active "french")
      (progn 
        (rabelais-mode -1)
         (remove-hook 'evil-insert-state-entry-hook (lambda () (set-input-method "french-postfix")))
         (setq sync0-language-active "spanish"
               local-abbrev-table marquez-mode-abbrev-table)
         (add-hook 'evil-insert-state-entry-hook (lambda () (set-input-method "spanish-postfix")))
         (add-hook 'evil-insert-state-exit-hook (lambda () (set-input-method nil)))
         (flyspell-mode 1) 
         (ispell-change-dictionary "es_ANY")
         (add-to-list 'minor-mode-alist '(marquez-mode " marquez"))
         (abbrev-mode 1)
        (message "Rabelais mode deactivated. Marquez mode now active")))
  ((or (equal sync0-language-active nil)
       (equal sync0-language-active "spanish"))
         (setq sync0-language-active "spanish"
               local-abbrev-table marquez-mode-abbrev-table)
         (add-hook 'evil-insert-state-entry-hook (lambda () (set-input-method "spanish-postfix")))
         (add-hook 'evil-insert-state-exit-hook (lambda () (set-input-method nil)))
         (flyspell-mode 1) 
         (ispell-change-dictionary "es_ANY")
         (add-to-list 'minor-mode-alist '(marquez-mode " marquez"))
         (abbrev-mode 1))))
  #+END_SRC 
** 完 hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    ;; In case I later need to wrap defhydra in any special functionality.
    :custom
    (lv-use-seperator t))
#+END_SRC 
** 完 git-gutter 
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter :after hydra 
    :commands git-gutter-mode
    :hook (text-mode . git-gutter-mode)
    :custom
    ;; (git-gutter:window-width 1)
    (git-gutter:modified-sign " ") 
    (git-gutter:added-sign " ")    
    (git-gutter:deleted-sign " ")
    :config
    ;; (setq-default left-fringe-width  10)
    ;; (setq-default right-fringe-width 10)

    ;;(set-face-background 'git-gutter:modified "orange") ;; background color
    (set-face-background 'git-gutter:modified "#3a81c3") ;; background color
    ;;(set-face-background 'git-gutter:added "green")
    (set-face-background 'git-gutter:added "#7ccd7c")
    ;; (set-face-attribute  'git-gutter:added nil :foreground "black")
    ;;(set-face-background 'git-gutter:deleted "red")
    (set-face-background 'git-gutter:deleted "ee6363")
    ;;  (set-face-attribute  'git-gutter:deleted nil :foreground "black")

    (defhydra hydra-git-gutter
      (:body-pre (git-gutter-mode 1) :hint nil)
      "
                                                             ╭─────────────────┐
                          Movement   Hunk Actions     Misc.  │ gg: +%-4s(car (git-gutter:statistic))/ -%-3s(cdr (git-gutter:statistic)) │
                          ╭──────────────────────────────────┴─────────────────╯
                             ^_g_^       [_s_] stage        [_R_] set start Rev
                             ^_k_^       [_r_] revert
                             ^↑ ^      [_m_] mark
                             ^↓ ^      [_p_] popup          ╭──────────────────────
                             ^_j_^                          │[_q_] quit
                             ^_G_^                          │[_Q_] Quit and disable"
      ("j" (progn (git-gutter:next-hunk 1) (recenter)))
      ("k" (progn (git-gutter:previous-hunk 1) (recenter)))
      ("g" (progn (goto-char (point-min)) (git-gutter:next-hunk 1)))
      ("G" (progn (goto-char (point-min)) (git-gutter:previous-hunk 1)))
      ("s" git-gutter:stage-hunk)
      ("r" git-gutter:revert-hunk)
      ("m" git-gutter:mark-hunk)
      ("p" git-gutter:popup-hunk)
      ("R" git-gutter:set-start-revision)
      ("q" nil :color blue)
      ("Q" (git-gutter-mode -1) :color blue))

    :bind (("M-g M-g" . hydra-git-gutter/body)))
  #+END_SRC 
** 完 git-time-machine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :commands (git-timemachine git-timemachine-toggle)
    :custom
    (git-timemachine-show-minibuffer-details nil)
    :config
    (require 'magit-blame)

    ;; Sometimes I forget `git-timemachine' is enabled in a buffer, so instead of
    ;; showing revision details in the minibuffer, show them in
    ;; `header-line-format', which has better visibility.

    ;; (add-hook 'git-timemachine-mode-hook #'+vcs|init-header-line)
    ;; (advice-add #'git-timemachine-show-revision :after #'+vcs*update-header-line)

    ;; Force evil to rehash keybindings for the current state
    (add-hook 'git-timemachine-mode-hook #'evil-force-normal-state))
  #+END_SRC 
** 無 Mu
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
      (load-file "~/.emacs.d/mu4econfig.el")
  #+END_SRC 
** 完 ediff
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :custom
    ;; No separate frame for ediff control buffer
    (ediff-window-setup-function #'ediff-setup-windows-plain)
    ;; Split windows horizontally in ediff (instead of vertically)
    (ediff-split-window-function #'split-window-vertically))
  #+END_SRC 
** 完 festival
#+BEGIN_SRC emacs-lisp
  (use-package festival :load-path "~/.emacs.d/sync0/" 
:commands say-minor-mode
:functions festival-send-command
    :config
    (autoload 'say-minor-mode "festival" "Menu for using Festival." t)
    (say-minor-mode t)

    (defun sync0-festival-el () 
      (interactive)
      (festival-send-command '(voice_el_diphone)))

    (defun sync0-festival-english-male () 
      (interactive)
      (festival-send-command '(voice_nitech_us_awb_arctic_hts)))

    (defun sync0-festival-english-female () 
      (interactive)
      (festival-send-command '(voice_nitech_us_slt_arctic_hts)))

    :bind (("M-r" . festival-say-region)))
  #+END_SRC 
** 完 desktop-save mode
#+BEGIN_SRC emacs-lisp
  ;; (use-package desktop
  ;;   :custom
  ;;   (desktop-auto-save-timeout 300)
  ;;   (desktop-restore-reuses-frames nil)
  ;; :config
  ;;   (desktop-save-mode 1))
  #+END_SRC 
** 完 saveplace
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :config 
    (setq-default save-place t))
  #+END_SRC 
** 完 pdf-tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :pin manual ;; manually update
    :custom
     ;; automatically annotate highlights
     (pdf-annot-activate-created-annotations t)
     ;; more fine-grained zooming
     (pdf-view-resize-factor 1.1)
     (pdf-view-midnight-colors '("#C0C5CE" . "#4F5B66" ))
    :config
    ;; initialise
    (pdf-tools-install)
    ;; open pdfs scaled to fit page
    (setq-default pdf-view-display-size 'fit-page)

    ;; change midnite mode colours functions
    (defun bms/pdf-midnite-original ()
      "Set pdf-view-midnight-colors to original colours."
      (interactive)
      (setq pdf-view-midnight-colors '("#839496" . "#002b36" )) ; original values
      (pdf-view-midnight-minor-mode))

    (defun sync0-pdf-view-dark-colors ()
      "Set pdf-view-midnight-colors to amber on dark slate blue."
      (interactive)
      (setq pdf-view-midnight-colors '("#C0C5CE" . "#4F5B66" )) ; amber
      (pdf-view-midnight-minor-mode))

    ;; Use dark mode. 
    (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)

:bind (:map pdf-view-mode-map
    ("C-s" . isearch-forward)
    ("j" . pdf-view-scroll-up-or-next-page)
    ("J" . pdf-view-next-page-command)
    ;; ("j" . pdf-view-next-line-or-next-page)
    ("k" . pdf-view-scroll-down-or-previous-page)
    ("K" . pdf-view-previous-page-command)
    ("h" . pdf-annot-add-highlight-markup-annotation)
    ("t" . pdf-annot-add-text-annotation)
    ("g" . pdf-view-first-page)
    ("G" . pdf-view-last-page)
    ("D" . pdf-view-dark-minor-mode)
    ("D" . pdf-annot-delete)))
  #+END_SRC 
** 完 docview
#+BEGIN_SRC emacs-lisp
  (use-package doc-view 
    :custom
    (doc-view-continuous t)
    :bind (:map doc-view-mode-map
    ("q" . quit-window)
    ("+" . doc-view-enlarge)
    ("=" . doc-view-enlarge)
    ("-" . doc-view-shrink)
    ("0" . doc-view-scale-reset)
    ("G" . doc-view-last-page)
    ("g" . doc-view-goto-page)
    ("K" . doc-view-previous-page)
    ("J" . doc-view-next-page)
    ("k" . doc-view-scroll-down-or-previous-page)
    ("j" . doc-view-scroll-up-or-next-page)
    ("W" . doc-view-fit-width-to-window)
    ("H" . doc-view-fit-height-to-window)
    ("P" . doc-view-fit-page-to-window)
    ("X" . doc-view-kill-proc)
    ("s s" . doc-view-set-slice)
    ("s m" . doc-view-set-slice-using-mouse)
    ("s b" . doc-view-set-slice-from-bounding-box)
    ("s r" . doc-view-reset-slice)
    ("/" . doc-view-search)
    ("?" . doc-view-search-backward)))
  #+END_SRC 
** 完 sentence-highlight
#+BEGIN_SRC emacs-lisp
  (use-package sentence-highlight :load-path "~/.emacs.d/sync0/" 
    :after cycle-themes
    :commands sentence-highlight-mode
    :init
    (defun sync0-change-sentence-highlight-color ()
      "Change the sentence hightlight color based on the doom-theme enabled." 
      (when (boundp 'cycle-themes-last-theme-set)
        (if (equal cycle-themes-last-theme-set 'doom-spacegrey)
            ;; solarized-light
            (set-face-foreground 'sentence-highlight-face "#ECBE7B")
          ;; space-grey
          (set-face-foreground 'sentence-highlight-face "#b48ead"))))
    :config 
    (set-face-foreground 'sentence-highlight-face "#002b36")
    (add-hook 'cycle-themes-after-cycle-hook #'sync0-change-sentence-highlight-color))
  #+END_SRC 
* 無 Custom Tweaks
** Sync0 hydras
#+BEGIN_SRC emacs-lisp
 (defhydra hydra-org-clock (:color blue :hint nil)
   "
Clock   In/out^     ^Edit^   ^Summary     (_?_)
-----------------------------------------
        _i_n         _e_dit   _g_oto entry
        _c_ontinue   _q_uit   _d_isplay
        _o_ut        ^ ^      _r_eport
      "
   ("i" org-clock-in)
   ("p" sync0-org-clock-in)
   ("o" org-clock-out)
   ("c" org-clock-in-last)
   ("e" org-clock-modify-effort-estimate)
   ("q" org-clock-cancel)
   ("g" org-clock-goto)
   ("d" org-clock-display)
   ("r" org-clock-report)
   ("?" (org-info "Clocking commands")))

 (bind-key "C-c w" 'hydra-org-clock/body)
  #+END_SRC 
** Definitions
#+BEGIN_SRC emacs-lisp
(setq sync0-english-parts-speech '("noun" "intransitive verb" "transitive verb" "verb" "conjunction" "adjective" "adverb"))
(setq sync0-french-parts-speech '("nom féminin" "nom masculin" "verbe intransitif" "verbe transitif" "verbe" "conjonction" "adjectif" "adverbe"))
  #+END_SRC 
** Date
#+BEGIN_SRC emacs-lisp
  (defun insert-current-day () 
    (insert (shell-command-to-string "echo -n $(date +%d)")))

  (defun insert-current-moth () 
    (insert (shell-command-to-string "echo -n $(date +%B)")))

  (defun sync0-insert-today-timestamp () 
  "Insert today's date in the YYYY/MM/DD format"
    (insert (shell-command-to-string "echo -n $(date +'%Y/%m/%d')")))

(defun sync0-insert-dates ()
  "insert a bunch of dates"
  (interactive)
  (let* ((month 4)
         (day 1)
         (time (encode-time 1 1 0 day month 2019)))
    (while (= (nth 4 (decode-time time)) month)
      (insert (concat "** " (format-time-string "%d/%m/%Y \n" time)))
      (setq day (1+ day))
      (setq time (encode-time 1 1 0 day month 2019)))))

(defun sync0-insert-weeks ()
  "insert a bunch of weeks"
  (interactive)
  (let* ((weeky 1))
    (while (< weeky 32)
      (insert (format  "** \ordinalnum{%s} Week \n" weeky))
      (setq weeky (1+ weeky)))))

;; Some functions for sync0-journal

  (defun sync0-journal-today-headline () 
  "Insert a headline with today's date in the DD/MM/YYYY format"
  (interactive)
  (insert
   (concat "** [/] " (shell-command-to-string "echo -n $(date +'%A')") " (" (shell-command-to-string "echo -n $(date +'%d/%m/%Y')") ")")))

  (defun sync0-journal-weekly-evaluation () 
  "Insert a headline with today's date in the DD/MM/YYYY format"
  (interactive)
  (insert
   (concat "** [/] Weekly Evaluation " "(" (shell-command-to-string "echo -n $(date +'%d/%m/%Y')") ")")))
#+END_SRC 
** Automatic abbrevs integration with ispell
#+BEGIN_SRC emacs-lisp
;;(define-key ctl-x-map "\C-i"
  ;;#'endless/ispell-word-then-abbrev)

(defun endless/simple-get-word ()
  (car-safe (save-excursion (ispell-get-word nil))))

(defun endless/ispell-word-then-abbrev ()
  "Call `ispell-word', then create an abbrev for it.
With prefix P, create local abbrev. Otherwise it will
be global.
If there's nothing wrong with the word at point, keep
looking for a typo until the beginning of buffer. You can
skip typos you don't want to fix with `SPC', and you can
abort completely with `C-g'."
  (interactive)
  (let (bef aft)
    (save-excursion
      (while (if (setq bef (endless/simple-get-word))
                 ;; Word was corrected or used quit.
                 (if (ispell-word nil 'quiet)
                     nil ; End the loop.
                   ;; Also end if we reach `bob'.
                   (not (bobp)))
               ;; If there's no word at point, keep looking
               ;; until `bob'.
               (not (bobp)))
        (backward-word)
        (backward-char))
      (setq aft (endless/simple-get-word)))
    (if (and aft bef (not (equal aft bef)))
        (let ((aft (downcase aft))
              (bef (downcase bef)))
          (define-abbrev local-abbrev-table bef aft)
          (message "\"%s\" now expands to \"%s\" %sally"
                   bef aft "loc"))
      (user-error "No typo at or before point"))))

;; set a faster shortcut
(define-key global-map (kbd "M-i") 'endless/ispell-word-then-abbrev)
#+END_SRC 
** Dictionary look up
#+BEGIN_SRC emacs-lisp
  (autoload 'ispell-get-word "ispell")

  (defun sync0-lookup-word (word)
    "Search an online dictionary for the word at point according
    to the active language minor mode."
            (interactive (list (save-excursion (car (ispell-get-word nil)))))
    (cond  ((bound-and-true-p orwell-mode) 
            (browse-url (format "https://www.merriam-webster.com/dictionary/%s" word)))
           ((bound-and-true-p rabelais-mode) 
            (browse-url (format "https://larousse.fr/dictionnaires/francais/%s" word)))
           (t "No language minor mode specified")))

  (defun sync0-lookup-conjugation (word)
    "Search an online dictionary for the word at point according
    to the active language minor mode."
            (interactive (list (save-excursion (car (ispell-get-word nil)))))
    (cond  ((bound-and-true-p orwell-mode) 
            (browse-url (format "https://www.merriam-webster.com/dictionary/%s" word)))
           ((bound-and-true-p rabelais-mode) 
            (browse-url (format "http://la-conjugaison.nouvelobs.com/du/verbe/%s.php" word)))
           (t "No language minor mode specified")))

  (global-set-key (kbd "M-#") 'sync0-lookup-word)
  (global-set-key (kbd "M-$") 'sync0-lookup-conjugation)
  #+END_SRC 
** Yasnippet quote 
#+BEGIN_SRC emacs-lisp
  (defun sync0-print-bibtex-key ()
    "Print the bibtex key of the document"
    (save-excursion 
      (goto-char (point-min))
      (when 
          (re-search-forward "#\\+CREATOR: \\([[:alnum:]]+\\)" nil t 1)
        (match-string 1))))

  (defun sync0-print-bibtex-key-two ()
    "Print the bibtex key of the document"
    (if (progn (save-excursion 
                 (goto-char (point-min))
                 (re-search-forward "#\\+CREATOR: \\([[:alnum:]]+\\)" nil t 1)))
        (match-string 1)
      (progn (save-excursion
               (when 
                   (re-search-backward "cite\\[.*\\]{\\(.+\\)}" nil t 1)
                 (match-string 1))))))

  (defun sync0-last-cited-page ()
    "Search for the page cited in the last quote environment"
    (save-excursion
      (if (search-backward "#+BEGIN_QUOTE" nil t 2)
          (let ((match (progn (re-search-forward "p\. [0-9]+" nil nil 1)
                              (match-string 0))))
            (substring match 3))
        (print "1"))))

  (defun sync0-last-cited-page-two ()
    "Search for the page cited in the last quote environment"
    (interactive)
    (save-excursion
      (if
          (search-backward "cite" nil nil 2)
          (let ((match (progn (re-search-forward "p\. [0-9]+" nil nil 1)
                              (match-string 0))))
            (substring match 3))
        (print "1"))))

  (defun sync0-last-cited-page-three ()
    "Search for the page cited in the last quote environment"
    (save-excursion
      (when
          (re-search-backward "cite\\[\\([0-9]+\\)\\]" nil t 1)
        (match-string 1))))

  (defun sync0-last-cited-author ()
    "Search for the page cited in the last quote environment"
    (save-excursion
      (when 
          (re-search-backward "cite\\[.*\\]{\\(.+\\)}" nil t 1)
        (match-string 1))))
  #+END_SRC 
** Yasnippet authors
#+BEGIN_SRC emacs-lisp
    (defun sync0-bibtex-extract-editors ()
    "Extract the author or editor from entry as string"
    (interactive)
    (save-excursion
        (re-search-backward "^editor")
        (search-forward "= ")
        (let* ((authorstring (progn (looking-at "{.+}")(match-string 0)))
              (firstlast (substring authorstring 1 -1)))
          (if  (string-match "and" firstlast)
               (let* ((authors (split-string firstlast "and"))
                 (f_lastname (let* ((first (nth 0 authors))
                            (twoparts (split-string first ",")))
                            (nth 0 twoparts)))
                 (s_lastname (let* ((first (nth 1 authors))
                            (twoparts (split-string first ",")))
                            (nth 0 twoparts))))
        (message "%s,%s" f_lastname s_lastname))
            (let* ((twoparts (split-string firstlast ","))
                   (lastname  (elt twoparts 0)))
        (message "%s" lastname))))))

    (defun sync0-bibtex-extract-lastnames ()
    "Extract the author or editor from entry as string"
    (interactive)
    (save-excursion
        (re-search-backward "^author")
        (search-forward "= ")
        (let* ((authorstring (progn (looking-at "{.+}")(match-string 0)))
              (firstlast (substring authorstring 1 -1)))
          (if  (string-match "and" firstlast)
               (let* ((authors (split-string firstlast "and"))
                 (f_lastname (let* ((first (nth 0 authors))
                            (twoparts (split-string first ",")))
                            (nth 0 twoparts)))
                 (s_lastname (let* ((first (nth 1 authors))
                            (twoparts (split-string first ",")))
                            (nth 0 twoparts))))
        (message "%s,%s" f_lastname s_lastname))
            (let* ((twoparts (split-string firstlast ","))
                   (lastname  (elt twoparts 0)))
        (message "%s" lastname))))))


  (defun sync0-bibtex-extract-editors-lowercase ()
    "Extract the author or editor from entry as string"
    (interactive)
    (save-excursion
      (re-search-backward "^editor")
      (search-forward "= ")
      (let* ((authorstring (progn (looking-at "{.+}")(match-string 0)))
             (firstlast (substring authorstring 1 -1)))
        (if  (string-match "and" firstlast)
            (let* ((authors (split-string firstlast "and"))
                   (f_author (let* ((first (nth 0 authors))
                                      (twoparts (split-string first ","))
                                      (lastname (nth 0 twoparts))
                                      (firstnamespace (nth 1 twoparts))
                                      (firstname (substring firstnamespace 1 -1))
                                      (downlastname  (downcase lastname))
                                      (downfirstname  (downcase firstname)))
                                 (message "%s-%s" downlastname downfirstname)))
                   (s_author (let* ((first (nth 1 authors))
                                      (twoparts (split-string first ","))
                                 (lastnamespace (nth 0 twoparts))
                                 (firstnamespace (nth 1 twoparts))
                                 (lastname (substring lastnamespace 1))
                                 (firstname (substring firstnamespace 1))
                                 (downlastname  (downcase lastname))
                                 (downfirstname  (downcase firstname)))
                                 (message "%s-%s" downlastname downfirstname))))
                            (message "%s, %s" f_author s_author))
          (let* ((twoparts (split-string firstlast ","))
                 (lastname  (elt twoparts 0))
                 (firstnamespace  (elt twoparts 1))
                 (firstname (substring firstnamespace 1))
                 (downlastname  (downcase lastname))
                 (downfirstname  (downcase firstname)))
            (message "%s-%s" downlastname downfirstname))))))

  (defun sync0-bibtex-extract-lastnames-lowercase ()
    "Extract the author or editor from entry as string"
    (interactive)
    (save-excursion
      (re-search-backward "^author")
      (search-forward "= ")
      (let* ((authorstring (progn (looking-at "{.+}")(match-string 0)))
             (firstlast (substring authorstring 1 -1)))
        (if  (string-match "and" firstlast)
            (let* ((authors (split-string firstlast "and"))
                   (f_author (let* ((first (nth 0 authors))
                                      (twoparts (split-string first ","))
                                      (lastname (nth 0 twoparts))
                                      (firstnamespace (nth 1 twoparts))
                                      (firstname (substring firstnamespace 1 -1))
                                      (downlastname  (downcase lastname))
                                      (downfirstname  (downcase firstname)))
                                 (message "%s-%s" downlastname downfirstname)))
                   (s_author (let* ((first (nth 1 authors))
                                      (twoparts (split-string first ","))
                                 (lastnamespace (nth 0 twoparts))
                                 (firstnamespace (nth 1 twoparts))
                                 (lastname (substring lastnamespace 1))
                                 (firstname (substring firstnamespace 1))
                                 (downlastname  (downcase lastname))
                                 (downfirstname  (downcase firstname)))
                                 (message "%s-%s" downlastname downfirstname))))
                            (message "%s, %s" f_author s_author))
          (let* ((twoparts (split-string firstlast ","))
                 (lastname  (elt twoparts 0))
                 (firstnamespace  (elt twoparts 1))
                 (firstname (substring firstnamespace 1))
                 (downlastname  (downcase lastname))
                 (downfirstname  (downcase firstname)))
            (message "%s-%s" downlastname downfirstname))))))


            (setq sync0-bibtex-types '("Manual" "Patent" "Report" "Thesis" "Article" "Paper"))

            (setq sync0-bibtex-simon-arkseries '("Personal Pappers (1929-1979)" "Schoolwork and Early Career (1929-1943)" "Illinois Institute of Technology (1942-1949)" "RAND Corporation (1949-1973)" "Carnegie Mellon University (1948-2001)" "Consulting (1942-2000)" "Lectures and Talks (1951-2000)" "Publications (1949-2000)" "Correspondence (1940-2001)" "Dissertations (1956-1999)" "Awards (1958-1998)" "Miscellaneous (1942-2003)"))
  #+END_SRC 
** Sync0 bibtex
#+BEGIN_SRC emacs-lisp
        (defun sync0-bibtex-next-key ()
        "Print the bibtex key of the document"
        (interactive)
        (let ((bibtex-key (re-search-forward "@.+{" nil nil 1)))
          (goto-char bibtex-key)))

  (defun sync0-bibtex-previous-key ()
    "Print the bibtex key of the document"
    (interactive)
    (let ((bibtex-key (re-search-backward "@.+{" nil nil 2)))
      (goto-char bibtex-key)
      (re-search-forward "@.+{" nil nil 1)))

    (with-eval-after-load 'evil
                             (evil-define-key 'normal bibtex-mode-map
                               "K" 'sync0-bibtex-previous-key
                               "J" 'sync0-bibtex-next-key))

(defvar sync0-bibtex-reference-keys
  (lazy-completion-table sync0-bibtex-reference-keys
                         (lambda () (sync0-bibtex-parse-keys nil t)))
  "Completion table for BibTeX reference keys.
The CDRs of the elements are t for header keys and nil for crossref keys.")

(defun sync0-bibtex-parse-keys (&optional abortable verbose)
  "Set `bibtex-reference-keys' to the keys used in the whole buffer.
Find both entry keys and crossref entries.  If ABORTABLE is non-nil abort
on user input.  If VERBOSE is non-nil give messages about progress.
Return alist of keys if parsing was completed, `aborted' otherwise.
If `bibtex-parse-keys-fast' is non-nil, use fast but simplified algorithm
for parsing BibTeX keys.  If parsing fails, try to set this variable to nil."
  (if (eq major-mode 'bibtex-mode)
      (let (ref-keys crossref-keys)
        (save-excursion
          (save-match-data
            (if verbose
                (bibtex-progress-message
                 (concat (buffer-name) ": parsing reference keys")))
            (catch 'userkey
              (goto-char (point-min))
              (if bibtex-parse-keys-fast
                  (let ((case-fold-search t)
                        (re (concat bibtex-entry-head "\\|"
                                    ",[ \t\n]*crossref[ \t\n]*=[ \t\n]*"
                                    "\\(\"[^\"]*\"\\|{[^}]*}\\)[ \t\n]*[,})]")))
                    (while (re-search-forward re nil t)
                      (if (and abortable (input-pending-p))
                          ;; user has aborted by typing a key: return `aborted'
                          (throw 'userkey 'aborted))
                      (cond ((match-end 3)
                             ;; This is a crossref.
                             (let ((key (buffer-substring-no-properties
                                         (1+ (match-beginning 3)) (1- (match-end 3)))))
                               (unless (assoc key crossref-keys)
                                 (push (list key) crossref-keys))))
                            ;; only keys of known entries
                            ((assoc-string (bibtex-type-in-head)
                                           bibtex-entry-alist t)
                             ;; This is an entry.
                             (let ((key (bibtex-key-in-head)))
                               (unless (assoc key ref-keys)
                                 (push (cons key t) ref-keys)))))))

                (let (;; ignore @String entries because they are handled
                      ;; separately by `bibtex-parse-strings'
                      (bibtex-sort-ignore-string-entries t)
                      bounds)
                  (bibtex-map-entries
                   (lambda (key _beg end)
                     (if (and abortable
                              (input-pending-p))
                         ;; user has aborted by typing a key: return `aborted'
                         (throw 'userkey 'aborted))
                     (if verbose (bibtex-progress-message))
                     (unless (assoc key ref-keys)
                       (push (cons key t) ref-keys))
                     (if (and (setq bounds (bibtex-search-forward-field "crossref" end))
                              (setq key (bibtex-text-in-field-bounds bounds t))
                              (not (assoc key crossref-keys)))
                         (push (list key) crossref-keys))))))

              (dolist (key crossref-keys)
                (unless (assoc (car key) ref-keys) (push key ref-keys)))
              (if verbose
                  (bibtex-progress-message 'done))
              ;; successful operation --> return `bibtex-reference-keys'
              (setq bibtex-reference-keys ref-keys)))))))


(defun sync0-ivy-bibtex ()
  (interactive)
  (setq ivy-bibtex-default-action 'ivy-bibtex-insert-key)
  (bibtex-completion-init)
  (let* ((candidates (bibtex-completion-candidates))
         (key (bibtex-completion-key-at-point))
         (preselect (and key
                         (cl-position-if (lambda (cand)
                                           (member (cons "=key=" key)
                                                   (cdr cand)))
                                         candidates))))
    (ivy-read "BibTeX entries%s: "
              candidates
              :preselect preselect
              :caller 'ivy-bibtex
              :action ivy-bibtex-default-action)))
  #+END_SRC 
** Exportable time stamps
#+BEGIN_SRC emacs-lisp
  (defun sync0-update-timestamp ()
    "Update current #+DATE timestamp"
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (let ((regex "[0-9][0-9][0-9][0-9]\/[0-9][0-9]\/[0-9][0-9]")
            (date (shell-command-to-string "echo -n $(date +'%Y/%m/%d')")))
        ;; (when (search-forward "#+DATE:" nil nil 1)
        ;;   (if (progn (forward-char 1)(looking-at regex))
        ;;       (replace-match date)
        ;;     (sync0-insert-today-timestamp)))
        (when (search-forward "Last modified:" nil nil 1)
          (if (progn (forward-char 1)(looking-at regex))
              (replace-match date)
            (sync0-insert-today-timestamp))))))

  (add-hook 'before-save-hook (lambda ()
                                (when (and (eq major-mode 'org-mode)
                                           (not (equal buffer-file-name "/home/sync0/Dropbox/research/forschungsbuch.org"))
                                           (equal default-directory "/home/sync0/Dropbox/research/"))
                                  (sync0-update-timestamp))))
  #+END_SRC 
** Auto update Org Modified Property
#+BEGIN_SRC emacs-lisp
        (defun yant/getentryhash ()
        "Get the hash sum of the text in current entry, except :HASH: and :MODIFIED: property texts."
        (save-excursion
          (let* ((beg (point-min))
             (end (point-max))
             (full-str (buffer-substring beg end))
             (str-nohash (if (string-match "^ *:HASH:.+\n" full-str)
                     (replace-match "" nil nil full-str)
                   full-str))
             (str-nohash-nomod (if (string-match "^ *:MODIFIED:.+\n" str-nohash)
                       (replace-match "" nil nil str-nohash)
                         str-nohash))
             (str-nohash-nomod-nopropbeg (if (string-match "^ *:PROPERTIES:\n" str-nohash-nomod)
                             (replace-match "" nil nil str-nohash-nomod)
                           str-nohash-nomod))
             (str-nohash-nomod-nopropbeg-end (if (string-match "^ *:END:\n" str-nohash-nomod-nopropbeg)
                                 (replace-match "" nil nil str-nohash-nomod-nopropbeg)
                               str-nohash-nomod-nopropbeg)))
            (sxhash str-nohash-nomod-nopropbeg-end))))

      (defun yant/update-modification-time ()
        "Set the :MODIFIED: property of the current entry to '%Y/%m/%d' and update :HASH: property."
  (save-excursion
  (goto-char (point-min))
  (progn
  (unless (looking-at "\* .+")
  (org-forward-heading-same-level (point)))
        (org-set-property "HASH" (format "%s" (yant/getentryhash)))    
        (org-set-property "MODIFIED" (format-time-string "%Y/%m/%d")))))
  #+END_SRC 
** Useful Key Bindings
 #+BEGIN_SRC emacs-lisp
;; Kill current buffer and window
 (define-key global-map (kbd "M-q") 'kill-buffer-and-window)
;; Font size change
 (define-key global-map (kbd "C-=") 'text-scale-increase)
 (define-key global-map (kbd "C--") 'text-scale-decrease)
;; Cycle through buffers
 (global-set-key (kbd "<C-tab>") 'bury-buffer)
;; Quickly save
 (global-set-key "\M-w" 'save-buffer)
;; Quickly work with bookmarks
  (global-set-key (kbd "M-m") 'bookmark-set)
 #+END_SRC
 
