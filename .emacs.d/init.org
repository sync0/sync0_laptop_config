# Created 2019-11-16 Sat 20:41
#+TITLE: Emacs Settings
#+AUTHOR: sync0
#+startup: indent showeverything nostars

#+property: header-args :tangle yes

* 完 Introduction
This is my Emacs configuration file. As the sloppy code herein attests, I
am not a proficient programmer. I use Emacs primarily for taking notes and
writing academic articles, so these settings reflect that usage. Yes.

The functions prefixed by ~sync0~ are not necessarily my creations; this
is just the placeholder I use to distinguish them from Emacs and other
packages' native functions. I would like to credit the authors of all
borrowed functions, but I don't do this consistently because writing
such precise documention is too time consuming.

Since I am such a lousy programmer, many parts of this configuration
have been borrowed from more proficient programmers. Although I am
trying hard to tidy up the documentation for this file, my limited
programming literacy prevents me from better explaining the
functioning of borrowed code sections. Therefore, in certain packages
that I rarely use, there are vast passages of orphan and undocumented
code. Furthermore, since writing documentation is so time consuming, I
don't update it frequently.

Should you have any suggestions for improving the code, I would greatly
appreciate if you sent me an email. 
** 無 For Tyros
Emacs is too complex; accept that you will never learn /all/ of it.

I suggest you learn enough Emacs for your daily needs, and then begin
from there. I have been using Emacs for years, and I still learn
something new whenever I take the time to check what other users are
doing with their setup. Once, it even happened that I asked an Emacs
related question on a forum, and a twenty-plus-year Emacs veteran was
surprised to see my discussion of a useful, but little known function
that he had never heard of. As you could glance from the introduction
to this file, I am not a programmer, and my coding skills are very
limited. As an academic historian, my needs differ from those of most
Emacs users, and this very specific usage reflects on my
configuration. Briefly, my advice to you, oh tyro, is: Learn the Emacs
you need, learn from those better than you, and remember that each
user's configuration is very personal and reflects their specific
needs.

One thing I could never like about vanilla Emacs is its lack of
usability. Some users might disagree, but I believe that if it wasn't
for its extensibility, Emacs would be inferior to the competition. As
a treat to tyros, I have tried to highlight those packages that I
consider an absolute must: Without these, Emacs would drive me crazy.

In my honest opinion, no matter what you do with Emacs, you should
have the following installed:

- ~org~ (the reason I started using Emacs).
- ~evil~ (yes! Vim keybindings are way better)
- ~doom-themes~ (vanilla Emacs is just too ugly.)
- ~doom-modeline~ (looks good with doom-themes)
- ~counsel~ (improved versions of useful commands)
- ~ivy~ (completion frontend. Alternatively, you could use ~helm~)
- ~hydra~ (the only sane method for dealing with keybindings in Emacs.)
- ~saveplace~ (good luck finding your way around files otherwise)
- ~smooth-scrolling~ (yeah; default scrolling is /that/ bad.)
- ~rainbow-delimiters~ (good luck editing those pesky parentheses otherwise)
- ~smartparens~ (same as above)
- ~pdf-tools~ (not a must, but comes in handy sometimes)
- ~google-this~ (not a must, but since everyone uses google these days,
  why not?)

** 完 Organization
I configure Emacs with a single file: ~init.org~. This is the file you
are reading. The only thing not included in this file are snippets,
Github packages, and the like. Those you have to find yourself, but,
where possible, I have tried to provide links. 
** 完 Tips
Before presenting the code, I have compiled a few tips that you might find
useful for setting up Emacs: 

- In Org mode, ~<s + tab~ creates a code block. To make it executable,
  add the words ~emacs-lisp~ to the first line, right after ~#+BEGIN_SRC~.
- The location for hunspell dictionaries should be in /usr/share/hunspell.
  Otherwise, an error arises that I have been unable to solve, even
  when declaring the path.
* 完 Configuration
Some of the settings in this part are necessary to load Emacs packages, so
they must be placed in the beginning of the configuration file. Some others
do not require this position, but I have included them here for ease of
finding.

This code sets up tangling to byte-compile the /init.org/ file
automatically on save. Byte compiling this file speeds up Emacs on
startup. Likewise, when byte-compiling, Emacs displays whether there are
any errors or warnings, which simplifies debugging. 

#+begin_src emacs-lisp
  ;; (setq org-export-show-temporary-export-buffer nil)

  (defun sync0-export-tangle ()
    "Shortcut for exporting and tangling the current org-mode buffer."
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "sync0_emacs.org")))
      (org-org-export-to-org)
      (let ((contents (with-current-buffer (find-file-noselect "sync0_emacs.org.org") (buffer-string))))
        (with-temp-file "init.org"
          (insert contents)
          (org-babel-tangle-file "init.org" "init.el")))))

  (defun sync0-export-tangle ()
    "Shortcut for exporting and tangling the current org-mode buffer."
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "sync0_emacs.org")))
      (let* ((temp-file-name (org-org-export-to-org))
             (temp-buffer-contents (with-temp-file temp-file-name (buffer-string))))
        (with-temp-file "init.org"
          (insert temp-buffer-contents)
          ;; Avoid running hooks when tangling.
          (let ((prog-mode-hook nil))
            (org-babel-tangle-file "init.org" "init.el"))))))

  ;; (defun sync0-byte-compile-init ()
  ;;   (progn
  ;;     (sync0-export-tangle)
  ;;     (byte-compile-file (concat user-emacs-directory "init.el"))))

  (add-hook 'after-save-hook 'sync0-export-tangle)
  ;; (add-hook 'after-save-hook 'sync0-byte-compile-init)
  ;; (remove-hook 'after-save-hook 'sync0-byte-compile-init)
#+end_src

** 完 Package management
These settings configure Emacs package manager and the package
 repositories.

#+begin_src emacs-lisp
  ;; Load latest versions of all packages. 
  ;; List packages that will not be loaded. 
  ;; Set this variable before calling (package-initialize)
  (setq package-load-list '(all
                            ;; (projectile nil)
                            (desktop-save-mode nil)
                            (solaire-mode nil)
                            (sublimity-mode nil)
                            (which-key-mode nil)
                            (org-bullets-mode nil)
                            (company-mode nil)))

  ;; Do not check package signatures when installing new packages. 
  (setq package-check-signature nil)

  ;; Initialize Emac's package manager.
  (package-initialize)

  ;; Set up the package repositories.
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  ;;     (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
#+end_src

[[https://github.com/jwiegley][jwiegley's]] ~use-package~ macro simplifies package configuration in the ~.emacs~
startup file for faster startup and easier organization. Since I use
a single org-mode file for configuring Emacs, ~use-package~ provides a
nice way to keep everything organized. 

The alternative way to organize your Emacs configuration is by having
separate ~whatever-package.el~ files, and calling them when needed.
Although many seasoned users continue organizing their configurations
this way, I find it too cumbersome to be worth the trouble. The only
reason I can think for keeping to the old way is if you want to have
your configuration rely on the least number of external dependencies
or if your single configuration file cannot be handled by your current
machine.

Remember that the ~:disabled~ keyword only disables the use-package
configuration. If you want to prevent a package from loading, it is
necessary to add it, as in ~(unwanted-package nil)~, to the list
~package-load-list~. See above for the code. 

#+begin_src emacs-lisp
  ;; Verify that "use-package" is installed.
  (unless (package-installed-p 'use-package)
    ;; Refresh contents of package list.
    (package-refresh-contents)
    ;; Install "use-package".
    (package-install 'use-package))

  (setq use-package-verbose t)

  ;; Activate "use-package". 
  (require 'use-package)
  ;; Allow mode line shortening of package names.
  (require 'diminish)
  ;; Necessary to allow use-package to bind keys through ":bind" keyword.
  (require 'bind-key)
#+end_src

See https://www.reddit.com/r/emacs/comments/cdei4p/failed_to_download_gnu_archive_bad_request/
#+begin_src emacs-lisp
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+end_src
** 完 Scratch message
The following code changes the Emacs welcome message in the ~scratch~
buffer. I use a fragment from the chapter "Where I Lived, and What I Lived
for" from Thoreau's /Walden, or, Life in the Woods/ (1854). 

#+begin_src emacs-lisp
  (setq initial-scratch-message ";;
  ;; 
  ;; WHERE I LIVED, AND WHAT I LIVED FOR
  ;; 
  ;; I went to the woods because I wished to live deliberately, to
  ;; front only the essential facts of life, and see if I could not
  ;; learn what it had to teach, and not, when I came to die, discover
  ;; that I had not lived. I did not wish to live what was not life,
  ;; living is so dear; nor did I wish to practise resignation, unless
  ;; it was quite necessary. I wanted to live deep and suck out all
  ;; the marrow of life, to live so sturdily and Spartan-like as to
  ;; put to rout all that was not life, to cut a broad swath and shave
  ;; close, to drive life into a corner, and reduce it to its lowest
  ;; terms, and, if it proved to be mean, why then to get the whole
  ;; and genuine meanness of it, and publish its meanness to the
  ;; world; or if it were sublime, to know it by experience, and be
  ;; able to give a true account of it in my next excursion.
  ;; 
  ;; 
  ;; Henry David Thoreau, Walden (1854)")
#+end_src
** 完 Mode line
Display time in modeline.
#+begin_src emacs-lisp
  (setq display-time-string-forms
        '((propertize (format-time-string " %H:%M " now) 'face 'bold)))

  (display-time-mode 1)
#+end_src
** 完 Toolbars
Define a function to toggle mode line. 
#+begin_src emacs-lisp
  (defun sync0-toggle-mode-line () 
    "toggles the modeline on and off"
    (interactive) 
    (setq mode-line-format
          (if (equal mode-line-format nil)
              (default-value 'mode-line-format)) )
    (redraw-display))
#+end_src

Hide tool bar, menu bar, and scroll bar at startup. 
#+begin_src emacs-lisp
  (tool-bar-mode -1) 
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-showhide-fringe-menu-customize-disable)
#+end_src

In case I need those annoying toolbars back, I bind them:
#+begin_src emacs-lisp
      (with-eval-after-load 'hydra
      (defhydra sync0-hydra-menu-toggle (:color amaranth :hint nil :exit t)
        "
  ^Toolbar toggle^
  ^^^----------------
  _l_: Mode line
  _t_: Tool bar
  _m_: Menu bar
  [q] Quit

  "
        ("l" sync0-toggle-mode-line)
        ("t" tool-bar-mode)
        ("m" menu-bar-mode)
        ("q" nil :color blue))

        (global-set-key (kbd "<f8>") 'sync0-hydra-menu-toggle/body))
#+end_src
** 完 Appeareance
At startup,  maxmize Emacs' window. 
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

Configure window dividers. 
#+begin_src emacs-lisp
  ;; On graphical displays, you can use window dividers in order to separate
  ;; windows visually.
  (setq-default window-divider-default-places t
                window-divider-default-bottom-width 0
                window-divider-default-right-width 5)
  (add-hook 'emacs-startup-hook #'window-divider-mode)
#+end_src

Other settings.
#+begin_src emacs-lisp
   (setq-default                    
    ;; Avoid ugly problemes with git-gutter.
    fringes-outside-margins nil
    left-margin-width 2
    ;; right-margin-width 7
    ;; left-fringe-width 5
    left-fringe-width 1
    right-fringe-width 0
    ;; Remove continuation arrow on right fringe.
    fringe-indicator-alist (delq (assq 'continuation fringe-indicator-alist)
                                 fringe-indicator-alist)
    indicate-buffer-boundaries nil
    indicate-empty-lines nil
    max-mini-window-height 0.3)

   (defun sync0-restore-margins ()
     "Restore margins after they are destroyed by git-gutter"
     (setq left-margin-width 2))

  (add-hook 'after-save-hook 'sync0-restore-margins)
#+end_src
** 完 Sane defaults
Define user information.
#+begin_src emacs-lisp
     (setq user-full-name "Carlos Alberto Rivera Carreño"
  ;; Define my Dropbox location
           sync0-dropbox-directory "~/Dropbox/"
           user-mail-address "carc.sync0@gmail.com")
#+end_src

Configure bookmarks.  
#+begin_src emacs-lisp
  ;; Bookmarks directory
  (setq bookmark-default-file (concat user-emacs-directory "bookmarks")
        bookmark-save-flag 1)
#+end_src

Configure autosave.
#+begin_src emacs-lisp
  (setq auto-save-interval 100
        auto-save-timeout 60)
#+end_src

Configure CUSTOM.
#+begin_src emacs-lisp
  ;; Set CUSTOM directory
  (setq custom-file (expand-file-name "custom_settings.el" user-emacs-directory))
  ;; (load custom-file nil)
  ;; (load custom-file t)
#+end_src

Configure line numbers
#+begin_src emacs-lisp
  ;; (when (version<= "26.0.50" emacs-version )
  ;; (global-display-line-numbers-mode))
#+end_src

Configure matching delimiters. Necessary to deal with elisp parenthesis. 
#+begin_src emacs-lisp
  (setq show-paren-delay 0.1
        show-paren-highlight-openparen t
        ;; don't blink--too distracting
        blink-matching-paren nil
        show-paren-when-point-inside-paren t)

  (show-paren-mode 1)
#+end_src

Eliminate Emacs' yes-no inconsistency. 
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Configure the default encoding system.
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq default-file-name-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  (if (boundp buffer-file-coding-system)
      (setq buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))
  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

Other settings.
#+begin_src emacs-lisp
  (setq-default                    
   ;; Use spaces instead of tabs
   indent-tabs-mode nil              
   ;; Split verticly by default
   split-width-threshold 0         
   ;; Split verticly by default
   split-height-threshold nil        
   ;; disable bidirectional text for tiny performance boost
   bidi-display-reordering nil 
   ;; hide cursors in other windows
   cursor-in-non-selected-windows nil  
   ;; Don't resize frames implicitly.
   frame-inhibit-implied-resize t
   highlight-nonselected-windows nil
   ;; Don't show the "Welcome to GNU Emacs ..." at startup
   inhibit-startup-screen t
   ;; Stop asking whether themes are safe
   custom-safe-themes t
   ;; Loop animated images such as gif files. 
   image-animate-loop t)
#+end_src
** 完 Faces & text
Adjust font size according to screen resolution (when I use dual monitor setup)
#+begin_src emacs-lisp
  (if (> (display-pixel-width) 2000)
      ;; external monitor font size
      (progn (set-face-attribute 'default nil 
                            :family "Source Code Pro"
                            :height 120)
        (setq line-spacing 0))
    ;; laptop font size
    (progn (set-face-attribute 'default nil 
                          :family "Source Code Pro"
                          :height 115)
      (setq line-spacing 0)))
#+end_src

Configure variable-width faces.
#+begin_src emacs-lisp
  (defun sync0-buffer-face-mode-variable ()
    "Set font to a variable width (proportional) fonts in current buffer"
    (if (> (display-pixel-width) 2000)
        ;; external monitor font size
        (setq buffer-face-mode-face '(:family "Linux Libertine O" :height 140))
      ;; laptop font size
      (setq buffer-face-mode-face '(:family "Linux Libertine O" :height 150)))
    (buffer-face-mode))
#+end_src

Configure default font faces for Info, ERC, and Org
#+begin_src emacs-lisp
  (add-hook 'erc-mode-hook 'sync0-buffer-face-mode-variable)
  (add-hook 'Info-mode-hook 'sync0-buffer-face-mode-variable)
  (add-hook 'text-mode-hook 'sync0-buffer-face-mode-variable)
#+end_src

Allow narrowing
#+begin_src emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+end_src

Configure Hooks. 
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-visual-line-mode)
  ;; (add-hook 'text-mode-hook 'turn-off-auto-fill)
  ;; (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
#+end_src

Have sentences end with single espace.
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src
** 完 Backups
#+begin_src emacs-lisp
  (setq 
   ;; Store all autosave files in the tmp directory.
   auto-save-file-name-transforms
   `((".*" ,temporary-file-directory t))
   ;; Store all backups in the "backups" directory.
   backup-directory-alist '(("." . "~/.emacs.d/backups"))
   backup-by-copying t
   delete-old-versions t
   kept-new-versions 5
   kept-old-versions 0
   ;; Use versioned backups.
   version-control t
   ;; Don't create lockfiles.
   create-lockfiles nil) 
#+end_src
** 完 Personal
Do this.
#+begin_src emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "sync0/"))

    (require 'sync0-keybindings)
    (require 'sync0-date-functions)
    (require 'sync0-definitions)
    ;; This is a collection of functions that become problematic when loaded
    ;; after packages are declared.
    (require 'sync0-functions)
#+end_src
** 完 s
The long lost Emacs string manipulation library. This is required for
~simple-secrets~ to work. 

#+begin_src emacs-lisp
  (use-package s)
#+end_src
** 完 simple-secrets
This package contains a set of functions to manage passwords. After
defining ~secret-password-file~, you can draw information from this
file, without revealing the encrypted contents. For example, in this
file, whenever I use ~(secret-lookup [secret_name])~, I am drawing
information from my encrypted secrets file (i.e., ~sync0_secrets.gpg~)
that I don't want to reveal. 

#+begin_src emacs-lisp
  (use-package simple-secrets
    :load-path "~/.emacs.d/sync0/" 
    :after s
    :custom
    (secret-password-file "~/.emacs.d/sync0_secrets.gpg")
    :config
    (secret-load-keys))
#+end_src
** 完 epa-file
#+begin_src emacs-lisp
  (use-package epa-file
    :custom
    (epa-file-encrypt-to '("carc.sync0@gmail.com"))
    (epa-file-select-keys 'silent)
    :config
    (epa-file-enable))
#+end_src
** 完 hydra
#+begin_src emacs-lisp
  (use-package hydra
    :custom
    ;; In case I later need to wrap defhydra in any special functionality.
    (lv-use-seperator t))
#+end_src
** 完 evil
#+begin_src emacs-lisp
  (use-package evil  
    :diminish evil-mode
    :preface
    (defun sync0-insert-line-below ()
      "Insert an empty line below the current line."
      (interactive)
      (save-excursion
        (end-of-line)
        (open-line 1)))

    (defun sync0-insert-line-above ()
      "Insert an empty line above the current line."
      (interactive)
      (save-excursion
        (end-of-line 0)
        (open-line 1)))

    ;; insert whitespace
    (defun sync0-insert-whitespace ()
      " Add a whitespace"
      (interactive)
      (insert " "))
    :hook
    (after-init . evil-mode)
    :bind 
    (:map evil-normal-state-map
          ("M-h" . next-buffer)
          ("M-l" . previous-buffer)
          :map minibuffer-local-map
          ("ESC" . minibuffer-keyboard-quit)
          :map minibuffer-local-ns-map
          ("ESC" . minibuffer-keyboard-quit)
          :map minibuffer-local-completion-map
          ("ESC" . minibuffer-keyboard-quit)
          :map minibuffer-local-must-match-map
          ("ESC" . minibuffer-keyboard-quit)
          :map minibuffer-local-isearch-map
          ("ESC" . minibuffer-keyboard-quit))

    :custom
    ;; Make horizontal movement cross lines                                    
    (evil-cross-lines t)
    ;; turn off auto-indent 
    (evil-auto-indent nil)
    ;; Change color of evil cursor
    (evil-insert-state-cursor '(bar "#dc322f"))
    (evil-normal-state-cursor '(box "#268bd2"))
    (evil-visual-state-cursor '(box "#d33682"))

    :config
    ;; Turn on evil mode when enabled.
    (evil-mode 1)
    ;; Turn on evil-escape mode when enabled.
    (evil-escape-mode 1)

    ;; Change global key bindings
    (unbind-key "M-." evil-normal-state-map)

    (evil-define-key 'normal global-map
      "s" 'fill-paragraph
      "S" 'sync0-insert-line-below
      "zc" 'transpose-chars
      "zl" 'transpose-lines
      "M" 'bookmark-set
      "zw" 'transpose-words
      "zp" 'transpose-paragraphs
      "zs" 'transpose-sentences
      (kbd "SPC") 'sync0-insert-whitespace)

    ;; Improve EVIL behavior with visual lines (visual-line-mode).
    (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line))
#+end_src
*** 完 evil-escape
#+begin_src emacs-lisp
  (use-package evil-escape 
    :diminish evil-escape-mode
    :after evil
    ;; :commands evil-escape-mode
    :custom
    (evil-escape-excluded-states '(normal visual multiedit emacs motion))
    (evil-escape-excluded-major-modes '(neotree-mode))
    (evil-escape-key-sequence "fd")
    (evil-escape-unordered-key-sequence t)
    (evil-escape-delay 0.25)
    :config
    ;; no `evil-escape' in minibuffer
    (push #'minibufferp evil-escape-inhibit-functions)
    :bind (:map evil-insert-state-map
                ("C-g"  . evil-escape)
                :map evil-replace-state-map
                ("C-g"  . evil-escape)
                :map evil-visual-state-map
                ("C-g"  . evil-escape)
                :map evil-operator-state-map
                ("C-g"  . evil-escape)))
#+end_src
*** 完 evil-multiedit
#+begin_src emacs-lisp
    (use-package evil-multiedit 
  :defer t
  :diminish evil-multiedit-mode
  :commands 
  (evil-multiedit-and-next evil-multiedit-match-and-next evil-multiedit-toggle-marker-here)
  :after evil
      :bind (:map evil-visual-state-map
      ;; Highlights all matches of the selection in the buffer.
      ("R" . evil-multiedit-match-all)
      ;; Match selected region.
      ("M-d" . evil-multiedit-and-next)
      ("M-D" . evil-multiedit-and-prev)
      ;; Restore the last group of multiedit regions.
      ("C-M-D"  . evil-multiedit-restore)
      :map evil-normal-state-map
      ;; Match the word under cursor (i.e. make it an edit region). Consecutive presses will
      ;; incrementally add the next unmatched match.
      ("M-d"  . evil-multiedit-match-and-next)
      :map evil-insert-state-map
      ;; Insert marker at point
      ("M-d"  . evil-multiedit-toggle-marker-here)
      :map evil-normal-state-map
      ;; Same as M-d but in reverse.
      ("M-D"  . evil-multiedit-match-and-prev)
      ;; OPTIONAL: If you prefer to grab symbols rather than words, use
      ;; `evil-multiedit-match-symbol-and-next` (or prev).
      ;; RET will toggle the region under the cursor
      :map evil-multiedit-state-map
      ("RET"  . evil-multiedit-toggle-or-restrict-region)
      ;; ...and in visual mode, RET will disable all fields outside the selected region
      ("RET"  . evil-multiedit-toggle-or-restrict-region)
      ;; For moving between edit regions
      ("C-n"  . evil-multiedit-next)
      ("C-p"  . evil-multiedit-prev)
      ("C-n"  . evil-multiedit-next)
      ("C-p"  . evil-multiedit-prev)))
#+end_src
** 完 org
#+begin_src emacs-lisp
    (use-package org 
    :after evil
      :custom
      ;; Word wrap in org mode.
      (org-startup-truncated t)
      ;; Initial indentation
      (org-startup-indented t)         
      ;; Begin displaying entire trees.
      (org-startup-folded nil)
      ;; Better display of italics & bold.
      (org-hide-emphasis-markers t)
      ;; Define org-tags.
      (org-tag-alist '(("Project" . ?p)
                       ("noexport" . ?n)
                       ("University" . ?u)))
      ;; Hide inherited tags from Org's agenda view.
      ;; org-agenda-show-inherited-tags nil
      ;; Define todo keywords.
      (org-todo-keywords '((sequence "無(u)" "次(n)" "中(i)" "待(w)" "完(d)")(sequence "阻(p)" "取(c)")))
      ;; Set faces for org-todo-keywords
      (org-todo-keyword-faces '(("無" . (:foreground "#dc322f" :weight bold))
                                ("次" . (:foreground "#d33682" :weight bold))
                                ("完" . (:foreground "#859900" :weight bold))   
                                ("待" . (:foreground "#cb4b16" :weight bold))
                                ("阻" . (:foreground "#268bd2" :weight bold)) 
                                ("取" . (:foreground "#6c71c4" :weight bold)) 
                                ("中" . (:foreground "#b58900" :weight bold))))
      (org-blank-before-new-entry '((heading . nil)(plain-list-item . nil)))
      ;; Stop emacs asking for confirmation
      (org-confirm-babel-evaluate nil)
      ;; Set path for org default directory (necessary for refile and agenda).
      (org-directory "~/Dropbox/org")
      (org-refile-use-outline-path 'file)
      ;; (org-refile-use-outline-path nil) ;; Sasha-Chua's config
      (org-outline-path-complete-in-steps nil)
      ;; (org-reverse-note-order t)
      (org-refile-allow-creating-parent-nodes 'confirm)
      ;; (org-blank-before-new-entry nil)
      (org-refile-use-cache nil)
      ;; Have org-mode indent elisp sections.
      (org-src-tab-acts-natively t)
      ;; Color embeded source code
      (org-src-fontify-natively t)
      ;; Change font used in src blocks. This feature slows down Emacs tremendously. 
      (org-src-block-faces '(("emacs-lisp" (:height 115 :inherit 'fixed-pitch))
                             ("python" (:height 115 :inherit 'fixed-pitch))))

      :config
      (defun sync0-org-tree-open-in-right-frame ()
  "Open headline in the next window as a separate tree."
        (interactive)
        (org-tree-to-indirect-buffer)
        (windmove-right))

      (defun sync0-call-rebinding-org-blank-behaviour (fn)
        (let ((org-blank-before-new-entry
               (copy-tree org-blank-before-new-entry)))
          (when (org-at-heading-p)
            (rplacd (assoc 'heading org-blank-before-new-entry) nil))
          (call-interactively fn)))

      (defun sync0-org-meta-return-dwim ()
  "Improved version of default org-meta-return"
        (interactive)
        (sync0-call-rebinding-org-blank-behaviour 'org-meta-return))

      (defun sync0-org-insert-todo-heading-dwim ()
  "Improved version of org-insert-todo-heading"
        (interactive)
        (sync0-call-rebinding-org-blank-behaviour 'org-insert-todo-heading))

       (defun sync0-clever-insert-item ()
         "Clever insertion of org item."
         (if (not (org-in-item-p))
             (insert "\n")
           (org-insert-item)))

       (defun sync0-evil-org-eol-call (fun)
         "Go to end of line and call provided function. FUN function callback"
         (end-of-line)
         (funcall fun)
         (evil-append nil))

         ;; redefinition evils normal mode map
         (evil-define-key 'normal org-mode-map
           "<" 'outline-previous-visible-heading
           ">" 'outline-next-visible-heading
           (kbd "C->") 'org-forward-heading-same-level
           (kbd "C-<") 'org-backward-heading-same-level
           (kbd "<S-tab>") 'sync0-org-tree-open-in-right-frame 
           "H" 'org-metaleft
           "L" 'org-metaright
           "K" 'org-metaup
           "J" 'org-metadown
           "k" 'previous-line
           "j" 'next-line
           "U" 'undo-tree-redo
           "o" '(lambda () (interactive) (sync0-evil-org-eol-call 'sync0-clever-insert-item))
           "O" '(lambda () (interactive) (sync0-evil-org-eol-call 'org-insert-heading))
           "$" 'org-end-of-line
           "^" 'org-beginning-of-line
           "[" 'backward-sentence
           "]" 'forward-sentence
           "{" 'org-backward-paragraph
           "}" 'org-forward-paragraph
           "-" 'org-cycle-list-bullet
           (kbd "<tab>") 'org-cycle)

         (evil-define-key 'visual org-mode-map
           ;; "q" 'highlight-changes-remove-highlight
           "e" 'org-emphasize)

      ;; List of files considered for org-refile.
      (setq org-refile-targets (quote ((nil :maxlevel . 9)                ;; Default value.
                                       ;;(org-agenda-files :maxlevel . 9) ;; set for all agenda files
                                       ("todo.org" :maxlevel . 2))))

      ;; Set default application to open pdfs.
      (add-hook 'org-mode-hook
                '(lambda ()
                   (delete '("\\.pdf\\'" . default) org-file-apps)
                   (add-to-list 'org-file-apps '("\\.pdf\\'" . "zathura %s"))))

      :bind 
      (:map org-mode-map
            ("M-<return>" . sync0-org-meta-return-dwim)
            ("M-S-<return>" . sync0-org-insert-todo-heading-dwim)))
#+end_src
*** 完 org-crypt
Allow encryption of org trees and sub trees. 

#+begin_src emacs-lisp
  (use-package org-crypt 
    :after org
    :custom
    (org-crypt-key "carc.sync0@gmail.com")
    (org-tags-exclude-from-inheritance (quote ("crypt")))
    :config
    (org-crypt-use-before-save-magic))
#+end_src
*** 完 org-journal
Although, I have been almost entirely paper-less since I started my
Master's degree, I have struggled to implement a planning workflow
(calendar, task list, etc.) that is both easy to maintain and easy to
use. After all, the litmus test of an efficient and consistent
planning workflow is daily use. The ~org-journal~ package contains a set
of functions to maintain a personal diary, using ~org-mode~ and Emacs.
For my daily planning needs, this is the package I currently use,
alongside the proverbial ~org-agenda~ and Google calendar.

Caveat: Unfortunately, I have been unable to coordinate my Emacs
workflow with my mobile phone; therefore, I sometimes require ~Todoist~
for things such as grocery shopping and recurring tasks. While you can
do all this within ~org-mode~, and I have, I am not satisfied with the
implementation so far. 

#+begin_src emacs-lisp
  (use-package org-journal 
    :after org
    :custom
    ;; Set default directory to search for journal files. 
    (org-journal-dir (concat sync0-dropbox-directory (format-time-string "org/journal/%Y")))
    ;; (org-journal-dir (concat (file-name-as-directory org-directory) (format-time-string "journal/%Y")))
    ;; Create one journal file per month. 
    (org-journal-file-type 'monthly)
    ;; Change the title of journal files to the format: "YYYY_MM.gpg".
    (org-journal-file-format "%Y_%m")
    ;; Change the format of journal entries (org headlines) to "[Day], DD/MM/YYYY".
    (org-journal-date-format "%A, %d/%m/%Y")
    ;; Encrypt journal files.
    (org-journal-encrypt-journal t)
    ;; Don't encript individual entires in journal files. It's too cumbersome. 
    (org-journal-enable-encryption nil)
    (org-journal-enable-agenda-integration nil)

    :config
    ;; This setup prevents slowing down agenda parsing. 
    ;; I create a variable to stand for the path of the journal file for the current month.  
    ;; Then, I have org-agenda parse only this path and not all the past journal files.
    (setq sync0-journal-this-month-file (concat sync0-dropbox-directory "org/journal/" (format-time-string "%Y/%Y_%m") ".gpg"))

    (add-to-list 'org-agenda-files sync0-journal-this-month-file)

    :bind 
    (("C-c j" . org-journal-new-entry)))
#+end_src
*** 完 org-capture
#+begin_src emacs-lisp
  (use-package org-capture 
    :defer t
    :after 
    (org org-journal)
    :commands org-capture
    :preface 
    (defun org-journal-find-location ()
      ;; Open today's journal, but specify a non-nil prefix argument in order to
      ;; inhibit inserting the heading; org-capture will insert the heading.
      (org-journal-new-entry t)
      ;; Position point on the journal's top-level heading so that org-capture
      ;; will add the new entry as a child entry.
      (goto-char (point-min)))
    :custom
    (org-default-notes-file "~/Dropbox/org/todo.org")
    :config 
    (setq org-capture-templates '(("j" "Journal Entry" entry (function org-journal-find-location)
                                   "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")

                                  ;; ("t" "Task" entry
                                  ;; (file+olp "~/Dropbox/org/todo.org" "Tâches" "Indéfini")
                                  ;; "** 無 %^{Task} \n:PROPERTIES:\n:ADDED: %<[%Y-%m-%d]>\n:END:" :prepend t)

                                  ("t" "Task" entry
                                   (file+headline "~/Dropbox/org/todo.org" "Autres")
                                   "** 無 %^{Task} \n:PROPERTIES:\n:ADDED: %<%Y-%m-%d>\n:END:" :prepend t)

                                  ("e" "Emacs" entry
                                   (file+headline "~/Dropbox/org/todo.org" "Emacs")
                                   "** 無 %^{Task} \n:PROPERTIES:\n:ADDED: %<%Y-%m-%d>\n:END:" :prepend t)

                                  ("r" "Reading" entry
                                   (file+headline "~/Dropbox/org/recommendations.org" "Non classé")
                                   "** 無 %^{Task} \n:PROPERTIES:\n:ADDED: %<%Y-%m-%d>\n:RECOMMENDER: %^{Recommender}\n:END:" :prepend t)

                                  ("q" "Question" entry (function org-journal-find-location)
                                   "** 無 %^{Title}\n:PROPERTIES:\n:ADDED: %<%Y-%m-%d>\n:TRACE: %a\n:END:%i%?")

                                  ("m" "Email" entry 
                                   (file+headline "~/Dropbox/org/todo.org" "Courriel")
                                   "** 無 %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n" :prepend t)))

    :bind 
    (("\C-c c" . org-capture)))
#+end_src
*** 完 org-agenda
#+begin_src emacs-lisp
  (use-package org-agenda 
    :after org
    :custom
    (org-agenda-files (list "~/Dropbox/org/gcal.org"
                            "~/Dropbox/org/unterrichte.org"
                            "~/Dropbox/org/ereignisse.org"
                            "~/Dropbox/org/todo.org"))
    (org-cycle-separator-lines 0)
    ;; Set property inheritance
    ;; org-use-property-inheritance '("PRIORITY" "DEADLINE" "SCHEDULED")
    ;; Choose the placement of org tags in org files.
    (org-tags-column 100)
    ;; Place org agenda tags in the same place as org tags.
    (org-agenda-tags-column org-tags-column)
    ;; Make org-agenda the only window by default.
    ;; (org-agenda-window-setup 'only-window )
    ;; Build agenda manually (to update press "r").
    (org-agenda-sticky t)
    ;; Compact the block agenda view. This deletes the section separators.
    (org-agenda-compact-blocks t)
    ;; Allow one-key todo selection.
    (org-use-fast-todo-selection t)
    ;; Include the todo keywords in fast tag selection buffer.
    (org-fast-tag-selection-include-todo t)
    ;; Allow one-key tag selection.
    (org-fast-tag-selection-single-key t)
    ;; each habit to show up when it is next scheduled, but no further repetitions
    (org-agenda-repeating-timestamp-show-all nil)
    ;; This variable may be set to nil, t, or a number which will then
    ;; give the number of days before the actual deadline when the
    ;; prewarnings should resume.
    (org-agenda-skip-deadline-prewarning-if-scheduled t)
    (org-agenda-skip-scheduled-if-deadline-is-shown t)
    ;; Add appointments duration to column view's effort estimates.
    (org-agenda-columns-add-appointments-to-effort-sum t)
    (org-agenda-deadline-leaders (quote ("  豫定 " "%2d日後 " "%2d日前 ")))
    (org-agenda-scheduled-leaders (quote ("  豫定 " " 再日程 ")))

    :preface
    (defun sync0--org-agenda-goto-header (&optional backwards)
      "Find the next agenda series header forwards or BACKWARDS."
      (let ((pos (save-excursion
                   (goto-char (if backwards
                                  (line-beginning-position)
                                (line-end-position)))
                   (let* ((find-func (if backwards
                                         'previous-single-property-change
                                       'next-single-property-change))
                          (end-func (if backwards 'max 'min))
                          (all-pos-raw (list (funcall find-func (point) 'org-agenda-structural-header)
                                             (funcall find-func (point) 'org-agenda-date-header)))
                          (all-pos (cl-remove-if-not 'numberp all-pos-raw))
                          (prop-pos (if all-pos (apply end-func all-pos) nil)))
                     prop-pos))))
        (if pos (goto-char pos))
        (if backwards (goto-char (line-beginning-position)))))

    :config
    ;; Set of functions to have evil bindings in org-agenda.
    (defun sync0-org-agenda-next-header ()
      "Jump to the next header in an agenda series."
      (interactive)
      (sync0--org-agenda-goto-header))

    (defun sync0-org-agenda-previous-header ()
      "Jump to the previous header in an agenda series."
      (interactive)
      (sync0--org-agenda-goto-header t))

    ;; Fast access agenda view.
    (defun sync0-pop-to-org-agenda (&optional split)
      "Visit the org agenda, in the current window or a SPLIT."
      (interactive "P")
      (org-agenda nil "h") ;; the h corresponds to the agenda view that will be displayed once this command is called
      (when (not split)
        (delete-other-windows)))

    ;; This function was borrowed from Sacha Chua's configuration. 
    (defun sync0-org-agenda-new ()
      "Create a new note or task at the current agenda item.
                                Creates it at the same level as the previous task, so it's better to use
                                this with to-do items than with projects or headings."
      (interactive)
      (org-agenda-switch-to)
      (org-capture 0))

    ;; necessary function 1
    (defun sync0-org-skip-subtree-if-priority (priority)
      "Skip an agenda subtree if it has a priority of PRIORITY.
                                PRIORITY may be one of the characters ?A, ?B, or ?C."
      (let ((subtree-end (save-excursion (org-end-of-subtree t)))
            (pri-value (* 1000 (- org-lowest-priority priority)))
            (pri-current (org-get-priority (thing-at-point 'line t))))
        (if (= pri-value pri-current)
            subtree-end
          nil)))

    ;; necessary function 2
    (defun sync0-org-skip-subtree-if-habit ()
      "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (if (string= (org-entry-get nil "STYLE") "habit")
            subtree-end
          nil)))

    (require 'sync0-org-agenda-custom-commands)

    :bind 
    (([f6] . sync0-pop-to-org-agenda)
     :map org-agenda-mode-map
     ("j" . org-agenda-next-item)
     ("k" . org-agenda-previous-item)
     ("J" . sync0-org-agenda-next-header)
     ("K" . sync0-org-agenda-previous-header)
     ("N" . sync0-org-agenda-new)))
#+end_src
*** 完 org-habits
This package is included in ~org-mode~; it simply allows the creation of
recurring tasks for use in ~org-agenda~. Although this introduces some
interesting functionality for tracking your habits, I found that I
didn't  use it consistently. I keep the configuration just in case I
change my mind someday.

Beware! There is a strange inconsistency when habits are enabled. See [[https://emacs.stackexchange.com/questions/26291/not-allowed-in-tags-type-agenda-using-custom-agenda]]

#+begin_src emacs-lisp
  (use-package org-habit 
    :after (org org-agenda)
    ;; :commands org-bullets-mode
    :config
    (setq org-habit-graph-column 80
          org-habit-show-habits-only-for-today nil))
#+end_src

This allow to hide certain tags in the agenda display, but include them in
the processing of agenda commands
(setq org-agenda-hide-tags-regexp "Achats\\|Doctorat\\|Habitudes\\|Téléchargements\\|Autres\\|Lectures\\|Project\\|Courriels\\|Administration\\|Projet\\|Université\\|Métier")
;;(setq org-agenda-hide-tags-regexp "noexport\\|university\\|today")

Stuck projects. 
I'm trying to setup the org-stuck-projects variable so that the "stuck
projects" agenda will list all headlines which are TODOs (any TODO keyword
except DONE) but those which don't have SCHEDULED or DEADLINE attributes
set. Currently I get an empty list with this setting for the variable:

;; (setq org-stuck-projects      '("TODO={.+}/-DONE" nil nil "SCHEDULED:\\|DEADLINE:"))
;; (setq org-stuck-projects      '("TODO={.+}/-DONE" nil nil "SCHEDULED:\\|DEADLINE:"))
*** 完 org-clock
#+begin_src emacs-lisp
    (use-package org-clock 
      :after (org org-agenda)
      :custom
      ;; Set default column view headings: Task Priority Effort Clock_Summary
      (org-columns-default-format "%1PRIORITY %2TODO %DEADLINE %60ITEM(Task) %5EFFORT(Effort){:} %5CLOCKSUM")
      (org-agenda-clockreport-parameter-plist
       '(:link t :maxlevel 6 :fileskip0 t :compact t :narrow 60 :score 0))
      ;; Agenda clock report parameters
      ;; global Effort estimate values
      ;;        1    2    3    4    5    6    7    8    9    0
      ;; These are the hotkeys ^
      (org-global-properties  '(("Effort_ALL" . "1:00 2:00 4:00 5:00 8:00 10:00 12:00 15:00 20:00 24:00")))
      ;; If idle for more than 15 minutes, resolve the things by asking what to do
      ;; with the clock time
      (org-clock-idle-time 5)
      ;; Show lot of clocking history so it's easy to pick items off the `C-c I` list
      (org-clock-history-length 23)
      ;; Save the running clock and all clock history when exiting Emacs, load it on startup
      (org-clock-persist 'history)
      ;; org-clock-persist t
      ;; Resume clocking task on clock-in if the clock is open
      (org-clock-in-resume t)
      ;; Do not prompt to resume an active clock, just resume it
      (org-clock-persist-query-resume nil)
      ;; Change tasks to whatever when clocking in
      (org-clock-in-switch-to-state "中")
      ;; Save clock data and state changes and notes in the LOGBOOK drawer
      (org-clock-into-drawer t)
      ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks
      ;; with 0:00 duration
      (org-clock-out-remove-zero-time-clocks t)
      ;; Clock out when moving task to a done state
      (org-clock-out-when-done t)
      ;; Enable auto clock resolution for finding open clocks
      (org-clock-auto-clock-resolution (quote when-no-clock-is-running))
      ;; Include current clocking task in clock reports
      (org-clock-report-include-clocking-task t)
      ;; use pretty things for the clocktable
      (org-pretty-entities t)
      :config

      (defun sync0-org-clock-in ()
        (interactive)
        (org-clock-in '(4)))

      ;; This function was taken from Sacha Chua's configuration.
      ;; Display words typed and minutes spent in an org subtree.
      (defun sync0-org-entry-word-count ()
        (interactive)
        (save-restriction
          (save-excursion
            (org-narrow-to-subtree)
            (goto-char (point-min))
            (let* ((words (count-words-region (point-min) (point-max)))
                   (minutes (org-clock-sum-current-item))
                   (wpm (/ words minutes)))
              (message "WPM: %d (words: %d, minutes: %d)" wpm words minutes)
              (kill-new (number-to-string wpm))))))

      ;; Resume clocking task when emacs is restarted
      (org-clock-persistence-insinuate)

   (defhydra sync0-hydra-org-clock (:color blue :hint nil)
     "
  Clock   In/out^     ^Edit^   ^Summary     (_?_)
  -----------------------------------------
          _i_n         _e_dit   _g_oto entry
          _c_ontinue   _q_uit   _d_isplay
          _o_ut        ^ ^      _r_eport
          ^ ^          ^ ^      _w_ord count
        "
     ("i" sync0-org-clock-in)
     ("c" org-clock-in-last)
     ("o" org-clock-out)
     ("e" org-clock-modify-effort-estimate)
     ("q" org-clock-cancel)
     ("g" org-clock-goto)
     ("d" org-clock-display)
     ("r" org-clock-report)
     ("w" sync0-org-entry-word-count)
     ("?" (org-info "Clocking commands")))

      :bind 
  (:map org-mode-map
  ("C-c t" . sync0-hydra-org-clock/body)))
#+end_src
*** 完 ox-latex
Even though, by default, Emacs Org mode has the export keyword
~LATEX_COMPILER:~ to choose among the different engines (pdflatex, xelatex, or
lualatex), I had to tweek the settings to run LaTeX through ~latexmk~ for
biber to work properly with BibLaTeX. In layman English, the following
configuration is necessary for automatic bibliography management to work
properly when exporting org documents to LaTeX.

BTW, you can assign "pdf" in above variables if you prefer PDF format
for page breaks add this to org files

#+begin_src emacs-lisp
  (use-package ox-latex 
    :after org
    :custom
    ;; Export references (to tables, graphics, etc.) properly, evaluating the +NAME property. 
    (org-latex-prefer-user-labels t)
    (org-latex-pdf-process (list "latexmk -lualatex -bibtex -f %f"))
    ;; export process is sent to the background
    (org-latex-listings 'minted)
    ;; set word wrap for code blocks
    (org-latex-minted-options '(("breaklines" "true")
                                ("breakanywhere" "true")))
    ;;  (org-latex-pdf-process (list "latexmk -lualatex -bibtex-cond -f %f")
    ;; (org-latex-logfiles-extensions (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl"))
    (org-export-in-background t)
    ;; select tasks (i.e., TODOs) for export
    (org-export-with-tasks '("次" "完" "無" "中" "待" "疑"))
    (org-export-date-timestamp-format "%Y/%m/%d")
    ;; Export to Microsoft Word (doc).
    (org-export-odt-preferred-output-format "doc")
    (org-odt-preferred-output-format "doc")
    (org-latex-logfiles-extensions (quote ("lof" "lot" "tex~" "idx" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "run.xml")))

    :config
    (defun sync0-latex-and-beamer-export ()
      "Export current org file with beamer if it has beamer as latex class."
      (interactive)
      (when (equal major-mode 'org-mode) 
        (if (string-match "LATEX_CLASS: beamer" (buffer-string))
            (org-beamer-export-to-pdf)
          (org-latex-export-to-pdf))))

    ;; Set tags to excluce from export. 
    (add-to-list 'org-export-exclude-tags "取")

    (require 'sync0-latex-classes)

    :bind 
    (:map org-mode-map 
          ("M-p" . sync0-latex-and-beamer-export)))
#+end_src
*** 完 org-ref
#+begin_src emacs-lisp
  (use-package org-ref 
    :after (org ivy bibtex ivy-bibtex)
    ;;    :init 
    ;; :functions (org-ref-find-bibliography org-ref-get-bibtex-key-and-file)
    :preface 
    (defun sync0-org-ref-open-pdf-at-point ()
      "Open the pdf for bibtex key under point if it exists."
      (interactive)
      (let* ((results (org-ref-get-bibtex-key-and-file))
             (key (car results))
             (pdf-file (car(bibtex-completion-find-pdf key))))
        (if (file-exists-p pdf-file)
            (org-open-file pdf-file))
        (message "No PDF found for %s" key)))

    :custom
    (reftex-default-bibliography '("~/Dropbox/research/bibliography.bib"))
    (org-ref-default-bibliography reftex-default-bibliography)
    (org-ref-pdf-directory "~/Documents/pdfs/")
    (org-ref-completion-library 'org-ref-ivy-cite)
    (org-ref-open-pdf-function 'sync0-org-ref-open-pdf-at-point)

    :config
    (setq org-ref-notes-function
          (lambda (thekey)
            (let ((bibtex-completion-bibliography (org-ref-find-bibliography)))
              (bibtex-completion-edit-notes
               (list (car (org-ref-get-bibtex-key-and-file thekey)))))))

    (defhydra sync0-hydra-research-functions (:color amaranth :hint nil :exit t)
      "
    ^Research functions^
    ^^^^-------------------------
    _i_: Insert org-ref citation
    _n_: Open notes 
    _b_: Open bibtex entry 
    _p_: Open PDF
    [q] Quit
    "
      ("i" org-ref-ivy-insert-cite-link)
      ("n" ivy-bibtex)
      ("b" org-ref-open-citation-at-point)
      ("p" sync0-org-ref-open-pdf-at-point)
      ("q" nil :color blue))

    :bind 
    (:map org-mode-map
          ("C-c [" . org-ref-ivy-insert-cite-link)
          ;; ("C-c 9"  . org-ref-notes-function)
          ("<f9>" . sync0-hydra-research-functions/body)
          :map bibtex-mode-map
          ("C-c 9"  . ivy-bibtex)
          ("C-c 8"  . sync0-org-ref-open-pdf-at-point)))
#+end_src
*** 完 org-gcal
#+begin_src emacs-lisp
  (use-package org-gcal 
    :defer t
    :after (org simple-secrets)
    :commands (org-gcal-fetch org-gcal-sync)
    :custom
    (org-gcal-client-id (secret-lookup "sync0-gcal-client-id"))
    (org-gcal-client-secret (secret-lookup "sync0-gcal-client-secret"))
    (org-gcal-file-alist '(("carc.sync0@gmail.com" .  "~/Dropbox/org/gcal.org")
                           ("5iudo90h5e3nabbubvsj1lov4o@group.calendar.google.com" . "~/Dropbox/org/unterrichte.org")
                           ("p9vu3a782nahsma6ud1rdg1qpc@group.calendar.google.com" . "~/Dropbox/org/ereignisse.org")
                           ("vbnn8eksqpqun2mbtdlknhh9uk@group.calendar.google.com" . "~/Dropbox/org/gewohnheiten.org")
                           ))
    (org-gcal-auto-archive nil))
#+end_src
** 完 ivy
#+begin_src emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) ")
    :hook 
    (after-init . ivy-mode))
#+end_src
** 完 recentf
A packate that displays a list of recent files. 
#+begin_src emacs-lisp
  (use-package recentf
    :diminish recentf-mode
    :custom
    (recentf-max-saved-items 100)
    (recentf-max-menu-items 10)
    :config
    (recentf-mode +1)
    :bind (:map recentf-dialog-mode-map
                ("j"  . next-line)
                ("k"  . previous-line)))
#+end_src
** 完 projectile
Configuration taken from
https://github.com/danieroux/emacs/blob/master/mine/djr-hydra.el

#+begin_src emacs-lisp
  (use-package projectile 
    ;; :after (ivy)
    :custom
    ;; (projectile-keymap-prefix (kbd "C-p"))
    (projectile-completion-system 'ivy)
    (projectile-enable-caching t)
    ;;(setq projectile-indexing-method 'alien)

    :config
    (defhydra sync0-hydra-projectile (:color teal)
      "
        Find File          Search/Tags             Buffers                      Cache
        ------------------------------------------------------------------------------------------
        ^^_f_: file dwim       _a_: ag             ^^_i_: Ibuffer               _c_: cache clear
        ^^_r_: replace regexp  _g_: grep           ^^_K_: Kill all buffers      _x_: remove known project
        ^^_d_: dir             _o_: multi-occur    ^^_X_: cleanup non-existing  _z_: cache current
        Operate On
        ---------------------
        ^^_D_: Dired
        ^^_e_: Eshell
        "
      ("a"   projectile-ag                      nil)
      ("c"   projectile-invalidate-cache        nil)
      ("d"   projectile-find-dir                nil)
      ("e"   (eshell '(4))                      nil)
      ("D"   projectile-dired                   nil)
      ("f"   projectile-find-file-dwim          nil)
      ;; ("g"   projectile-regenerate-tags         nil)
      ("g"   projectile-grep         nil)
      ("i"   projectile-ibuffer                 nil)
      ("K"   projectile-kill-buffers            nil)
      ;; ("m"   (magit-status (projectile-project-root)) nil)
      ("o"   projectile-multi-occur             nil)
      ("p"   projectile-switch-project          nil)
      ("r"   projectile-replace-regexp                 nil)
      ;; ("r"   projectile-recentf                 nil)
      ("x"   projectile-remove-known-project    nil)
      ("X"   projectile-cleanup-known-projects  nil)
      ("z"   projectile-cache-current-file      nil)
      ("q"   nil                                "cancel" :color blue))

    (add-to-list 'projectile-globally-ignored-files "node-modules")

    (projectile-mode)
    :bind
    (("C-c p" . sync0-hydra-projectile/body)))
#+end_src
** 完 counsel
#+begin_src emacs-lisp
  (use-package counsel 
    :after (evil)
    :diminish counsel-mode
    :config
    (evil-define-key 'normal global-map
      "gb" 'counsel-bookmark)

    (defhydra sync0-hydra-help (:color amaranth :hint nil :exit t)
      "
  ^Help functions^
  ^^^------------------------
  _f_: Describe function
  _v_: Describe variable
  _k_: Describe keybindings
  _l_: Load library
  _i_: Search symbol
  _u_: Search Unicode char
  [q] Quit

  "
      ;; Quickly work with bookmarks
      ("f" counsel-describe-function)
      ("v" counsel-describe-variable)
      ("k" describe-key)
      ("l" counsel-load-library)
      ("i" counsel-info-lookup-symbol)
      ("u" counsel-unicode-char)
      ("q"  nil :color blue))
    :bind
    (("M-x" . counsel-M-x)
     ("M-y" . counsel-yank-pop)
     ("C-x C-f" . counsel-find-file)
     ("<f1>" . sync0-hydra-help/body)))
#+end_src
** 完 swiper
#+begin_src emacs-lisp
  (use-package swiper 
    :after evil
    :commands swiper
    :config
    (evil-define-key 'normal global-map
      "/" 'swiper)
    :bind
    (("C-s" . swiper)))
#+end_src
** 完 neotree
#+begin_src emacs-lisp
  (use-package neotree
    :after projectile
    ;; :init 
    ;; (neotree-show)
    :custom
    (neo-smart-open t)
    (projectile-switch-project-action 'neotree-projectile-action)

    :config
    (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
    (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
    (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "r") 'neotree-refresh)
    (evil-define-key 'normal neotree-mode-map (kbd "h") 'neotree-select-up-node)
    (evil-define-key 'normal neotree-mode-map (kbd "l") 'neotree-select-down-node)
    (evil-define-key 'normal neotree-mode-map (kbd "j") 'neotree-next-line)
    (evil-define-key 'normal neotree-mode-map (kbd "c") 'neotree-create-node)
    (evil-define-key 'normal neotree-mode-map (kbd "d") 'neotree-delete-node)
    (evil-define-key 'normal neotree-mode-map (kbd "k") 'neotree-previous-line)
    (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
    (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)

    (defun sync0-neotree-project-dir-toggle ()
      "Open NeoTree using the git root."
      (interactive)
      (let ((project-dir (projectile-project-root))
            (file-name (buffer-file-name)))
        (neotree-toggle)
        (if project-dir
            (if (neo-global--window-exists-p)
                (progn
                  (neotree-dir project-dir)
                  (neotree-find file-name)))
          (message "Could not find git project root.")))))
#+end_src

(defun neotree-projectile-toggle ()
  (interactive)
  (let ((project-dir
         (ignore-errors
         ;;; Pick one: projectile or find-file-in-project
           (projectile-project-root)
           ))
        (file-name (buffer-file-name))
        (neo-smart-open t))
    (if (and (fboundp 'neo-global--window-exists-p)
             (neo-global--window-exists-p))
        (neotree-hide)
      (progn
        (neotree-show)
        (if project-dir
            (neotree-dir project-dir))
        (if file-name
            (neotree-find file-name)))))))
(defun neotree-current-dir-toggle ()
  (interactive)
  (let ((project-dir
         (ignore-errors
           (ffip-project-root)
           ))
        (file-name (buffer-file-name))
        (neo-smart-open t))
    (if (and (fboundp 'neo-global--window-exists-p)
             (neo-global--window-exists-p))
        (neotree-hide)
      (progn
        (neotree-show)
        (if project-dir
            (neotree-dir project-dir))
        (if file-name
            (neotree-find file-name)))))))
** 完 windmove
This built-in Emacs package lets you move point from window to window
using more familiar key combinations than the default ~C-x o~.

I added some functions to improve defaults.
https://emacs.stackexchange.com/questions/40821/open-new-window-and-switch-to-it
#+begin_src emacs-lisp
    (use-package windmove
      :preface
      (defun sync0-split-and-follow-horizontally ()
        (interactive)
        (split-window-below)
        (balance-windows)
        (other-window 1))

      (defun sync0-split-and-follow-vertically ()
        (interactive)
        (split-window-right)
        (balance-windows)
        (other-window 1))

      :config
  (require 'neotree)

      (defhydra sync0-hydra-file-access (:color amaranth :hint nil :exit t)
        "
    ^Windows^                   ^Buffers^          ^Search^
    ^^^^^^---------------------------------------------------------------
    _1_: Delete others       _w_: Write         _r_: Recent
    _2_: Split horizontally  _a_: Write as      _f_: Find
    _3_: Split vertically    _b_: Open           
    ^ ^                      _k_: Kill
    ^ ^                      _o_: Other window  
    ^^^^^^---------------------------------------------------------------
    ^Bookmarks^                 ^Neotree^                
    ^^^^^^---------------------------------------------------------------
    _j_: Jump to bookmark    _d_: Toggle          [q] Quit    
    _m_: Set bookmark        
    _l_: List bookmarks
    _g_: Go bk otr window

    "
        ("1" delete-other-windows)
        ("2" sync0-split-and-follow-horizontally)
        ("3" sync0-split-and-follow-vertically)
        ("b" ivy-switch-buffer)
        ;; Quickly save
        ("w" save-buffer)
        ("a" write-file)
        ;; Kill current buffer and window
        ("k" kill-buffer-and-window)
        ("o" ivy-switch-buffer-other-window)
        ("r" counsel-recentf)
        ("f" counsel-find-file)
        ("m" bookmark-set)
        ("j" counsel-bookmark)
        ("g" bookmark-jump-other-window)
        ("l" bookmark-bmenu-list)
        ("d" sync0-neotree-project-dir-toggle)
        ("q" nil :color blue))

      :bind 
      (("M-," . windmove-left)
       ("<f5>" . sync0-hydra-file-access/body)
       ("C-x 2" . sync0-split-and-follow-horizontally)
       ("C-x 3" . sync0-split-and-follow-vertically)
       ;; ("M-<up>" . windmove-up)
       ;; ("M-<down>" . windmove-down)
       ("M-." . windmove-right)))
#+end_src
** 完 abbrev
#+begin_src emacs-lisp
  (use-package abbrev
    :diminish abbrev-mode
    :custom
    ;; Tell Emacs where to read abbrevs.  
    (abbrev-file-name "~/.emacs.d/abbrev_defs")
    ;; Save abbrevs when files are saved.
    (save-abbrevs t)
    ;; Don't notify when abbrevs are saved.
    (save-abbrevs 'silently)
    ;; Accept ' as a word constituent. 
    (dabbrev-abbrev-char-regexp  "\\sw")
    :config
    ;; Avoid errors when reading abbrev_defs.
    (if (file-exists-p abbrev-file-name)
        (quietly-read-abbrev-file))

    ;; Avoid expansion character insertion. 
    ;; Use this function on a per-abbrev basis.
    ;; This is the "hook" function
    (defun dont-insert-expansion-char ()  t) 
    ;; The hook should have a "no-self-insert" property set 
    (put 'dont-insert-expansion-char 'no-self-insert t) 

    ;; Initialize abbrev-mode by default. 
    (setq-default abbrev-mode t)

    ;; Add abbrevs manually.
    (defun sync0-define-local-abbrev (name expansion)
      "Defines a new abbrev for current local abbrev table."
      (interactive "sEnter abbrev:\nsEnter expansion:")
      (when (and name expansion (not (equal name expansion)))
        (define-abbrev local-abbrev-table name expansion)
        (message "\"%s\" now expands to \"%s\" %sally"
                 name expansion "loc")))

    ;; Auto-update abbrev table on save.
    (add-hook 'after-save-hook (lambda ()
                                 (when (equal buffer-file-name "/home/sync0/.emacs.d/abbrev_defs")
                                   (read-abbrev-file)))))
#+end_src
** 完 auto-fill
#+begin_src emacs-lisp
     (use-package auto-fill
       :diminish auto-fill-mode
  :preface
       ;; Configure exceptions for auto-fill mode. 
       (defun sync0-nobreak-p ()
         (and (looking-at "+[[:alnum:]]")
              (looking-back "^\\\[A-z]+{.+" (line-beginning-position))))
  :custom
       ;; Define column width for auto-fill mode. 
       (fill-column 75)
       :hook 
       (text-mode . turn-on-auto-fill)
       :config
       ;; Respect de la typographie française par auto-fill mode.
       ;; (setq fill-nobreak-predicate '(fill-french-nobreak-p))
       ;; Set hook for exceptions to auto-fill-mode.
       (add-hook 'fill-nobreak-predicate #'sync0-nobreak-p))
#+end_src
** 完 no-break-fade
#+begin_src emacs-lisp
    (use-package nobreak-fade 
  :after auto-fill
      :defer t
      :load-path "~/.emacs.d/sync0/nobreak-fade.el" 
      :after tex
      ;; :command nobreak-fade
      :config
      (autoload 'nobreak-fade-single-letter-p "nobreak-fade")
      ;; (add-hook 'tex-mode-hook 'nobreak-fade)
      (add-hook 'fill-nobreak-predicate 'nobreak-fade-single-letter-p))
#+end_src
** 完 fancy-battery
Fancy battery. 
#+begin_src emacs-lisp
  (use-package fancy-battery
    :diminish fancy-battery-mode
    :hook 
    (after-init . fancy-battery-mode))
#+end_src
** 完 rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :diminish rainbow-delimiters-mode
    :hook 
    ((text-mode . rainbow-delimiters-mode)
     (prog-mode . rainbow-delimiters-mode))
    :custom 
    (rainbow-delimiters-max-face-count 3))
#+end_src
** 完 all-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons 
    :diminish all-the-icons-mode
    :after ivy
    :custom
    ;; improve performance 
    (inhibit-compacting-font-caches t)
    :config
    ;; ivy setup
    (all-the-icons-ivy-setup))
#+end_src
** 完 doom-themes
The best themes in Emacs.  This really is. 
#+begin_src emacs-lisp
  (use-package doom-themes  
    :init
    (progn
      (load-theme 'doom-nord t)
      (load-theme 'doom-nova t)
      ;; (load-theme 'doom-spacegrey t)
      (load-theme 'doom-solarized-light t))
    ;; :custom
    ;; (doom-themes-enable-bold t) ; if nil, bold is universally disabled
    ;; (doom-themes-enable-italic t) ; if nil, italics is universally disabled
    :config
    ;; Correct org-mode's native fontification.
    (doom-themes-org-config)
    ;; Enable custom neotree theme (all-the-icons fonts must be installed).
    (doom-themes-neotree-config)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config))
#+end_src

Cycle between themes.
#+begin_src emacs-lisp
  (use-package cycle-themes 
    :load-path "~/.emacs.d/sync0_git/cycle-themes.el/" 
    :after doom-themes
    :config 
    (setq cycle-themes-theme-list '(doom-nord doom-nova doom-solarized-light))
    (cycle-themes-mode))
#+end_src
** 完 doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline 
    ;; :after doom-themes
    :diminish doom-modeline-mode
    :hook 
    (after-init . doom-modeline-mode)
    :custom
    ;; How tall the mode-line should be. It's only respected in GUI.
    ;; If the actual char height is larger, it respects the actual height.
    (doom-modeline-height 25)
    ;; How wide the mode-line bar should be. It's only respected in GUI.
    (doom-modeline-bar-width 2)
    ;; Whether display the `evil' state icon.
    (doom-modeline-evil-state-icon t)
    (doom-modeline-buffer-file-name-style 'truncate-upto-project)
    ;; Whether display icons in mode-line or not.
    (doom-modeline-icon (display-graphic-p))
    ;; Whether display the icon for major mode. It respects `doom-modeline-icon'.
    (doom-modeline-major-mode-icon t)
    ;; Whether display minor modes in mode-line or not.
    ;; (setq doom-modeline-minor-modes (featurep 'minions))
    (doom-modeline-minor-modes nil)
    ;; Whether display color icons for `major-mode'. It respects
    ;; `doom-modeline-icon' and `all-the-icons-color-icons'.
    (doom-modeline-major-mode-color-icon t)
    ;; Whether display icons for buffer states. It respects `doom-modeline-icon'.
    (doom-modeline-buffer-state-icon t)
    ;; Whether display buffer modification icon. It respects `doom-modeline-icon'
    ;; and `doom-modeline-buffer-state-icon'.
    (doom-modeline-buffer-modification-icon t)
    ;; If non-nil, a word count will be added to the selection-info modeline segment.
    (doom-modeline-enable-word-count t)
    ;; Whether display buffer encoding.
    (doom-modeline-buffer-encoding t)
    ;; Whether display indentation information.
    (doom-modeline-indent-info nil)
    ;; If non-nil, only display one number for checker information if applicable.
    (doom-modeline-checker-simple-format t)
    ;; The maximum displayed length of the branch name of version control.
    ;; (doom-modeline-vcs-max-length 12)
    ;; Whether display perspective name or not. Non-nil to display in mode-line.
    (doom-modeline-persp-name nil)
    ;; Whether display icon for persp name. Nil to display a # sign. It respects `doom-modeline-icon'
    (doom-modeline-persp-name-icon nil)
    ;; Whether display `lsp' state or not. Non-nil to display in mode-line.
    (doom-modeline-lsp nil)
    ;; Whether display github notifications or not. Requires `ghub` package.
    (doom-modeline-github nil)
    ;; The interval of checking github.
    ;; (setq doom-modeline-github-interval (* 30 60))
    ;; Whether display mu4e notifications or not. Requires `mu4e-alert' package.
    (doom-modeline-mu4e nil))
#+end_src
** 完 ispell
#+begin_src emacs-lisp
  (use-package ispell
    :diminish ispell-mode
    :custom
    ;; Save a new word to personal dictionary without asking
    (ispell-silently-savep t)
    ;; Set up hunspell dictionaries
    (ispell-hunspell-dict-paths-alist
     '(("en_US-large" "/usr/share/hunspell/en_US-large.aff")
       ;; ("de_DE" "/usr/share/hunspell/de_DE.aff")
       ;; ("it_IT" "/usr/share/hunspell/it_IT.aff")
       ("es_ANY" "/usr/share/hunspell/es_ANY.aff")
       ("fr_FR" "/usr/share/hunspell/fr_FR.aff")))
    :config
    ;; if hunspell does NOT exist, use aspell
    (cond ((executable-find "hunspell")
           (setq ispell-program-name "hunspell")
           ;;(setq ispell-local-dictionary "en_US")
           (setq ispell-local-dictionary-alist '(("en_US-large" "[[:alpha:]]" "[^[:alpha:]]" "['-]" t ("-d" "en_US-large" ) nil utf-8)
                                                 ;; ("de_DE" "[[:alpha:]ÄÖÜéäöüß]" "[^[:alpha:]ÄÖÜéäöüß]" "['’-]" t ("-d" "de_DE") nil utf-8)
                                                 ("es_ANY" "[[:alpha:]ÁÉÍÓÚÄËÏÖÜÑáéíóúäëïöüñ]" "[^[:alpha:]ÁÉÍÓÚÄËÏÖÜÑáéíóúäëïöüñ]" "['’-]" t ("-d" "es_ANY") nil utf-8)
                                                 ;; ("it_IT" "[[:alpha:]AEÉIOUàèéìòù]" "[^[:alpha:]AEÉIOUàèéìòù]" "['’-]" t ("-d" "it_IT") "~tex" nil utf-8)
                                                 ("fr_FR" "[[:alpha:]ÀÂÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü]" "[^[:alpha:]ÀÂÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü]" "[’'-]" t ("-d" "fr_FR")  nil utf-8))))

          ((executable-find "aspell")
           (setq ispell-program-name "aspell")
           ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
           (setq ispell-extra-args '("--sug-mode=ultra"))))

    (require 'sync0-ispell-abbrev)
    (require 'sync0-ispell-skip-regions)

    :bind
    (("M-i" . endless/ispell-word-then-abbrev)))
#+end_src
** 完 flyspell
#+begin_src emacs-lisp
  (use-package flyspell 
    :after (org ispell)
    :diminish flyspell-mode
    :hook 
    (text-mode . flyspell-mode)
    :custom
    (ispell-parser 'tex)
    (flyspell-issue-message-flag nil)
    :config
    ;; Check next highlighted word custom function.
    (defun sync0-flyspell-check-next-highlighted-word ()
      "Custom function to spell check next highlighted word"
      (interactive)
      (flyspell-goto-next-error)
      (ispell-word)))
#+end_src
** 完 tex
#+begin_src emacs-lisp
  (use-package tex
    :defer t
    :after evil
    :diminish tex-mode
    :custom
    (preview-gs-command "/usr/local/bin/gs")
    (TeX-PDF-mode t)
    :config
    ;; Compile tex documents automatically.
    (defun sync0-latex-fast-compile ()
      "Fast compile current file"
      (TeX-command "LaTeX" 'TeX-master-file))

    ;; Compile tex documents automatically after save.
    (defun sync0-after-save-actions ()
      "Used in `after-save-hook'."
      (when (equal this-command 'save-buffer)
        (when (equal major-mode 'latex-mode) 
          (sync0-latex-fast-compile))))

       (evil-define-key 'normal LaTeX-mode-map
         "k" 'previous-line
         "j" 'next-line
         ;;  "m" 'set-mark-command
         "q" 'fill-paragraph
         "Q" 'sync0-insert-line-below
         (kbd "SPC") 'sync0-insert-whitespace
         "[" 'backward-sentence
         "]" 'forward-sentence)

       (evil-define-key 'visual LaTeX-mode-map
         "q" 'highlight-changes-remove-highlight)
    :hook 
    ;; Set hooks to execute after files are saved. 
    (after-save . sync0-after-save-actions))
#+end_src
** 完 bibtex
#+begin_src emacs-lisp
    (use-package bibtex
      :defer t
      :after evil
      :custom
      (bibtex-dialect 'biblatex) ;; biblatex as default bib format
      (bibtex-maintain-sorted-entries t)
      (bibtex-field-delimiters 'braces)
      (bibtex-entry-delimiters 'braces)
      (bibtex-comma-after-last-field t)
      (bibtex-align-at-equal-sign t)
      (bibtex-text-indentation 0)
      (bibtex-autokey-names 1)
      (bibtex-autokey-names-stretch 1)
      (bibtex-autokey-additional-names " et al")
      (bibtex-autokey-name-separator "_")
      (bibtex-autokey-name-year-separator "")
      (bibtex-autokey-name-length t)
      (bibtex-autokey-year-title-separator "")
      (bibtex-autokey-titleword-length 0)
      (bibtex-autokey-year-length 4)
      (bibtex-autokey-titleword-case-convert "uppercase")
      (bibtex-autokey-titlewords 0)
      (bibtex-entry-format '(opts-or-alts required-fields numerical-fields page-dashes whitespace braces last-comma delimiters sort-fields))

      :config
  (require 'sync0-bibtex-functions)
  (require 'sync0-bibtex-default-fields))
#+end_src
** 完 ivy-bibtex
#+begin_src emacs-lisp
    (use-package ivy-bibtex 
      :diminish ivy-bitex-mode
      :after (ivy bibtex)
      :custom 
      (bibtex-completion-bibliography '("~/Dropbox/research/bibliography.bib")) ;; writing completion
      (bibtex-completion-notes-path '"~/Dropbox/research")
      (bibtex-completion-library-path '("~/Dropbox/research/"))
      (bibtex-completion-pdf-field "file")
      (bibtex-completion-pdf-symbol "⌘")
      (bibtex-completion-notes-symbol "✎")
      (bibtex-completion-notes-template-multiple-files  
       "
      ,#+STARTUP: indent nostars logdrawer content
      ,#+TITLE: ${title}
      ,#+CREATOR: ${=key=}
      ,#+AUTHOR: ${author-or-editor}
      ,#+INTERLEAVE_PDF: ${file}
      ,#+SETUPFILE: \"~/Dropbox/typography/article_two_column.org\" 
      ,#+INCLUDE: \"~/Dropbox/typography/layouts.org::*Research: Two Column\" :only-contents t
      ,#+INCLUDE: \"~/Dropbox/typography/settings.org::*English\" :only-contents t

      ,#+BEGIN_modified
      fullcite:${=key=}
      \\tcblower
      Last modified: 
      ,#+END_modified


      # \\printbibliography[title=bibliographie,heading=subbibliography]
      # \\printbibliography[title=references]
      # \\printbibliography[title=bibliographie]")
      (ivy-bibtex-default-action 'ivy-bibtex-edit-notes)

  :config 
  (defun sync0-ivy-bibtex ()
    (interactive)
    (setq ivy-bibtex-default-action 'ivy-bibtex-insert-key)
    (bibtex-completion-init)
    (let* ((candidates (bibtex-completion-candidates))
           (key (bibtex-completion-key-at-point))
           (preselect (and key
                           (cl-position-if (lambda (cand)
                                             (member (cons "=key=" key)
                                                     (cdr cand)))
                                           candidates))))
      (ivy-read "BibTeX entries%s: "
                candidates
                :preselect preselect
                :caller 'ivy-bibtex
                :action ivy-bibtex-default-action))))
#+end_src
** 完 yasnippets
#+begin_src emacs-lisp
  (use-package yasnippet 
    :defer t
    :commands yas-minor-mode 
    :config
    (require 'sync0-yasnippet-bibtex)
    (yas-reload-all)
    :hook 
    ((LaTeX-mode . yas-minor-mode)
     (text-mode . yas-minor-mode)
     (mu4e-mode . yas-minor-mode)
     (bibtex-mode . yas-minor-mode)))
#+end_src
** 完 smooth-scrolling
#+begin_src emacs-lisp
  (use-package smooth-scrolling 
    :defer t
    :commands (sync0-scroll-up sync0-scroll-down)
    :diminish smooth-scrolling-mode
    :custom
    (smooth-scroll-margin 5)
    ;; change behavior of org movement
    ;; (org-special-ctrl-a/e t)
    :preface
    (defun sync0-scroll-up ()
      "Improve scroll up behavior"
      (interactive)
      (scroll-down 1))

    (defun sync0-scroll-down ()
      "Improve scroll down behavior"
      (interactive)
      (scroll-up 1))

    :config
    (smooth-scrolling-mode 1)
    :bind
    (("M-k" . sync0-scroll-up)
     ("M-j" . sync0-scroll-down)))
#+end_src
** 完 hl-line mode
#+begin_src emacs-lisp
  (use-package hl-line 
    :diminish hl-line-mode
    :hook 
    ((text-mode conf-mode prog-mode) . hl-line-mode)
    :custom
    ;; I don't need hl-line showing in other windows. This also offers a small
    ;; speed boost when buffer is displayed in multiple windows.
    (hl-line-sticky-flag nil)
    (global-hl-line-sticky-flag nil))
#+end_src
** 完 smartparens
#+begin_src emacs-lisp
      ;; Auto-close delimiters and blocks as you type
      (use-package smartparens
  :after evil
    :diminish smartparens-mode
        :hook 
    ((emacs-startup . smartparens-global-mode)
    ;; (emacs-startup . show-smartparens-global-mode)
        ;; Disable smartparens in evil-mode's replace state; they conflict.
        (evil-replace-state-entry-hook . turn-off-smartparens-mode)
        (evil-replace-state-exit-hook  . turn-on-smartparens-mode))

        :custom
        (sp-autowrap-region nil) ; let evil-surround handle this
        (sp-highlight-pair-overlay nil)
        (sp-cancel-autoskip-on-backward-movement nil)
        (sp-show-pair-delay 0)
        (sp-max-pair-length 3)

        :config
        (require 'smartparens-config)

        (defun sp-latex-insert-spaces-inside-pair (_id action _context)
          "ID, ACTION, CONTEXT."
          (when (eq action 'insert)
            (insert "  ")
            (backward-char 1))
          (when (and (eq action 'wrap)
                     (save-excursion
                       (goto-char (sp-get sp-last-wrapped-region :beg-in))
                       (not (sp--looking-back-p "[[{(]"))))
            (save-excursion
              (goto-char (sp-get sp-last-wrapped-region :end-in))
              (insert " ")
              (goto-char (sp-get sp-last-wrapped-region :beg-in))
              (insert " "))))

        (defun sp-latex-skip-match-apostrophe (ms _mb me)
          "MS, MB, ME."
          (when (equal ms "'")
            (save-excursion
              (goto-char me)
              (looking-at-p "\\sw"))))

        (defun sp-latex-skip-double-quote (_id action _context)
          "ID, ACTION, CONTEXT."
          (when (eq action 'insert)
            (when (looking-at-p "''''")
              (delete-char -2)
              (delete-char 2)
              (forward-char 2))))

        (defun sp-latex-point-after-backslash (id action _context)
          "Return t if point follows a backslash, nil otherwise.
        This predicate is only tested on \"insert\" action.
        ID, ACTION, CONTEXT."
          (when (eq action 'insert)
            (let ((trigger (sp-get-pair id :trigger)))
              (looking-back (concat "\\\\" (regexp-quote (if trigger trigger id))) nil))))


        ;; Add custom pairs
        ;; (require 'smartparens-latex)

        ;; (add-to-list 'sp-navigate-skip-match
        ;;              '((tex-mode plain-tex-mode latex-mode) . sp--backslash-skip-match))

        (sp-with-modes '(tex-mode
                         org-mode
                         latex-mode
                         LaTeX-mode)

          (sp-local-pair "`" "'"
                         ;; :actions '(:rem autoskip)
                         ;; :skip-match 'sp-latex-skip-match-apostrophe
                         :unless '(sp-latex-point-after-backslash))

          ;; math modes, yay.  The :actions are provided automatically if
          ;; these pairs do not have global definitions.

          (sp-local-pair "$" "$")
          (sp-local-pair "\\[" "\\]"
                         :unless '(sp-latex-point-after-backslash))

          ;; disable useless pairs.
          (sp-local-pair "\\\\(" nil :actions nil)
          (sp-local-pair "'" nil :actions nil)
          (sp-local-pair "\\\"" nil :actions nil)

          ;; quote should insert ``'' instead of double quotes.  If we ever
          ;; need to insert ", C-q is our friend.
          ;; (sp-local-pair "``" "''"
          ;;                :trigger "\""
          ;;                :unless '(sp-latex-point-after-backslash)
          ;;                :post-handlers '(sp-latex-skip-double-quote))

          ;; add the prefix function sticking to {} pair
          (sp-local-pair "{" nil :prefix "\\\\\\(\\sw\\|\\s_\\)*")

          ;; do not add more space when slurping
          (sp-local-pair "{" "}")
          (sp-local-pair "(" ")")
          (sp-local-pair "[" "]")

          ;; pairs for big brackets.  Needs more research on what pairs are
          ;; useful to add here.  Post suggestions if you know some.
          ;; (sp-local-pair "\\left(" "\\right)"
          ;;                :trigger "\\l("
          ;;                :when '(sp-in-math-p)
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\left[" "\\right]"
          ;;                :trigger "\\l["
          ;;                :when '(sp-in-math-p)
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\left\\{" "\\right\\}"
          ;;                :trigger "\\l{"
          ;;                :when '(sp-in-math-p)
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\left|" "\\right|"
          ;;                :trigger "\\l|"
          ;;                :when '(sp-in-math-p)
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\bigl(" "\\bigr)"
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\biggl(" "\\biggr)"
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\Bigl(" "\\Bigr)"
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\Biggl(" "\\Biggr)"
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\bigl[" "\\bigr]"
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\biggl[" "\\biggr]"
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\Bigl[" "\\Bigr]"
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\Biggl[" "\\Biggr]"
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\bigl\\{" "\\bigr\\}"
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\biggl\\{" "\\biggr\\}"
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\Bigl\\{" "\\Bigr\\}"
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\Biggl\\{" "\\Biggr\\}"
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\lfloor" "\\rfloor"
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\lceil" "\\rceil"
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair "\\langle" "\\rangle"
          ;;                :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair  "\\lVert" "\\rVert"
          ;;                 :when '(sp-in-math-p)
          ;;                 :trigger "\\lVert"
          ;;                 :post-handlers '(sp-latex-insert-spaces-inside-pair))
          ;; (sp-local-pair  "\\lvert" "\\rvert"
          ;;                 :when '(sp-in-math-p)
          ;;                 :trigger "\\lvert"
          ;;                 :post-handlers '(sp-latex-insert-spaces-inside-pair)))

        ;; some common wrappings
        (sp-local-tag "\"" "``" "''" :actions '(wrap)))

        (defhydra hydra-learn-sp (:hint nil)
          "
            _B_ backward-sexp            -----
            _F_ forward-sexp               _s_ splice-sexp
            _L_ backward-down-sexp         _df_ splice-sexp-killing-forward
            _H_ backward-up-sexp           _db_ splice-sexp-killing-backward
          ^^------                         _da_ splice-sexp-killing-around
            _k_ down-sexp                -----
            _j_ up-sexp                    _C-s_ select-next-thing-exchange
          -^^-----                         _C-p_ select-previous-thing
            _n_ next-sexp                  _C-n_ select-next-thing
            _p_ previous-sexp            -----
            _a_ beginning-of-sexp          _C-f_ forward-symbol
            _z_ end-of-sexp                _C-b_ backward-symbol
          --^^-                          -----
            _t_ transpose-sexp             _c_ convolute-sexp
          -^^--                            _g_ absorb-sexp
            _x_ delete-char                _q_ emit-sexp
            _dw_ kill-word               -----
            _dd_ kill-sexp                 _,b_ extract-before-sexp
          -^^--                            _,a_ extract-after-sexp
            _S_ unwrap-sexp              -----
          -^^--                            _AP_ add-to-previous-sexp
            _C-h_ forward-slurp-sexp       _AN_ add-to-next-sexp
            _C-l_ forward-barf-sexp      -----
            _C-S-h_ backward-slurp-sexp    _ join-sexp
            _C-S-l_ backward-barf-sexp     _|_ split-sexp
          "
          ;; TODO: Use () and [] - + * | <space>
          ("B" sp-backward-sexp );; similiar to VIM b
          ("F" sp-forward-sexp );; similar to VIM f
          ;;
          ("L" sp-backward-down-sexp )
          ("H" sp-backward-up-sexp )
          ;;
          ("k" sp-down-sexp ) ; root - towards the root
          ("j" sp-up-sexp )
          ;;
          ("n" sp-next-sexp )
          ("p" sp-previous-sexp )
          ;; a..z
          ("a" sp-beginning-of-sexp )
          ("z" sp-end-of-sexp )
          ;;
          ("t" sp-transpose-sexp )
          ;;
          ("x" sp-delete-char )
          ("dw" sp-kill-word )
          ;;("ds" sp-kill-symbol ) ;; Prefer kill-sexp
          ("dd" sp-kill-sexp )
          ;;("yy" sp-copy-sexp ) ;; Don't like it. Pref visual selection
          ;;
          ("S" sp-unwrap-sexp ) ;; Strip!
          ;;("wh" sp-backward-unwrap-sexp ) ;; Too similar to above
          ;;
          ("C-h" sp-forward-slurp-sexp )
          ("C-l" sp-forward-barf-sexp )
          ("C-S-h" sp-backward-slurp-sexp )
          ("C-S-l" sp-backward-barf-sexp )
          ;;
          ;;("C-[" (bind (sp-wrap-with-pair "[")) ) ;;FIXME
          ;;("C-(" (bind (sp-wrap-with-pair "(")) )
          ;;
          ("s" sp-splice-sexp )
          ("df" sp-splice-sexp-killing-forward )
          ("db" sp-splice-sexp-killing-backward )
          ("da" sp-splice-sexp-killing-around )
          ;;
          ("C-s" sp-select-next-thing-exchange )
          ("C-p" sp-select-previous-thing )
          ("C-n" sp-select-next-thing )
          ;;
          ("C-f" sp-forward-symbol )
          ("C-b" sp-backward-symbol )
          ;;
          ;;("C-t" sp-prefix-tag-object)
          ;;("H-p" sp-prefix-pair-object)
          ("c" sp-convolute-sexp )
          ("g" sp-absorb-sexp )
          ("q" sp-emit-sexp )
          ;;
          (",b" sp-extract-before-sexp )
          (",a" sp-extract-after-sexp )
          ;;
          ("AP" sp-add-to-previous-sexp );; Difference to slurp?
          ("AN" sp-add-to-next-sexp )
          ;;
          ("_" sp-join-sexp ) ;;Good
          ("|" sp-split-sexp )) 

        :bind (("M-g M-p" . hydra-learn-sp/body)))
#+end_src
** 完 magit
#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :diminish magit-mode
    :commands (magit-status magit-blame)
    ;; The following configuration has magit use full screen mode.
    ;; :init
    ;; (defadvice magit-status (around magit-fullscreen activate)
    ;;   (window-configuration-to-register :magit-fullscreen)
    ;;   ad-do-it
    ;;   (delete-other-windows))
    :custom
    (magit-branch-arguments nil)
    ;; use ido to look for branches
    ;; (magit-completing-read-function 'magit-ido-completing-read)
    ;; don't put "origin-" in front of new branch names by default
    ;; (magit-default-tracking-name-function 'magit-default-tracking-name-branch-only)
    (magit-push-always-verify nil)
    ;; Get rid of the previous advice to go into fullscreen
    (magit-restore-window-configuration t)
    :bind
    ;; bind a quick and dirty shortcut to 
    (("C-x g" . magit-status)
     ;;  bind the popup of popus
     ("C-x M-g" . magit-dispatch)))
#+end_src
** 完 calendar & holidays
#+begin_src emacs-lisp
  (use-package calendar 
    :custom
    (calendar-date-style 'european) 
    (european-calendar-style t)
    (calendar-week-start-day 0)    ; week starts on monday
    (calendar-day-name-array     ["Dimanche" "Lundi" "Mardi" "Mercredi" "Jeudi" "Vendredi" "Samedi"])
    (calendar-day-abbrev-array   ["dim" "lun" "mar" "mer" "jeu" "ven" "sam"])
    (calendar-month-name-array   ["Janvier" "Février" "Mars" "Avril" "Mai" "Juin" "Juillet"
                                  "Août" "Septembre" "Octobre" "Novembre" "Décembre"])
    (calendar-month-abbrev-array ["jan" "fév" "mar" "avr" "mai" "jun" "jul" "aoû" "sep" "oct" "nov" "déc"]))

  (use-package holidays 
    :after calendar
    :custom
    (calendar-holidays
     '((holiday-easter-etc 0 "Pâques")
       (holiday-easter-etc 1 "Lundi de Pâques")
       (holiday-easter-etc 39 "Ascension")
       (holiday-easter-etc 49 "Pentecôte")
       (holiday-easter-etc -47 "Mardi gras"))))
#+end_src
** 完 calfw
#+begin_src emacs-lisp
  (use-package calfw 
    :defer t
    :commands sync0-open-calendar
    :after (calendar evil)
    :preface
    (require 'calfw-org)
    ;;(require 'calfw-gcal)
    ;;(require 'calfw-cal)
    (defun sync0-open-calendar ()
      (interactive)
      (let ((buf (get-buffer "*cfw-calendar*")))
        (if buf
            (pop-to-buffer buf nil)
          (cfw:open-calendar-buffer
           :contents-sources
           (list (cfw:org-create-source "#c0c5ce")) :view 'week))))
    :commands sync0-open-calendar
    :config
    (add-to-list 'evil-emacs-state-modes 'cfw:details-mode)
    :custom
    (cfw:fchar-junction ?╋)
    (cfw:fchar-vertical-line ?┃)
    (cfw:fchar-horizontal-line ?━)
    (cfw:fchar-left-junction ?┣)
    (cfw:fchar-right-junction ?┫)
    (cfw:fchar-top-junction ?┯)
    (cfw:fchar-top-left-corner ?┏)
    (cfw:fchar-top-right-corner ?┓)
    :bind
    (("<f7>" . sync0-open-calendar)
     :map cfw:details-mode-map
     ("SPC"  . cfw:details-kill-buffer-command)))
#+end_src
** 完 alert (Growl)
#+begin_src emacs-lisp
  (use-package alert :load-path "~/.emacs.d/sync0_git/alert")
#+end_src
** 完 git-gutter
#+begin_src emacs-lisp
    (use-package git-gutter 
      :diminish git-gutter-mode
      :hook 
      (text-mode . git-gutter-mode)
      (prog-mode . git-gutter-mode)
      :custom
      (git-gutter:window-width 1)
      (git-gutter:modified-sign " ") 
      (git-gutter:added-sign " ")    
      (git-gutter:deleted-sign " ")
      :config
      (set-face-background 'git-gutter:modified "#3a81c3") ;; background color
      (set-face-background 'git-gutter:added "#7ccd7c")
      (set-face-background 'git-gutter:deleted "ee6363")

      (defhydra sync0-hydra-git-gutter
        (:body-pre (git-gutter-mode 1) :hint nil)
        "
                                                               ╭─────────────────┐
                            Movement   Hunk Actions     Misc.  │ gg: +%-4s(car (git-gutter:statistic))/ -%-3s(cdr (git-gutter:statistic)) │
                            ╭──────────────────────────────────┴─────────────────╯
                               ^_g_^       [_s_] stage        [_R_] set start Rev
                               ^_k_^       [_r_] revert
                               ^↑ ^      [_m_] mark
                               ^↓ ^      [_p_] popup          ╭──────────────────────
                               ^_j_^                          │[_q_] quit
                               ^_G_^                          │[_Q_] Quit and disable"
        ("j" (progn (git-gutter:next-hunk 1) (recenter)))
        ("k" (progn (git-gutter:previous-hunk 1) (recenter)))
        ("g" (progn (goto-char (point-min)) (git-gutter:next-hunk 1)))
        ("G" (progn (goto-char (point-min)) (git-gutter:previous-hunk 1)))
        ("s" git-gutter:stage-hunk)
        ("r" git-gutter:revert-hunk)
        ("m" git-gutter:mark-hunk)
        ("p" git-gutter:popup-hunk)
        ("R" git-gutter:set-start-revision)
        ("q" nil :color blue)
        ("Q" (git-gutter-mode -1) :color blue))
  :bind
      (("C-c h g" . sync0-hydra-git-gutter/body)))
#+end_src
** 完 git-time-machine
#+begin_src emacs-lisp
  (use-package git-timemachine
    :defer t
    :after evil
    :commands 
    (git-timemachine git-timemachine-toggle)
    :custom
    (git-timemachine-show-minibuffer-details nil)
    :config
    (require 'magit-blame)

    ;; Sometimes I forget `git-timemachine' is enabled in a buffer, so instead of
    ;; showing revision details in the minibuffer, show them in
    ;; `header-line-format', which has better visibility.

    ;; (add-hook 'git-timemachine-mode-hook #'+vcs|init-header-line)
    ;; (advice-add #'git-timemachine-show-revision :after #'+vcs*update-header-line)

    ;; Force evil to rehash keybindings for the current state
    (add-hook 'git-timemachine-mode-hook #'evil-force-normal-state))
#+end_src
** 完 ediff
#+begin_src emacs-lisp
  (use-package ediff
    :custom
    ;; No separate frame for ediff control buffer
    (ediff-window-setup-function #'ediff-setup-windows-plain)
    ;; Split windows horizontally in ediff (instead of vertically)
    (ediff-split-window-function #'split-window-vertically))
#+end_src
** 完 festival
This package simply reads aloud text selections. If this functionality
seems trivial, as an academic writer, it has proven quite useful. Use
it to improve the /feel/ (cadence and rhythm) of your writing. 

Caveat: Getting this package to work was a PITA; on top of the
installation, you must rummage the internet for the voices. The
default voices are just not usable. As an Arch Linux user, I found
some quality voices in the AUR repositories.

#+begin_src emacs-lisp
  (use-package festival 
    :defer t
    :after evil
    :load-path "~/.emacs.d/sync0/" 
    :commands say-minor-mode
    :config
    (autoload 'say-minor-mode "festival" "Menu for using Festival." t)
    ;; (say-minor-mode t)

    (defun sync0-festival-el () 
      (interactive)
      (festival-send-command '(voice_el_diphone)))

    (defun sync0-festival-english-male () 
      (interactive)
      (festival-send-command '(voice_nitech_us_awb_arctic_hts)))

    (defun sync0-festival-english-female () 
      (interactive)
      (festival-send-command '(voice_nitech_us_slt_arctic_hts)))
    :bind 
    (:map evil-visual-state-map 
          ("s" . festival-say-region)))
#+end_src
** 完 saveplace
This is Emacs' default minor mode to save your location in visited
files. With ~saveplace~ enabled, when you open a file, the point goes to
its last location. 

#+begin_src emacs-lisp
  (use-package saveplace
    :preface
    (defun sync0-save-place-reposition ()
      "Force windows to recenter current line (with saved position)."
      (run-with-timer 0 nil
                      (lambda (buf)
                        (when (buffer-live-p buf)
                          (dolist (win (get-buffer-window-list buf nil t))
                            (with-selected-window win (recenter)))))
                      (current-buffer)))
    :init 
    ;; Start save-place-mode.
    (save-place-mode)
    :hook
    (find-file . sync0-save-place-reposition))
#+end_src
** 完 docview
This package is Emacs' default major mode for viewing DVI, PostScript,
PDF, OpenDocument, and Microsoft Office documents. This package is, in
a sense, a poor man's version of ~pdf-tools~; if I keep its
configuration, it's just in case the latter fails.

#+begin_src emacs-lisp
    (use-package doc-view 
  :disabled t
      :custom
      (doc-view-continuous t)
      :bind 
      (:map doc-view-mode-map
            ("q" . quit-window)
            ("+" . doc-view-enlarge)
            ("=" . doc-view-enlarge)
            ("-" . doc-view-shrink)
            ("0" . doc-view-scale-reset)
            ("G" . doc-view-last-page)
            ("g" . doc-view-goto-page)
            ("K" . doc-view-previous-page)
            ("J" . doc-view-next-page)
            ("k" . doc-view-scroll-down-or-previous-page)
            ("j" . doc-view-scroll-up-or-next-page)
            ("W" . doc-view-fit-width-to-window)
            ("H" . doc-view-fit-height-to-window)
            ("P" . doc-view-fit-page-to-window)
            ("X" . doc-view-kill-proc)
            ("s s" . doc-view-set-slice)
            ("s m" . doc-view-set-slice-using-mouse)
            ("s b" . doc-view-set-slice-from-bounding-box)
            ("s r" . doc-view-reset-slice)
            ("/" . doc-view-search)
            ("?" . doc-view-search-backward)))
#+end_src
** 完 google-this
This package provides a set of functions for launching google searches
from within emacs.

#+begin_src emacs-lisp
  (use-package google-this 
    :defer t
    :diminish google-this-mode
    :commands (google-this-search google-this)
    :after evil
    ;; :init
    ;; (google-this-mode 1)
    :bind 
    ;; Search selection with google.
    ;; Query google search. 
    (("C-c g" . google-this-search)
     :map evil-visual-state-map
     ("g"  . google-this)))
#+end_src
** 完 guess-language
Emacs minor mode that detects the language you're typing in.
Automatically switches spell checker. Supports multiple languages per
document.

#+begin_src emacs-lisp
    (use-package guess-language
      :after (ispell evil)
      :init
      (set-input-method nil)

     (defvar sync0-language-active 
       "Is a human language minor mode enabled?")
      (setq sync0-language-active "english")
    :custom
    (guess-language-languages '(en fr es))
    (guess-language-min-paragraph-length 35)
    (guess-language-langcodes
     '((en . ("en_US-large" "english"))
       ;; (it . ("it_IT" "italian"))
       ;; (pt . ("pt_PT" "portuguese"))
       (fr . ("fr_FR" "french"))
       (es . ("es_ANY" "spanish"))))
    :config
    (defun sync0-language-change (lang beginning end)
      "Set of functions to run after a different language is detected."
      (unless (string-equal guess-language-current-language lang)
        (cond 
         ((string-equal lang "es")
          (progn
            (setq sync0-language-active "spanish")
            (setq local-abbrev-table marquez-mode-abbrev-table)
            (set-input-method "spanish-postfix")
            (when (bound-and-true-p company-mode)
             (setq company-ispell-dictionary  (concat user-emacs-directory "dictionaries/spanish.txt")))))
         ((string-equal lang "fr")
          (progn
            (setq sync0-language-active "french")
            (setq local-abbrev-table rabelais-mode-abbrev-table)
            (set-input-method "french-postfix")
            (when (bound-and-true-p company-mode)
            (setq company-ispell-dictionary  (concat user-emacs-directory "dictionaries/french.txt")))))
         ((string-equal lang "en")
          (progn
            (setq sync0-language-active "english")
            (setq local-abbrev-table orwell-mode-abbrev-table)
            (set-input-method nil)
            (when (bound-and-true-p company-mode)
            (setq company-ispell-dictionary  (concat user-emacs-directory "dictionaries/english.txt"))))))))

    (defun sync0-lookup-word (word)
      "Search an online dictionary for the word at point according
      to the active language minor mode."
              (interactive (list (save-excursion (car (ispell-get-word nil)))))
      (cond  ((string-equal sync0-language-active "english") 
              (browse-url (format "https://www.merriam-webster.com/dictionary/%s" word)))
            ((string-equal sync0-language-active "french") 
              (browse-url (format "https://larousse.fr/dictionnaires/francais/%s" word)))
            ((string-equal sync0-language-active "spanish") 
              (browse-url (format "https://dle.rae.es/?w=%s" word)))
             (t "No language minor mode specified")))

    (defun sync0-lookup-conjugation (word)
      "Search an online dictionary for the word at point according
      to the active language minor mode."
              (interactive (list (save-excursion (car (ispell-get-word nil)))))
      (cond  ((string-equal sync0-language-active "english") 
              (browse-url (format "https://www.merriam-webster.com/dictionary/%s" word)))
            ((string-equal sync0-language-active "french") 
              (browse-url (format "http://la-conjugaison.nouvelobs.com/du/verbe/%s.php" word)))
            ((string-equal sync0-language-active "spanish") 
              (browse-url (format "http://conjugador.reverso.net/conjugacion-espanol-verbo-%s.html" word)))
             (t "No language minor mode specified")))

    ;; German 
    ;; german-postfix for evil insert mode
    ;;(add-hook 'evil-insert-state-entry-hook
    ;;(lambda () (set-input-method "german-postfix")))

    (add-hook 'guess-language-after-detection-functions #'sync0-language-change)
  :bind
  (("M-#" . sync0-lookup-word)
  ("M-$" . sync0-lookup-conjugation))
    :hook
    (text-mode . guess-language-mode))
#+end_src
** 完 focus-mode
Focus provides focus-mode that dims the text of surrounding sections.
This mode is perfect for proofreading. Thus, don't abuse it when
writing drafts.  

The amount of dimness can be customized by setting the focus-dimness
variable, where a positive integer indicates a more dim color (i.e.
more blended with the background color of your theme), and a negative
integer indicates a less dim color.

#+begin_src emacs-lisp
  (use-package focus
    :defer t
    :commands focus-mode)
#+end_src
