* Scratch Message
#+BEGIN_SRC emacs-lisp
         (setq initial-scratch-message ";; 
;;
;;   Man should not be ready to show that he can live like a
;;   badly-fed animal. He should decline to live like that, and
;;   should either steal or go on the rates, which is considered by
;;   many to be a form of stealing. As for begging, it is safer to
;;   beg than to take, but it is finer to take than to beg. No: a
;;   poor man who is ungrateful, unthrifty, discontented, and
;;   rebellious, is probably a real personality, and has much in him.
;;   He is at any rate a healthy protest. As for the virtuous poor,
;;   one can pity them, of course, but one cannot possibly admire
;;   them. They have made private terms with the enemy, and sold
;;   their birthright for very bad pottage.
;;
;;   Oscar Wilde
;;   The Soul of Man under Socialism (1891)
;; ")

  #+END_SRC 

* Toolbars

  Define a function to toggle mode line. 

  #+BEGIN_SRC emacs-lisp
    (defun sync0-toggle-mode-line () 
      "toggles the modeline on and off"
      (interactive) 
      (setq mode-line-format
            (if (equal mode-line-format nil)
                (default-value 'mode-line-format)) )
      (redraw-display))
  #+END_SRC 

  Hide tool bar, menu bar, and scroll bar at startup. 

  #+BEGIN_SRC emacs-lisp
      (tool-bar-mode -1) 
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
      (menu-bar-showhide-fringe-menu-customize-disable)
  #+END_SRC 

  In case I need those annoying toolbars back, I bind them:

  #+BEGIN_SRC emacs-lisp
    (defhydra sync0-hydra-menu-toggle (:color amaranth :hint nil :exit t)
      "
^Toolbar toggle functions^
^^^----------------
Hide mode _l_ine
Toggle _t_ool bar
Toggle _m_enu bar

_q_uit
"
      ("l" sync0-toggle-mode-line)
      ("t" tool-bar-mode)
      ("m" menu-bar-mode)
      ("q" nil :color blue))

(evil-leader/set-key
  "T" 'sync0-hydra-menu-toggle/body)
  #+END_SRC 

* Windows
  At startup,  maxmize Emacs' window. 
  #+BEGIN_SRC emacs-lisp
      (add-to-list 'default-frame-alist '(fullscreen . maximized))
  #+END_SRC

  Configure window dividers. 
  #+BEGIN_SRC emacs-lisp
          ;; On graphical displays, you can use window dividers in order to separate
          ;; windows visually.
          ;; (setq-default 
          ;;               window-divider-default-bottom-width 0
          ;;               window-divider-default-right-width 2)

    ;;      (add-hook 'emacs-startup-hook #'window-divider-mode)
#+END_SRC

Remove fringes from minibuffer. This function was taken from [[https://github.com/hlissner][hlissner]]. See
https://github.com/hlissner/emacs-solaire-mode/issues/6
#+BEGIN_SRC emacs-lisp
(defun sync0-no-fringes-in-minibuffer ()
  "Disable fringes in the minibuffer window."
  (set-window-fringes (minibuffer-window) 0 0 nil))

(add-hook 'minibuffer-setup-hook #'sync0-no-fringes-in-minibuffer)
#+END_SRC 

Remove annoying dollar sign ("$") at the end of truncated lines
when line truncation is enabled. 

 ;; (set-display-table-slot standard-display-table 0 ?\ ) 

Other settings.
#+BEGIN_SRC emacs-lisp
         (setq-default                    
          ;; Avoid ugly problemes with git-gutter.
          fringes-outside-margins t
          left-margin-width 2
          right-margin-width 0
          left-fringe-width 1
          right-fringe-width 0
          ;; Remove continuation arrow on right fringe.
          fringe-indicator-alist (delq (assq 'continuation fringe-indicator-alist)
                                       fringe-indicator-alist)
          indicate-buffer-boundaries nil
          indicate-empty-lines nil
          max-mini-window-height 0.3)
 #+END_SRC

* all-the-icons

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons 
    :straight (all-the-icons :type git :host github :repo "domtronn/all-the-icons.el") 
    :after ivy
    ;; improve performance 
    :custom (inhibit-compacting-font-caches t)
    ;; ivy setup
    :config (all-the-icons-ivy-setup))
#+END_SRC 

* doom-themes

As someone with experience in graphic design, I find vanilla
Emacs's UI ugly and unusable. In my honest opinion, doom-themes is
the best collection out there. I also use doom-modeline because it
combines simplicity with visual appeal.

Note: Although there is an accompanying package to doom-themes
called solaire-mode, it conflicted with other packages I need, so
I stopped using it.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes  
   :straight (doom-themes :type git :host github :repo "hlissner/emacs-doom-themes") 
   :after (org custom)
   :init
        ;; (load-theme 'doom-one t)
        ;; (load-theme 'doom-nord t)
        ;; (load-theme 'doom-nova t)
        ;; (load-theme 'doom-spacegrey t)
        ;; (load-theme 'doom-solarized-light t)
        ;; (load-theme 'doom-plain t)
        ;; (load-theme 'doom-gruvbox t)
         (load-theme 'doom-zenburn t)
        (load-theme 'doom-flatwhite t)
   :config
      ;; Correct org-mode's native fontification.
      (doom-themes-org-config)
      ;; Enable flashing mode-line on errors
       (doom-themes-visual-bell-config))
#+END_SRC 

** solaire-mode
#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
    :straight (solaire-mode :type git :host github :repo "hlissner/emacs-solaire-mode") 
    :disabled t
    :hook
    ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
    (minibuffer-setup . solaire-mode-in-minibuffer)
    :custom
    (solaire-mode-remap-fringe nil)
    :config
    (setq solaire-mode-remap-alist
          '(((default solaire-default-face)                       . nil)
            ((hl-line solaire-hl-line-face)                       . nil)
            ((org-hide solaire-org-hide-face)                     . nil)
            ((org-indent solaire-org-hide-face)                   . nil)
            ((linum solaire-line-number-face)                     . nil)
            ((mode-line solaire-mode-line-face)                   . solaire-mode-remap-modeline)
            ((mode-line-inactive solaire-mode-line-inactive-face) . solaire-mode-remap-modeline)))

    ;; (solaire-mode-swap-bg)

    (solaire-global-mode +1))
#+END_SRC 

* cycle-themes

Cycle between themes.

#+BEGIN_SRC emacs-lisp
  (use-package cycle-themes 
    :straight (cycle-themes :type git :host github :repo "toroidal-code/cycle-themes.el") 
    :after doom-themes
    :commands cycle-themes
    :init
    (require 'cl)
    :bind (("C-c C-t" . cycle-themes))
    :config 
    ;; The order has to be set this way for the hook to work
    (setq cycle-themes-theme-list '(doom-zenburn doom-flatwhite)))
#+END_SRC 

* mini-modeline
I use the package ~mini-modeline~ because I always liked the idea of
getting rid of the echo area. I work on a 12.5 inch screen, and so
every line I can save is important. Even though ~mini-modeline~ is
quite limited in what it offers, I like the simplicity of just
displaying few information in my modeline. True, my modeline is
quite spartan, and is not nearly as well-crafated  as
doom-modeline (the one I previously used, and whose configuration
I still keep), but it gets the job done, saves me one line of
screen, and is not as distracting as other fancier mode-lines. I
think this configuration helps to focus more on my writing, so it
is good. 

Display battery information in mode line. 

#+BEGIN_SRC emacs-lisp
(use-package battery
 :custom
  (battery-mode-line-format "%b ⚡%t")
  (battery-update-interval 60)
 :config
  (display-battery-mode t))
#+END_SRC 

Define mini-modeline segments.

I borrowed a function from:
https://stackoverflow.com/questions/8190277/how-do-i-display-the-total-number-of-lines-in-the-emacs-modeline

#+BEGIN_SRC emacs-lisp
      (use-package mini-modeline
  :straight (mini-modeline :type git :host github :repo "kiennq/emacs-mini-modeline") 
        :preface
        ;; Define a local variable with the total number of lines.
        (defvar-local sync0-mode-line-buffer-line-count nil)

        ;; Define a function that counts the number of lines in the
        ;; current buffer.
        (defun sync0-mode-line-count-lines ()
          "Count the number of lines in the current buffer."
          (setq-local sync0-mode-line-buffer-line-count 
                      (int-to-string (count-lines (point-min) (point-max)))))

        ;; Recalculate the total number of lines using hooks. This is
        ;; not the best approach, but I have not been able to devise a
        ;; dynamic way to calculate these that does not result in Emacs
        ;; "inventing" these results.
        (add-hook 'find-file-hook 'sync0-mode-line-count-lines)
        (add-hook 'after-save-hook 'sync0-mode-line-count-lines)
        (add-hook 'after-revert-hook 'sync0-mode-line-count-lines)

        :config
        (setq   mini-modeline-l-format
                '(" " 
                  mode-line-front-espace 
                  (:eval (cond 
                          (buffer-read-only (propertize "🔒 "
                                                        'face '(:family "Noto Color Emoji")
                                                        'help-echo "buffer is read-only!!!"))
                          ((buffer-modified-p) (propertize "💾 "
                                                           'face '(:family "Noto Color Emoji")))
                          (t (propertize "✔ "
                                         'face '(:family "Noto Color Emoji")))))
                  mode-line-buffer-identification 
                  "  " 
                  (:eval (propertize 
                          (if (boundp 'guess-language-current-language) 
                               (upcase (prin1-to-string guess-language-current-language))
                              "NIL")
                                'face '(:weight bold)))
                  "  "
                  (:eval 
                   (let ((line-string "L:%l"))
                     (if (and (not (buffer-modified-p))
                              sync0-mode-line-buffer-line-count)
                         (setq line-string 
                               (concat line-string "/" sync0-mode-line-buffer-line-count))
                       line-string)))))

        (setq  mini-modeline-r-format
               '((:eval 
                      (propertize 
                       (capitalize 
                        (s-replace "-mode" "" (prin1-to-string major-mode)))
                       'face '(:weight bold)))
                 " " 
                 (vc-mode vc-mode)
                 " " 
                 (:eval (when (boundp 'org-mode-line-string)
                          (propertize  org-mode-line-string 'face '(:weight semi-bold))))
                 (:eval (propertize (format-time-string " %H:%M ")
                                    'face '(:weight bold))) 
                 " " 
                 mode-line-misc-info
                 ))

        (mini-modeline-mode t))
  #+END_SRC 
  
* 取 hl-line mode

#+BEGIN_SRC emacs-lisp
  (use-package hl-line 
    :straight nil
    :disabled t
    :hook ((text-mode conf-mode prog-mode) . hl-line-mode)
    :custom
    ;; I don't need hl-line showing in other windows. This also offers a small
    ;; speed boost when buffer is displayed in multiple windows.
    (hl-line-sticky-flag nil)
    (global-hl-line-sticky-flag nil))
#+END_SRC 
