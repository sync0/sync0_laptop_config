* deft
#+BEGIN_SRC emacs-lisp
  (use-package el-patch
     :straight (el-patch :type git
                         :host github
                         :repo "raxod502/el-patch"))

  (eval-when-compile
    (require 'el-patch))

  (use-package deft
      :straight (deft :type git :host github :repo "jrblevin/deft") 
      :after (org org-roam)
      :custom
      (deft-recursive t)
      (deft-default-extension "org")
      (deft-directory syn0-zettelkasten-directory-sans)
      (deft-new-file-format "%Y%m%d%H%M%S")
      (deft-file-naming-rules
      '((noslash . "-")
        (nospace . "_")
        (case-fn . downcase)))
    :config/el-patch
    (defun deft-parse-title (file contents)
      "Parse the given FILE and CONTENTS and determine the title.
  If `deft-use-filename-as-title' is nil, the title is taken to
  be the first non-empty line of the FILE.  Else the base name of the FILE is
  used as title."
      (el-patch-swap (if deft-use-filename-as-title
                         (deft-base-filename file)
                       (let ((begin (string-match "^.+$" contents)))
                         (if begin
                             (funcall deft-parse-title-function
                                      (substring contents begin (match-end 0))))))
                     (org-roam-db--get-title file)))

    (defhydra sync0-hydra-deft-functions (:color amaranth :hint nil :exit t)
      "
   ^Deft^
   ^------------------
   _n_: New file
   _f_: Filter
   _c_: Clear filter
   _d_: Delete file
                                                   
   [q] Quit
        "
      ("f" deft-filter)
      ("c" deft-filter-clear)
      ("n" deft-new-file)
      ("d" deft-delete-file)
      ("q" nil :color blue))

    :bind 
    (:map deft-mode-map
          ("<f9>" . sync0-hydra-deft-functions/body)))
#+END_SRC 

* counsel

#+BEGIN_SRC emacs-lisp
  (use-package counsel 
    :after evil
    :config
    (evil-define-key 'normal global-map "gb" 'counsel-bookmark)

    (defhydra sync0-hydra-help (:color amaranth :hint nil :exit t)
      "
  ^Help functions^
  ^^^------------------------
  Describe _f_unction
  Describe _v_ariable
  Describe _k_eybindings
  Load _l_ibrary
  Search _s_ymbol
  Search _u_nicode char

  _q_uit
  "
      ;; Quickly work with bookmarks
      ("f" counsel-describe-function)
      ("v" counsel-describe-variable)
      ("k" describe-key)
      ("l" counsel-load-library)
      ("s" counsel-info-lookup-symbol)
      ("u" counsel-unicode-char)
      ("q"  nil :color blue))

(evil-leader/set-key
  "h" 'sync0-hydra-help/body)

    :bind
    (("M-x" . counsel-M-x)
     ("M-y" . counsel-yank-pop)
     ;; ("<f1>" . sync0-hydra-help/body)
     ("C-x C-f" . counsel-find-file)))
#+END_SRC

* swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper 
    :after evil
    :commands swiper
    :config 
    (evil-define-key 'normal global-map "/" 'swiper)
    :bind (("C-s" . swiper)))
#+END_SRC

* smooth-scrolling
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling 
    :straight (smooth-scrolling :type git :host github :repo "aspiers/smooth-scrolling") 
    :commands (sync0-scroll-up sync0-scroll-down)
    :custom
    (smooth-scroll-margin 5)
    ;; prevent ugly jumps when cursor is near the end of the screen
    (scroll-conservatively 101)
    :preface
    (defun sync0-scroll-up ()
      "Improve scroll up behavior"
      (interactive)
      (scroll-down 1))

    (defun sync0-scroll-down ()
      "Improve scroll down behavior"
      (interactive)
      (scroll-up 1))

    (defun sync0-scroll-right ()
      "Improve scroll down behavior"
      (interactive)
      (scroll-right 1))

    (defun sync0-scroll-left ()
      "Improve scroll down behavior"
      (interactive)
      (scroll-left 1))

    :config (smooth-scrolling-mode 1)
    :bind (("M-k" . sync0-scroll-up)
           ("M-h" . sync0-scroll-right)
           ("M-l" . sync0-scroll-left)
           ("M-j" . sync0-scroll-down)))
#+END_SRC 

* alert 
#+BEGIN_SRC emacs-lisp
  (use-package alert
  :straight (alert :type git :host github :repo "jwiegley/alert"))
#+END_SRC 

* warnings
#+BEGIN_SRC emacs-lisp
  (use-package warnings
    :straight nil
    :config
;; Remove annoying message when expanding yasnippets. 
    (add-to-list 'warning-suppress-types '(yasnippet backquote-change)))
#+END_SRC 

* google-this
This package provides a set of functions for launching google searches
from within emacs.

#+BEGIN_SRC emacs-lisp
  (use-package google-this 
    :straight (google-this :type git :host github :repo "Malabarba/emacs-google-this") 
    :commands (google-this-search google-this)
    :after evil
    ;; :init
    ;; (google-this-mode 1)
    ;; Query google search. 
    :bind (("C-c g" . google-this-search)
           ;; Search selection with google.
           :map evil-visual-state-map ("g"  . google-this)))
#+END_SRC 

* mu4e
#+BEGIN_SRC emacs-lisp
    (use-package mu4e
      :commands mu4e
      :init  (require 'smtpmail)
      :custom
      (user-full-name "Carlos Alberto Rivera Carre√±o")
      ;; (user-mail-address "carc.sync0@gmail.com")
      ;; (mu4e-reply-to-address "carc.sync0@gmail.com")
      (mu4e-root-maildir "~/Mail")
      (mu4e-attachment-dir "~/Downloads")
      (message-signature-file "~/.emacs.d/sync0/.sync0_signature") 
      (mu4e-compose-signature-auto-include t)
      ;; get mail
      (mu4e-get-mail-command "mbsync -V -c ~/.emacs.d/sync0/.mbsyncrc -a")
      (mu4e-update-interval nil)
      ;; show images
      (mu4e-show-images t)
      (mu4e-view-show-images t)
      (mu4e-view-show-addresses t)
      (mu4e-headers-auto-update t)
      (mu4e-use-fancy-chars t)
      ;; This allows me to use 'ivy' to select mailboxes
      (mu4e-completing-read-function 'ivy-completing-read)
      ;; Don't ask for a 'context' upon opening mu4e
      (mu4e-context-policy 'pick-first)
      (mu4e-compose-context-policy nil)
      ;; don't save message to Sent Messages, IMAP takes care of this
      ;; GMail already adds sent mail to the Sent Mail folder.
      (mu4e-sent-messages-behavior 'delete)
      ;; Don't ask to quit... why is this the default?
      (mu4e-confirm-quit nil)
      ;; Why would I want to leave my message open after I've sent it?
      (message-kill-buffer-on-exit t)
      ;; Rename files when moving
      (mu4e-change-filenames-when-moving t)
      ;; Needed for mbsync
      ;; Configure smtpmail
      (message-send-mail-function 'smtpmail-send-it)
      ;; (starttls-use-gnutls t)
      (smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil)))
      (smtpmail-auth-credentials "~/.authinfo.gpg")
      (smtpmail-default-smtp-server "smtp.gmail.com")
      (smtpmail-smtp-server "smtp.gmail.com")
      (smtpmail-smtp-service 587)
      (smtpmail-debug-info t)

      :config
      (add-to-list 'evil-emacs-state-modes 'mu4e-main-mode)
      (add-to-list 'evil-emacs-state-modes 'mu4e-headers-mode)
      (evil-set-initial-state 'mu4e-compose-mode 'insert)

      (setq mu4e-headers-fields
            '( (:date          .  25)    ;; alternatively, use :human-date
               (:flags         .   10)
               (:from          .  30)
               (:subject       .  nil))) ;; alternatively, use :thread-subject

      ;; Configure contexts
      (require 'mu4e-context)

      (setq mu4e-contexts
            `( ,(make-mu4e-context
                 :name "Principal (carc.sync0)"
                 :enter-func (lambda () (mu4e-message "Entering carc.sync0"))
                 :leave-func (lambda () (mu4e-message "Leaving carc.sync0"))
                 :match-func (lambda (msg)
                               (when msg
                                 (mu4e-message-contact-field-matches
                                  msg '(:from :to :cc :bcc) "carc.sync0@gmail.com")))
                 :vars '(
                         (user-mail-address . "carc.sync0@gmail.com")
                         (mu4e-trash-folder . "/carc.sync0/[carc.sync0]/Trash")
                         (mu4e-refile-folder . "/carc.sync0/[carc.sync0]/All Mail")
                         (mu4e-sent-folder . "/carc.sync0/[carc.sync0]/Sent Mail")
                         (mu4e-drafts-folder . "/carc.sync0/[carc.sync0]/Drafts")
                         (mu4e-maildir-shortcuts . (("/carc.sync0/[carc.sync0]/Trash"       . ?t)
                                                    ("/carc.sync0/[carc.sync0]/Sent Mail" . ?s)
                                                    ("/carc.sync0/INBOX"            . ?i)
                                                    ("/carc.sync0/[carc.sync0]/Drafts"    . ?d)
                                                  ;; ("/carc.sync0/[carc.sync0]/Starred"   . ?r)
                                                    ("/carc.sync0/[carc.sync0]/All Mail"  . ?a)))))

               ,(make-mu4e-context
                 :name "Backup (cantorlunae)"
                 :enter-func (lambda () (mu4e-message "Entering cantorlunae"))
                 :leave-func (lambda () (mu4e-message "Leaving cantorlunae"))
                 :match-func (lambda (msg)
                               (when msg
                                 (mu4e-message-contact-field-matches
                                  msg '(:from :to :cc :bcc) "cantorlunae@gmail.com")))
                 :vars '(
                         (user-mail-address . "cantorlunae@gmail.com")
                         (mu4e-trash-folder . "/cantorlunae/[cantorlunae]/Trash")
                         (mu4e-refile-folder . "/cantorlunae/[cantorlunae]/All Mail")
                         (mu4e-sent-folder . "/cantorlunae/[cantorlunae]/Sent Mail")
                         (mu4e-drafts-folder . "/cantorlunae/[cantorlunae]/Drafts")
                         (mu4e-maildir-shortcuts . (("/cantorlunae/[cantorlunae]/Trash"       . ?t)
                                                    ("/cantorlunae/[cantorlunae]/Sent Mail" . ?s)
                                                    ("/cantorlunae/INBOX"            . ?i)
                                                    ("/cantorlunae/[cantorlunae]/Drafts"    . ?d)
                                                    ("/cantorlunae/[cantorlunae]/All Mail"  . ?a)))))))


      ;; Use imagemagick, if available.
      (when (fboundp 'imagemagick-register-types)
        (imagemagick-register-types))

      (setq mu4e-bookmarks `(;; ("\\\\Inbox" "Inbox" ?i)
                             ("flag:flagged" "Flagged messages" ?f)
                             ("flag:unread AND NOT flag:trashed" "Unread messages" ?u)
                             ("date:today..now" "Today's messages" ?t)
                             ("date:7d..now" "Last 7 days" ?w)
                             ("mime:image/*" "Messages with images" ?p)
                             ("maildir:/cantorlunae/INBOX OR maildir:/carc.sync0/INBOX" "All inboxes" ?i)))

                             ;; (,(mapconcat 'identity
                             ;;              (mapcar
                             ;;               (lambda (maildir)
                             ;;                 (concat "maildir:" (car maildir)))
                             ;;               mu4e-maildir-shortcuts) " OR ")
                             ;;  "All inboxes" ?i)

  ;; (add-hook 'mu4e-mark-execute-pre-hook
  ;; (lambda (mark msg)
  ;; (cond ((member mark '(refile trash)) (mu4e-action-retag-message msg
  ;; "-\\Inbox"))
  ;; ((equal mark 'flag) (mu4e-action-retag-message msg "\\Starred"))
  ;; ((equal mark 'unflag) (mu4e-action-retag-message msg "-\\Starred"
  ;; )))))


      (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

      (evil-define-key 'normal mu4e-compose-mode-map
        "$" 'evil-end-of-visual-line
        "^" 'evil-beginning-of-visual-line
        "gg" 'mu4e-compose-goto-top
        "G" 'mu4e-compose-goto-bottom
        "]" 'evil-next-visual-line
        "[" 'evil-previous-visual-line)

      ;; we seem to need this to fix the org-store-link issue
      ;; (org-link-set-parameters "mu4e" :follow #'org-mu4e-open :store 
      ;; #'org-mu4e-store-link)

      :bind  (( 
               :map mu4e-main-mode-map
               ("J" . mu4e~headers-jump-to-maildir)
               ("j" . next-line)
               ("k" . previous-line)
               ("u" . mu4e-update-mail-and-index)
               ("b" . mu4e-headers-search-bookmark)
               ("B" . mu4e-headers-search-bookmark-edit)
               ("N" . mu4e-news)
               (";" . mu4e-context-switch)
               ("H" . mu4e-display-manual)
               ("C" . mu4e-compose-new)
               ;; ("cc" . mu4e-compose-new)
               ("x" . mu4e-kill-update-mail)
               ("A" . mu4e-about)
               ("f" . smtpmail-send-queued-mail)
               ("m" . mu4e~main-toggle-mail-sending-mode)
               ("s" . mu4e-headers-search)
               ("q" . mu4e-quit)
               :map mu4e-headers-mode-map
               ("q" . mu4e~headers-quit-buffer)
               ("J" . mu4e~headers-jump-to-maildir)
               ("C" . mu4e-compose-new)
               ("E" . mu4e-compose-edit)
               ("F" . mu4e-compose-forward)
               ("R" . mu4e-compose-reply)
               ("o" .   mu4e-headers-change-sorting)
               ("j" . mu4e-headers-next)
               ("k" . mu4e-headers-prev)
               ("b" . mu4e-headers-search-bookmark)
               ("B" . mu4e-headers-search-bookmark-edit)
               (";" . mu4e-context-switch)
               ("/" . mu4e-headers-search-narrow)
               ("s" . mu4e-headers-search)
               ("S" . mu4e-headers-search-edit)
               ("x" . mu4e-mark-execute-all)
               ("a" . mu4e-headers-action)
               ("*" . mu4e-headers-mark-for-something) 
               ("&" . mu4e-headers-mark-custom)
               ("A" . mu4e-headers-mark-for-action)
               ("m" . mu4e-headers-mark-for-move)
               ("r" . mu4e-headers-mark-for-refile)
               ("D" . mu4e-headers-mark-for-delete)
               ("d" . mu4e-headers-mark-for-trash)
               ("=" . mu4e-headers-mark-for-untrash)
               ("u" . mu4e-headers-mark-for-unmark)
               ("U" . mu4e-mark-unmark-all)
               ("?" . mu4e-headers-mark-for-unread)
               ("!" . mu4e-headers-mark-for-read)
               ("%" . mu4e-headers-mark-pattern)
               ("+" . mu4e-headers-mark-for-flag)
               ("-" . mu4e-headers-mark-for-unflag)
               ("[" . mu4e-headers-prev-unread)
               ("]" . mu4e-headers-next-unread)
               ("C-j" . mu4e-headers-next)
               ("C-k" . mu4e-headers-prev)
               :map mu4e-view-mode-map
               ("j" . next-line)
               ("k" . previous-line)
               ("l" . evil-forward-char)
               ("h" . evil-backward-char)
               ("v" . evil-visual-char)
               ("$" . evil-end-of-visual-line)
               ("^" . evil-beginning-of-visual-line)
               ("]" . evil-next-visual-line)
               ("[" . evil-previous-visual-line)
               (" " . mu4e-view-scroll-up-or-next)
               ([tab] . shr-next-link)
               ([backtab] . shr-previous-link)
               ("q" . mu4e~view-quit-buffer)
               ("C" . mu4e-compose-new)
               ("H" . mu4e-view-toggle-html)
               ("R" . mu4e-compose-reply)
               ("p" . mu4e-view-save-attachment)
               ("P" . mu4e-view-save-attachment-multi) 
               ("O" . mu4e-headers-change-sorting)
               ("o" . mu4e-view-open-attachment)
               ("A" . mu4e-view-attachment-action)
               ("a" . mu4e-view-action)
               ("J" . mu4e~headers-jump-to-maildir)
               ("C-j" . mu4e-view-headers-next)
               ("C-k" . mu4e-view-headers-prev)
               ("x" . mu4e-view-marked-execute)
               ("&" . mu4e-view-mark-custom)
               ("*" . mu4e-view-mark-for-something)   
               ("m" . mu4e-view-mark-for-move)
               ("r" . mu4e-view-mark-for-refile)
               ("D" . mu4e-view-mark-for-delete)
               ("d" . mu4e-view-mark-for-trash)
               ("=" . mu4e-view-mark-for-untrash)
               ("u" . mu4e-view-unmark)
               ("U" . mu4e-view-unmark-all)
               ("?" . mu4e-view-mark-for-unread)
               ("!" . mu4e-view-mark-for-read)
               ("%" . mu4e-view-mark-pattern)
               ("+" . mu4e-view-mark-for-flag)
               ("-" . mu4e-view-mark-for-unflag)
               ("s" . mu4e-view-search-edit)
               ("|" . mu4e-view-pipe)
               ("." . mu4e-view-raw-message)
               ("C--" . mu4e-headers-split-view-shrink)
               ("C-+" . mu4e-headers-split-view-grow))))
  #+END_SRC 

* calendars
** calendar 

#+BEGIN_SRC emacs-lisp
  (use-package calendar 
    :custom
    (calendar-date-style 'european) 
    (european-calendar-style t)
    ;; Week starts on monday.
    (calendar-week-start-day 0)    
    (calendar-day-name-array     ["Dimanche" "Lundi" "Mardi" "Mercredi" "Jeudi" "Vendredi" "Samedi"])
    (calendar-day-abbrev-array   ["Dim." "Lun." "Mar." "Mer." "Jeu." "Ven." "Sam."])
    (calendar-month-name-array   ["Janvier" "F√©vrier" "Mars" "Avril" "Mai" "Juin" "Juillet"
                                  "Ao√ªt" "Septembre" "Octobre" "Novembre" "D√©cembre"])
    (calendar-month-abbrev-array ["Jan." "F√©v." "Mars" "Avr." "Mai" "Juin" "Jul." "Ao√ªt" "Sep." "Oct." "Nov." "D√©c."]))
  #+END_SRC 

** holiday
#+BEGIN_SRC emacs-lisp
  (use-package holidays 
    :straight nil
    :after calendar
    :custom
    (holiday-christian-holidays nil)
    (holiday-hebrew-holidays nil)
    (holiday-islamic-holidays nil)
    (holiday-bahai-holidays nil)
    (holiday-oriental-holidays nil)
    :config
    (defvar holiday-korean-holidays nil "Korean holidays")
    (defvar holiday-french-holidays nil "French holidays")
    (defvar holiday-colombian-holidays nil "Colombian holidays")

    (setq holiday-korean-holidays
          '((holiday-fixed 1 1          "Ïã†Ï†ï")
            ;; (holiday-lunar-ko 1 nil 1   "ÏÑ§ÎÇ†" -1)
            ;; (holiday-lunar-ko 1 nil 1   "ÏÑ§ÎÇ†")
            ;; (holiday-lunar-ko 1 nil 1   "ÏÑ§ÎÇ†" 1)
            (holiday-fixed 3 1          "3.1Ï†à")
            ;; (holiday-lunar-ko 4 nil 8   "ÏÑùÍ∞ÄÌÉÑÏã†Ïùº")
            (holiday-fixed 5 5          "Ïñ¥Î¶∞Ïù¥ÎÇ†")
            (holiday-fixed 6 6          "ÌòÑÏ∂©Ïùº")
            (holiday-fixed 8 15         "Í¥ëÎ≥µÏ†à")
            (holiday-fixed 10 3         "Í∞úÏ≤úÏ†à")
            (holiday-fixed 10 9         "ÌïúÍ∏ÄÎÇ†")
            ;; (holiday-lunar-ko 8 nil 15  "Ï∂îÏÑù" -1)
            ;; (holiday-lunar-ko 8 nil 15  "Ï∂îÏÑù")
            ;; (holiday-lunar-ko 8 nil 15  "Ï∂îÏÑù" 1)
            (holiday-fixed 12 25        "ÏÑ±ÌÉÑÏ†à")))

    (setq holiday-french-holidays
          '((holiday-fixed 1 1 "Jour de l'an")
            (holiday-fixed 1 6 "√âpiphanie")
            (holiday-fixed 2 2 "Chandeleur")
            (holiday-fixed 2 14 "Saint Valentin")
            (holiday-fixed 5 1 "F√™te du travail")
            (holiday-fixed 5 8 "Comm√©moration de la capitulation de l'Allemagne en 1945")
            (holiday-fixed 6 21 "F√™te de la musique")
            (holiday-fixed 7 14 "F√™te nationale - Prise de la Bastille")
            (holiday-fixed 8 15 "Assomption (Religieux)")
            (holiday-fixed 11 11 "Armistice de 1918")
            (holiday-fixed 11 1 "Toussaint")
            (holiday-fixed 11 2 "Comm√©moration des fid√®les d√©funts")
            (holiday-fixed 12 25 "No√´l")
            ;; fetes a date variable
            (holiday-easter-etc 0 "P√¢ques")
            (holiday-easter-etc 1 "Lundi de P√¢ques")
            (holiday-easter-etc 39 "Ascension")
            (holiday-easter-etc 49 "Pentec√¥te")
            (holiday-easter-etc -47 "Mardi gras")
            (holiday-float 5 0 4 "F√™te des m√®res")
            ;; dernier dimanche de mai ou premier dimanche de juin si c'est le
            ;; m√™me jour que la pentec√¥te TODO
            (holiday-float 6 0 3 "F√™te des p√®res")))
    ;; troisi√®me dimanche de juin

    (setq holiday-colombian-holidays 
          '((holiday-fixed 1 1 "A√±o nuevo")
            (holiday-sexp '(calendar-nth-named-day 1 1 1 year 6) "D√≠a de Reyes")
            (holiday-sexp '(calendar-nth-named-day 1 1 3 year 19) "D√≠a de San Jos√©")
            (holiday-easter-etc -3 "Jueves Santo")
            (holiday-easter-etc -2 "Viernes Santo")
            (holiday-fixed 5 1 "D√≠a del trabajo")
            (holiday-easter-etc +43 "D√≠a de la ascenci√≥n")
            (holiday-sexp '(calendar-nth-named-day 1 1 6 year 29)
                          "San Pedro y San Pablo")
            (holiday-easter-etc +64 "Corpus Christi")
            (holiday-easter-etc +71 "Sagrado coraz√≥n")
            (holiday-fixed 7 20 "D√≠a de la independencia")
            (holiday-fixed 8 7 "Batalla de Boyac√°")
            (holiday-sexp '(calendar-nth-named-day 1 1 8 year 15)
                          "Asunci√≥n de la virgen")
            (holiday-sexp '(calendar-nth-named-day 1 1 10 year 12) "D√≠a de la raza")
            (holiday-sexp '(calendar-nth-named-day 1 1 11 year 1)
                          "Todos los santos")
            (holiday-sexp '(calendar-nth-named-day 1 1 11 year 11)
                          "Independencia de Cartagena")
            (holiday-fixed 12 25 "Navidad")
            (holiday-fixed 12 8 "Inmaculada concepci√≥n")))

    (setq holiday-other-holidays
          (append holiday-colombian-holidays holiday-french-holidays holiday-korean-holidays))

    (setq calendar-holidays
          (append holiday-general-holidays holiday-other-holidays)))
#+END_SRC 

** Âèñ calfw

#+BEGIN_SRC emacs-lisp
  (use-package calfw 
    :straight (calfw :type git :host github :repo "kiwanami/emacs-calfw") 
    :commands sync0-open-calendar
    :after (calendar evil)
    :preface
    (require 'calfw-org)

    (defun sync0-open-calendar ()
      (interactive)
      (let ((buf (get-buffer "*cfw-calendar*")))
        (if buf
            (pop-to-buffer buf nil)
          (cfw:open-calendar-buffer
           :contents-sources
           (list (cfw:org-create-source "#c0c5ce")) :view 'week))))

    :custom
    (cfw:fchar-junction ?‚ïã)
    (cfw:fchar-vertical-line ?‚îÉ)
    (cfw:fchar-horizontal-line ?‚îÅ)
    (cfw:fchar-left-junction ?‚î£)
    (cfw:fchar-right-junction ?‚î´)
    (cfw:fchar-top-junction ?‚îØ)
    (cfw:fchar-top-left-corner ?‚îè)
    (cfw:fchar-top-right-corner ?‚îì)

    :config 
    (add-to-list 'evil-emacs-state-modes 'cfw:details-mode)

    ;; (setq sync0-org-agenda-files 
    ;;       (let ((agenda-files   (org-agenda-files nil 'ifmode)))
    ;;         (delete "~/Dropbox/org/etc/Habits.org"  agenda-files)
    ;;         (delete "~/Dropbox/org/messages"  agenda-files)))

    ;; Redefinition
    (eval-after-load "calfw-org"
      '(defun cfw:org-collect-schedules-period (begin end)
         "[internal] Return org schedule items between BEGIN and END."
         (let ((org-agenda-prefix-format " ")
               (span 'day))
           (setq org-agenda-buffer
                 (when (buffer-live-p org-agenda-buffer)
                   org-agenda-buffer))
           (org-compile-prefix-format nil)
           (loop for date in (cfw:enumerate-days begin end) append
                 (loop for file in sync0-org-agenda-files 
                       append
                       (progn
                         (org-check-agenda-file file)
                         (apply 'org-agenda-get-day-entries
                                file date
                                cfw:org-agenda-schedule-args)))))))

    :bind (("<f7>" . sync0-open-calendar)
           :map cfw:details-mode-map
           ("SPC"  . cfw:details-kill-buffer-command)))
#+END_SRC 

* version control
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight (magit :type git :host github :repo "magit/magit") 
    :commands (magit-status magit-blame)
    :custom
    (magit-branch-arguments nil)
    (magit-push-always-verify nil)
    ;; Get rid of the previous advice to go into fullscreen
    (magit-restore-window-configuration t)
    :bind (("C-x g" . magit-status)
           ("C-x M-g" . magit-dispatch)))
#+END_SRC 

** Âèñ magithub

#+BEGIN_SRC emacs-lisp
  (use-package magithub
    :disabled t
    :straight (magithub :type git :host github :repo "vermiculus/magithub") 
    :after magit
    :config
    (magithub-feature-autoinject t)
    (setq magithub-clone-default-directory "~/github"))
#+END_SRC 

** Âèñ magit-todos
#+BEGIN_SRC emacs-lisp
  (use-package magit-todos
    :disabled t
    :straight (magit-todos :type git :host github :repo "alphapapa/magit-todos") 
    :commands (magit-todos-mode)
    :hook (magit-mode . magit-todos-mode)
    :custom 
    (magit-todos-keywords-list (list "ÁÑ°" "Ê¨°" "‰∏≠" "ÂæÖ"))
    (magit-todos-recursive t)
    (magit-todos-depth 100))
#+END_SRC 

** ÁÑ° git-gutter 
The only two reasons to use git-gutter, despite its flaws, are
that it is easy to customize the icons displayed on the fringe,
and that there is a very useful hydra I found on the internet to
navigate the modified chunks. Unfortunately, git-gutter does not
work as well as I would like because it resets my margins in a
really ugly way that I haven't been able to fix. 

#+BEGIN_SRC emacs-lisp
    (use-package git-gutter 
:straight (git-gutter :type git :host github :repo "emacsorphanage/git-gutter") 
      :after hydra
      ;; :init
      ;; (global-git-gutter-mode +1)
      ;; :hook 
      ;; (text-mode . git-gutter-mode)
      ;; (prog-mode . git-gutter-mode)
      :custom
      (git-gutter:hide-gutter nil)
      (git-gutter:window-width 1)
      (git-gutter:modified-sign " ") 
      (git-gutter:added-sign " ")    
      (git-gutter:deleted-sign " ")

      :custom-face
      (git-gutter:modified ((t (:background "#3a81c3"))))
      (git-gutter:added    ((t (:background "#7ccd7c"))))
      (git-gutter:deleted  ((t (:background "ee6363"))))

      :config
  (setq git-gutter:disabled-modes '(asm-mode image-mode mu4e-view-mode mu4e-main-mode mu4e-headers-mode mu4e-compose-mode))

      (defhydra sync0-hydra-git-gutter
        (:body-pre (git-gutter-mode 1) :hint nil)
        "
                                                                   ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                                Movement   Hunk Actions     Misc.  ‚îÇ gg: +%-4s(car (git-gutter:statistic))/ -%-3s(cdr (git-gutter:statistic)) ‚îÇ
                                ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
                                   ^_g_^       [_s_] stage        [_R_] set start Rev
                                   ^_k_^       [_r_] revert
                                   ^‚Üë ^      [_m_] mark
                                   ^‚Üì ^      [_p_] popup          ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                                   ^_j_^                          ‚îÇ[_q_] quit
                                   ^_G_^                          ‚îÇ[_Q_] Quit and disable"
        ("j" (progn (git-gutter:next-hunk 1) (recenter)))
        ("k" (progn (git-gutter:previous-hunk 1) (recenter)))
        ("g" (progn (goto-char (point-min)) (git-gutter:next-hunk 1)))
        ("G" (progn (goto-char (point-min)) (git-gutter:previous-hunk 1)))
        ("s" git-gutter:stage-hunk)
        ("r" git-gutter:revert-hunk)
        ("m" git-gutter:mark-hunk)
        ("p" git-gutter:popup-hunk)
        ("R" git-gutter:set-start-revision)
        ("q" nil :color blue)
        ("Q" (git-gutter-mode -1) :color blue))

(evil-leader/set-key
  "G" 'sync0-hydra-git-gutter/body))
#+END_SRC 

** git-time-machine

#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
:straight (git-timemachine :type git :host gitlab :repo "pidu/git-timemachine") 
    :defer t
    :after evil
    :commands 
    (git-timemachine git-timemachine-toggle)
    :custom
    (git-timemachine-show-minibuffer-details nil)
    :config
    (require 'magit-blame)

    ;; Sometimes I forget `git-timemachine' is enabled in a buffer, so instead of
    ;; showing revision details in the minibuffer, show them in
    ;; `header-line-format', which has better visibility.

    ;; (add-hook 'git-timemachine-mode-hook #'+vcs|init-header-line)
    ;; (advice-add #'git-timemachine-show-revision :after #'+vcs*update-header-line)

    ;; Force evil to rehash keybindings for the current state
    (add-hook 'git-timemachine-mode-hook #'evil-force-normal-state))
#+END_SRC 

** ediff

#+BEGIN_SRC emacs-lisp
  (use-package ediff
:straight nil
    :defer t
    :custom
    ;; No separate frame for ediff control buffer
    (ediff-window-setup-function #'ediff-setup-windows-plain)
    ;; Split windows horizontally in ediff (instead of vertically)
    (ediff-split-window-function #'split-window-vertically))
#+END_SRC 
