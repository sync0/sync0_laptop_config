// Generated by CoffeeScript 1.12.7
var Util,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Util = {
  get_filename_for_link: function(path) {
    var parts;
    parts = path.split(/[?\#]/)[0].split('/');
    return decodeURIComponent(parts[parts.length - 1]);
  },
  get_filename: function(path) {
    return path.split('/').pop();
  },
  get_ext: function(path) {
    var ext_split;
    ext_split = Util._get_ext_helper(path);
    if (ext_split.length === 1 || (ext_split.length === 2 && !ext_split[0])) {
      return "";
    } else {
      return ext_split.pop();
    }
  },
  get_filename_no_ext: function(path) {
    var ext_split;
    ext_split = Util._get_ext_helper(path);
    if (ext_split.length === 1) {
      return ext_split[0];
    } else {
      ext_split.pop();
      return ext_split.join('.');
    }
  },
  _get_ext_helper: function(path) {
    var filename;
    filename = this.get_filename(path);
    return filename.split('.');
  },
  is_photo: function(path) {
    var photo_exts, ref;
    photo_exts = ['jpg', 'jpeg', 'png', 'tiff', 'tif', 'gif', 'bmp'];
    return ref = this.get_ext(path).toLowerCase(), indexOf.call(photo_exts, ref) >= 0;
  },
  generate_guid: function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  },
  log: function(event_name, guid, key, version, extra, callback) {
    var data, xhr;
    if (extra == null) {
      extra = {};
    }
    data = new FormData();
    data.append("event_name", event_name || "");
    data.append("guid", guid || "");
    data.append("key", key || "");
    data.append("version", version || "");
    data.append("extra", JSON.stringify(extra));
    xhr = new XMLHttpRequest();
    xhr.withCredentials = true;
    if (callback) {
      xhr.onload = callback;
    }
    xhr.open("POST", DROPBOX_BASE + "/gmail_extension_log", true);
    xhr.send(data);
  },
  is_dropbox_domain: function(url) {
    return Util._get_url_origin(url) === DROPBOX_BASE;
  },
  is_on_google_inbox: function() {
    return Util.get_window_origin() === GOOGLE_INBOX_ORIGIN;
  },
  get_window_origin: function() {
    return Util._get_url_origin(window.location.href);
  },
  _get_url_origin: function(url) {
    var parser;
    parser = document.createElement('a');
    parser.href = url;
    return parser.origin;
  }
};
