// Generated by CoffeeScript 1.12.7
var init_onboarding, reload_tabs;

reload_tabs = function() {
  var content_script, manifest, promises;
  manifest = chrome.runtime.getManifest();
  promises = (function() {
    var i, len, ref, results;
    ref = manifest.content_scripts;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      content_script = ref[i];
      results.push(new Promise(function(resolve) {
        chrome.tabs.query({
          url: content_script.matches
        }, function(tabs) {
          var j, len1, tab;
          for (j = 0, len1 = tabs.length; j < len1; j++) {
            tab = tabs[j];
            chrome.tabs.reload(tab.id);
          }
          resolve();
        });
      }));
    }
    return results;
  })();
  return Promise.all(promises);
};

chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
  var content_script, i, len, ref;
  if (request.message === "onboarding_tooltip_seen") {
    ref = chrome.runtime.getManifest().content_scripts;
    for (i = 0, len = ref.length; i < len; i++) {
      content_script = ref[i];
      chrome.tabs.query({
        url: content_script.matches
      }, function(tabs) {
        var j, len1, tab;
        for (j = 0, len1 = tabs.length; j < len1; j++) {
          tab = tabs[j];
          if (tab.id !== sender.tab.id) {
            chrome.tabs.sendMessage(tab.id, {
              message: "close_onboarding"
            });
          }
        }
      });
    }
  }
});

init_onboarding = function() {
  chrome.tabs.create({
    url: "https://mail.google.com/"
  }, function(tab) {
    chrome.tabs.onUpdated.addListener(function(updated_tab_id, changeInfo) {
      if (updated_tab_id === tab.id && changeInfo.status === "complete") {
        chrome.tabs.sendMessage(tab.id, {
          message: "onboarding_tab"
        });
      }
    });
  });
};

chrome.runtime.onInstalled.addListener(function(details) {
  var on_install;
  on_install = function(guid) {
    var version;
    version = chrome.runtime.getManifest().version;
    if (details.reason === "install") {
      Util.log("install", guid, "", version);
      reload_tabs();
      init_onboarding();
    } else if (details.reason === "update") {
      Util.log("upgrade", guid, "", version, {
        previous_version: details.previousVersion
      });
    }
  };
  chrome.storage.local.get("guid", function(items) {
    var guid;
    if (items.guid != null) {
      on_install(items.guid);
    } else {
      guid = Util.generate_guid();
      chrome.storage.local.set({
        "guid": guid
      }, function() {
        on_install(guid);
      });
    }
  });
});

chrome.runtime.onMessageExternal.addListener(function(request, sender, sendResponse) {
  var version;
  if (sender.url && !Util.is_dropbox_domain(sender.url)) {
    sendResponse();
    return;
  }
  if (sender.id) {
    sendResponse();
    return;
  }
  if (request.message === "check_installed") {
    version = chrome.runtime.getManifest().version;
    sendResponse({
      message: "is_installed",
      version: version
    });
  }
});

chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
  if (request.message === "uninstall_self") {
    return chrome.storage.sync.set({
      "is_disabled": true
    }, function() {
      return reload_tabs().then(function() {
        return chrome.management.uninstallSelf();
      });
    });
  }
});
