/*
* Copyright (C) 2011 Google Inc. All rights reserved.
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are
* met:
*
*     * Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above
* copyright notice, this list of conditions and the following disclaimer
* in the documentation and/or other materials provided with the
* distribution.
*     * Neither the name of Google Inc. nor the names of its
* contributors may be used to endorse or promote products derived from
* this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * @fileoverview Handles the front end specific functionalities of the Single
 *  clock , Multi Clock & Stop Clock modules.
 *  It communicates with clock-core.js for all Digital , Analog and Calendar
 *  rendering on different tabs. It uses clock-db.js for local storage access.
 */

/**
 * The default name space for the clock application.
 *
 */
var clockApp = clockApp || {};

/**
 * Name space to hold the different views of clock application.
 */
clockApp.util = {};

/**
 * Container for selected tab.
 */
clockApp.selectedTab = $('default-tab');

/**
 * Container for content of selected tab.
 */
clockApp.selectedTabContent = $('div1');

/**
 * Container for clockApp.Clock object type. It's used in populating analog
 * clocks on world clock page.
 */
clockApp.clocksArray = [];

/**
 * Container for clockApp.Time object type. It's used in populating analog
 * clocks on world clock page.
 */
clockApp.clocksTime = [];

/**
 * Container for Canvas object used on world clock page.
 */
clockApp.clocksCanvas = [];

/**
 * The currently used Stopwatch object.
 */
var stopclock = null;

/**
 * The interval for the running Stopwatch.
 */
var stopclockInterval = null;

/**
 * Counter for stop clock laps. It's cleared on Stop watch reset.
 */
var lapCounter = 0;

/**
 * Container for laps marked on the Stop watch page.
 */
var laps = [];

/**
 * Container for the AutoComplete DOM object of city lists. It's disposed
 * once the user has added a city to world clock list.
 */
var globalCityList;

/**
 * Temporary variable to store value of page elements(hours/minutes/seconds).
 */
var tempVal = 0;

/**
 * Container for storing the reference id generated by interval setting API.
 */
clockApp.util.globalHandle;

/**
 * Alias for document.getElementById.
 *
 * @param {string|Element} elId Element ID.
 * @return {Element} The element with the given ID.
 */
function $(elId) {
 return document.getElementById(elId);
}

/**
 * Performs css class manipulation to select or deselect the tab elements,
 * based on the element clicked.
 *
 * @param {Element} el The element on which the click is performed.
 * @param {String} contentEl The id of the corresponding el having content.
 */
function selectMe(el, contentEl) {
  if (clockApp.selectedTab) {
    clockApp.selectedTab.className = 'unselected';
    clockApp.selectedTabContent.style.display = 'none';
  }
  el.className = 'selected';
  $(contentEl).style.display = 'block';
  clockApp.selectedTab = el;
  clockApp.selectedTabContent = $(contentEl);
  active = 0;
  if (contentEl == 'div3') {
     bg.ac.isUpdated = true;
     bg.ac.refreshAlarms();
     setWindowTitle('Clock - alarm');
  } else if (contentEl == 'div2') {
    $('multi_clock_page').style.display = '';
    $('add_button_clock').style.display = '';
    $('done_button_clock').style.display = 'none';
    $('city_list_div').style.display = 'none';
    $('delete_button_clock').style.display = 'none';
    $('done_delete_button').style.display = 'none';
    getAllClocks(clockApp.util.displayMultiClockPage);
    setWindowTitle('Clock - world clock');
  } else if (contentEl == 'div4') {
    if ($('timer_display').style.display != '') {
      $('outerDiv_timer').style.display = '';
      $('functionBar_timer').style.display = '';
      $('alarmSound_timer').style.display = '';
    }
  }
  $('soundData').style.display = 'none';
}

/**
 * Supplants the string with the given value.
 * @param {Object} datObject Place holders to be replaced.
 * @return {String} The transformed String.
 */
String.prototype.supplant = function(datObject) {
  return this.replace(/{([^{}]*)}/g,
    function(match, firstSubMatch) {
      var replace = datObject[firstSubMatch];
      return (typeof replace === 'string' || typeof replace === 'number') ?
          replace : match;
    });
};

/**
 * Starting point for displaying user selected clocks. A call back method must
 * be provided to it as a parameter.
 * @param {Function} functionToInvoke Call back function to be invoked.
 */
function getAllClocks(functionToInvoke) {
  clockApp.db.getAllClocks(functionToInvoke);
}

/**
 * Fetch's the city names, for which we can generate world clock. It's invoked
 * on click of add button on world clock page.
 */
function onFetchCityNames() {
  if (globalCityList) {
    globalCityList.dispose();
  }
  // displayCityNames is provided as a call back.
  getAllClocks(displayCityNames);
}

/**
 * Displays the list of cities user can add to the world clock page. It's used
 * as call back in onFetchCityNames, and is passed the currently selected cities
 * of the user.
 * At the search and add clock page, only the cities that arn't in the
 * userSelectedCities list are displayed.
 * @param {Array} userSelectedCities Cities currently selected by user.
 */
function displayCityNames(userSelectedCities) {
  var i = 0;
  var citynamesList = [];

  for (var key in clockApp.cityToZoneMapping) {
    citynamesList[i++] = key;
  }
  var selectedCities = userSelectedCities.map(function(city) {
    return city.cityName;
  });
  citynamesList = citynamesList.filter(function(cityname) {
    return (selectedCities.indexOf(cityname) < 0);
  });

  $('multi_clock_page').style.display = 'none';
  $('add_button_clock').style.display = 'none';
  $('done_button_clock').style.display = '';
  $('city-to-list').value = '';
  $('city_list_div').style.display = '';
  if (globalCityList) {
    globalCityList.dispose();
  }
  globalCityList = new goog.ui.AutoComplete.Basic(citynamesList,
      $('city-to-list'), false);
}

/**
 * Adds a world city selected by user to local storage. Before adding a clock,
 * current maximum priority is obtained from DB and passed as parameter to
 * addUserClockToDBCallback method.
 */
function addUserClockToDB() {
  clockApp.util.currentMaxPriority(addUserClockToDBCallback);
}

/**
 * Call back method, that receives current maximum priority value, increments
 * it and adds it along with clock, user has selected to be displayed on world
 * clock page.
 * @param {String} maxPriority Current maximum priority.
 */
function addUserClockToDBCallback(maxPriority) {
  if (maxPriority == undefined || maxPriority == null) {
    maxPriority = INITAL_MAX_PRIORITY;
  }
  $('city_list_div').style.display = 'none';
  $('add_button_clock').style.display = '';
  $('multi_clock_page').style.display = '';
  $('done_button_clock').style.display = 'none';

  globalCityList.dispose();
  var citySelected = $('city-to-list').value;
  var cityTimeZone = (clockApp.cityToZoneMapping[citySelected]) ?
      clockApp.cityToZoneMapping[citySelected] : null;
  if (citySelected && cityTimeZone) {
    var value = parseInt(maxPriority, 10);
    clockApp.db.insertClock(new UserClock(citySelected, cityTimeZone,
        ++value));
    // Refresh the world clock page to display newly added clock.
    getAllClocks(clockApp.util.displayMultiClockPage);
  } else {
    console.log('Could not insert the selected city ' + citySelected);
  }
}

/**
 * Utility method to get current maximum priority value from DB.
 * @param {Function} callback Call back function to be invoked.
 */
clockApp.util.currentMaxPriority = function(callback) {
  clockApp.db.getMaxPriority(callback);
};

/**
 * Displays the clock along with calendar on first tab.
 */
function displayClockAndCalendar() {
  // Resize the current window (fixes width bug on Macintosh systems).
  window.resizeTo(241, 320);
  // Extra width to accommodate Window's native UI borders
  (/windows/i).test(navigator.userAgent) && window.resizeTo(255, 328);
  var canvas = createCanvas($('myClock'));
  // Digital time object.
  var time = new clockApp.Time();
  var analogClockProperties = new clockApp.AnalogClockProperties();
  // Customizing the analog clock properties.
  analogClockProperties.bgImageX = 8;
  analogClockProperties.bgImageY = 13;
  analogClockProperties.innerCircleImg = $('s1_center_whiteclock_id');
  analogClockProperties.backgroundImage = $('clock2_worldclock-calender_id');

  // Analog time object.
  var clock = new clockApp.Clock(analogClockProperties);
  var calendarProperties = new clockApp.CalendarProperties();
  calendarProperties.customizeViewCallback = customizeCalendarView;
  var calendar = new clockApp.Calendar(calendarProperties);

  // Repaint calendar every 10 minutes.
  calendar.paint('widget_en_US');
  setInterval(calendar.paint('widget_en_US'), TEN_MINUTES);

  var refreshSingleClockPage = function() {
    // Draw analog clock on canvas.
    clock.paint(canvas);
    // Display the time in digits.
    time.paint('time-div', 'time-char-div');
  };

  refreshSingleClockPage();
  setInterval(refreshSingleClockPage, ONE_SECOND);
}

/**
 * Creates and returns a Canvas Object.
 * @param {Object} canvasObj object of canvas in dom.
 * @return {clockApp.Canvas} Wrapper over html canvas object.
 */
function createCanvas(canvasObj) {
  return new clockApp.Canvas(canvasObj);
}

/**
 * Determines the clock background color depending upon current time.
 * 6 PM to 6 AM is black background and vice versa.
 * @param {Number} offset Offset relative to GMT.
 * @return {String} color Clock background.
 */
clockApp.util.backgroundColor = function(offset) {
  var dateNow = new Date();
  dateNow = new Date(dateNow.getTime() + offset * 60 * 1000);
  var currentHours = dateNow.getHours();

  if (currentHours > 24) {
    currentHours = currentHours - 24;
  }

  var color = 'white';
  if (currentHours < 6 || currentHours >= 18) {
    color = 'black';
  }
  return color;
};

/**
 * Displays clocks on world clock page. It's used as a call back and is invoked
 * on clicking world clock tab, or in case user is to be migrated to world
 * clocks i.e. in delete and add a world clock scenarios.
 * @param {Array} listOfClocks List of user selected world clocks stored in DB.
 */
clockApp.util.displayMultiClockPage = function(listOfClocks) {
  // Container element for displaying world clocks.
  var multiClockPageDom = $('multi_clock_page');
  multiClockPageDom.innerHTML = '';
  // On every invocation refresh the time, clock and canvas containers.
  clockApp.clocksTime = [];
  clockApp.clocksArray = [];
  clockApp.clocksCanvas = [];

  /**
   * TODO(anupams) : Currently we do not have a mechanism to identify users
   * default city, from his time zone information.
   * So currently "home city" is displayed as city name.
   */
  // Add a default clock to listOfClocks.
  var defaultClock = new UserClock();
  defaultClock.cityName = 'Home City';
  defaultClock.timeZone = 'Default';
  listOfClocks[listOfClocks.length] = defaultClock;

  // Different template would be used if length is 1 or less.
  if (listOfClocks.length > 1) {
    var i = listOfClocks.length;
    /*
     * User's home city is by default added at the end of the listOfClocks array
     * and the loop below is iterated from last index, so that home city is
     * the first clock to be displayed on world clock page.
     */
    while (--i >= 0) {
      // Fetch's the day light adjusted time zone information of current city.
      var timeZoneData = calculateTimeZoneData(listOfClocks[i].timeZone);
      var digitalClockProperties = new clockApp.DigitalClockProperties();
      var analogClockProperties = new clockApp.AnalogClockProperties();

      // Customization of analog clock.
      analogClockProperties.clockRadius = 20;
      analogClockProperties.bgImageX = 10;
      analogClockProperties.bgImageY = 14;

      //fix for http://b/issue?id=3203989
      var bgColor = clockApp.util.backgroundColor(timeZoneData.offset);
      /*
       * Show's  black and white background depending on current hour.
       * i.e. After 6 AM to 6 PM is night and vice versa.
       */
      if (bgColor == 'black') {
        analogClockProperties.minHandColor = 'white';
        analogClockProperties.hourHandColor = 'white';
        analogClockProperties.clockBgroundStartGradient = 'black';
        analogClockProperties.clockBgroundEndGradient = 'black';
        analogClockProperties.backgroundImage = $('s1_clock_dark_id');
        analogClockProperties.innerCircleImg = $('s1_center_darkclock_id');
      } else {
        analogClockProperties.minHandColor = 'black';
        analogClockProperties.hourHandColor = 'black';
        analogClockProperties.clockBgroundStartGradient = '#fff';
        analogClockProperties.clockBgroundEndGradient = '#F1F4F7';
        analogClockProperties.backgroundImage = $('s1_clock_light_id');
        analogClockProperties.innerCircleImg = $('s1_center_whiteclock_id');
      }

      analogClockProperties.clockTimeOffSet = timeZoneData.offset;
      digitalClockProperties.clockTimeOffSet = timeZoneData.offset;

      // Container for dom constructed from multiClockTemplate html template.
      var canvasTableDiv = document.createElement('div');
      canvasTableDiv.className = 'mutli_clock_div';

      // Used only when home city and a world clock is available for display.
      if (listOfClocks.length == '2') {
        canvasTableDiv.style.height = '110px';
      }

      // TODO(anupam): Find a way to get time zone name for home city.
      timeZoneData.shortZoneName = timeZoneData.shortZoneName ?
          timeZoneData.shortZoneName : '';
      var dom = $('multiClockTemplate').value.supplant({
          table_id: 'multi_clock_table' + i,
          clock_cityName: listOfClocks[i].cityName,
          clock_timeZone: timeZoneData.shortZoneName,
          clock_city_span_id: 'span_id_of_city' + i,
          clock_zone_span_id: 'span_id_of_zone' + i,
          clock_time_value: 'timeDisplayDiv' + i,
          clock_DayAndMonth_Name: 'dayDisplayDiv' + i,
          clock_canvas_id: 'canvas' + i});

      canvasTableDiv.innerHTML = dom;
      // Append complete dom for a world clock to multi_clock_page div.
      multiClockPageDom.appendChild(canvasTableDiv);

      /*
       * Initialize the Analog clock, Digital clock and Canvas objects
       * and insert them in appropriate containers.
       */
      clockApp.clocksTime[i] = new clockApp.Time(digitalClockProperties);
      clockApp.clocksArray[i] = new clockApp.Clock(analogClockProperties);
      clockApp.clocksCanvas[i] = createCanvas($('canvas' + i));
    }
  } else {

    // Block to be executed when there is no world clock available. Home city
    // will be displayed in that case.
    var analogClockProperties = new clockApp.AnalogClockProperties();
    var digitalClockProperties = new clockApp.DigitalClockProperties();

     // Customization of analog clock.
     analogClockProperties.clockRadius = 40;
     analogClockProperties.clockXCoordinate = 50;
     analogClockProperties.clockYCoordinate = 45;
     analogClockProperties.backgroundImage = $('s2_clock_light_id');
     analogClockProperties.bgImageX = 5;
     analogClockProperties.bgImageY = 0;
     analogClockProperties.minuteHandLineWidth = 3;
     analogClockProperties.secHandLineWidth = 2;
     analogClockProperties.hourHandLineWidth = 6;
     analogClockProperties.innerCircleImg = $('s2_center_darkclock_id');
     analogClockProperties.innerCircleImgX = '45';
     analogClockProperties.innerCircleImgY = '40';

     var canvasTableDiv = document.createElement('div');
     canvasTableDiv.className = 'single-clock-div';
     var dom = $('Page2SingleClockTemplate').value.supplant({
         clock_time_value: 'timeDisplayDiv0',
         clock_DayAndMonth_Name: 'dayDisplayDiv0',
         clock_canvas_id: 'canvas0'});
     canvasTableDiv.innerHTML = dom;
     multiClockPageDom.appendChild(canvasTableDiv);

     // Adds the created objects to first index of global containers.
     clockApp.clocksTime[0] = new clockApp.Time(digitalClockProperties);
     clockApp.clocksArray[0] = new clockApp.Clock(analogClockProperties);
     clockApp.clocksCanvas[0] = createCanvas($('canvas0'));
  }

  var refreshMultiClockPage = function() {
    if (clockApp.clocksArray.length > 0) {
      // Loop over the list of world clocks and paint each one of them after an
      // interval of one second.
      for (var i = 0, j = clockApp.clocksArray.length; i < j; i++) {
        clockApp.clocksArray[i].paint(clockApp.clocksCanvas[i]);
        clockApp.clocksTime[i].paint('timeDisplayDiv' + i, 'dayDisplayDiv' + i);
      }
    }
  };
  refreshMultiClockPage();

  if (clockApp.util.globalHandle || null != clockApp.util.globalHandle) {
    window.clearInterval(clockApp.util.globalHandle);
  }
  clockApp.util.globalHandle = setInterval(refreshMultiClockPage, ONE_SECOND);
};

/**
 * Displays a new page containing only the city selected for editing.
 * @param {String} clockCityName City selected for editing.
 *
 */
function editSelectedClock(clockCityName) {
  var multiClockPageDom = $('multi_clock_page');
  multiClockPageDom.innerHTML = '';

  // On every invocation refresh the time, clock and canvas containers.
  clockApp.clocksTime = [];
  clockApp.clocksArray = [];
  clockApp.clocksCanvas = [];

  $('add_button_clock').style.display = 'none';
  $('done_delete_button').style.display = '';

  var timeZoneData = calculateTimeZoneData(
      clockApp.cityToZoneMapping[clockCityName]);
  // Initialize to default values @see clock-core.js.
  var digitalClockProperties = new clockApp.DigitalClockProperties();
  var analogClockProperties = new clockApp.AnalogClockProperties();

  var bgColor = clockApp.util.backgroundColor(timeZoneData.offset);
  /*
   * Show's  black and white background depending on current hour.
   * i.e. After 6 AM to 6 PM is night and vice versa.
   */
  if (bgColor == 'black') {
    analogClockProperties.minHandColor = 'white';
    analogClockProperties.hourHandColor = 'white';
    analogClockProperties.clockBgroundStartGradient = 'black';
    analogClockProperties.clockBgroundEndGradient = 'black';
    analogClockProperties.backgroundImage = $('s1_clock_dark_id');
    analogClockProperties.innerCircleImg = $('s1_center_darkclock_id');
  } else {
    analogClockProperties.minHandColor = 'black';
    analogClockProperties.hourHandColor = 'black';
    analogClockProperties.clockBgroundStartGradient = '#fff';
    analogClockProperties.clockBgroundEndGradient = '#F1F4F7';
    analogClockProperties.backgroundImage = $('s1_clock_light_id');
    analogClockProperties.innerCircleImg = $('s1_center_whiteclock_id');
  }

  analogClockProperties.bgImageX = 10;
  analogClockProperties.bgImageY = 14;

  analogClockProperties.clockTimeOffSet = timeZoneData.offset;
  digitalClockProperties.clockTimeOffSet = timeZoneData.offset;

  var canvasTableDiv = document.createElement('div');
  canvasTableDiv.className = 'mutli_clock_div';

  timeZoneData.shortZoneName = timeZoneData.shortZoneName ?
      timeZoneData.shortZoneName : '';
  canvasTableDiv.innerHTML = $('multiClockTemplate').value.supplant({
      table_id: 'multi_clock_table' + 'del',
      table_row_id: 'multi_clock_table_row' + 'del',
      clock_cityName: clockCityName,
      clock_timeZone: timeZoneData.shortZoneName,
      clock_city_span_id: 'span_id_of_city' + 'del',
      clock_zone_span_id: 'span_id_of_zone' + 'del',
      clock_time_value: 'timeDisplayDiv' + 'del',
      clock_DayAndMonth_Name: 'dayDisplayDiv' + 'del',
      priority_check_box: 'priority_check_box' + 'del',
      priority_check_box_div_del: 'priority_check_box_div_del',
      clock_canvas_id: 'canvas' + 'del'});

  multiClockPageDom.appendChild(canvasTableDiv);

  var digiClockObj = new clockApp.Time(digitalClockProperties);
  var analogClockObj = new clockApp.Clock(analogClockProperties);
  var canvas = createCanvas($('canvas' + 'del'));

  $('timeDisplayDiv' + 'del').innerHTML = '';
  $('dayDisplayDiv' + 'del').innerHTML = '';
  $('multi_clock_table_row' + 'del').onclick = '';

  // Block won't execute in case user selects home city for editing.
  if ('Home City' != clockCityName) {
    $('priority_check_box_div_del').style.display = '';
    $('priority_check_box' + 'del').style.display = '';
    $('delete_button_clock').style.display = '';
    // Set the method to be invoked when delete button is clicked.
    $('delete_button_clock').onclick = function() {
      removeClockFromDB(clockCityName);
    };
  }

  var refreshPage = function() {
    if ($('timeDisplayDiv' + 'del') && $('dayDisplayDiv' + 'del') && canvas) {
      analogClockObj.paint(canvas);
      digiClockObj.paint('timeDisplayDiv' + 'del', 'dayDisplayDiv' + 'del');
    }
  };
  refreshPage();

  if (clockApp.util.globalHandle || null != clockApp.util.globalHandle) {
    window.clearInterval(clockApp.util.globalHandle);
  }
  clockApp.util.globalHandle = setInterval(refreshPage, ONE_SECOND);
}

/**
 * Invoked when done button is clicked on edit a clock page. In case user wants
 * to display selected clock at top, current maximum priority is obtained from
 * DB and doneButtonHandlerCallback method handles the scenario.
 * Otherwise world clock page is displayed without any edit.
 */
function doneButtonHandler() {
  if ($('priority_check_box' + 'del').checked) {
   clockApp.util.currentMaxPriority(doneButtonHandlerCallback);
  } else {
      selectMe($('div2'), 'div2');
  }
}

/**
 * Handles increment of priority of clock selected for editing.
 * @param {String} maxPriority Current maximum priority in DB.
 *
 */
function doneButtonHandlerCallback(maxPriority) {
  var cityName = $('span_id_of_city' + 'del').innerHTML;
  cityName = cityName.trim();
  // Increment only if maxPriority and cityName are available.
  if (maxPriority && cityName) {
    var val = (parseInt(maxPriority, 10));
    clockApp.db.incrementPriority(++val, cityName);
  }
  selectMe($('div2'), 'div2');
}

/**
 * Deletes from local storage, the clock selected by user for editing.
 * @param {String} displayedClock Name of the city to be deleted from world
 *      clock.
 */
function removeClockFromDB(displayedClock) {
  $('delete_button_clock').style.display = 'none';
  $('done_delete_button').style.display = 'none';
  $('add_button_clock').style.display = '';
  clockApp.db.deleteClock(new UserClock(displayedClock, null),
      clockApp.util.displayMultiClockPage);
}

/**
 * Calculates the timeZone offset as well as short time zone name.
 * @param {String} cityName Name of the time zone city.
 * @return {Array} timeZoneData Offset and time zone short name.
 */
function calculateTimeZoneData(cityName) {
  var date = new Date();
  var timeZoneData = {};
  if (clockApp.TimeZoneConstants_en[cityName]) {
    var timeZone = goog.i18n.TimeZone.createTimeZone(
        clockApp.TimeZoneConstants_en[cityName]);
    timeZoneData.offset =
        date.getTimezoneOffset() - timeZone.getOffset(date);
    timeZoneData.shortZoneName = timeZone.getShortName(date);
  }
  return timeZoneData;
}

/**
 * Loads the page containing stop clock.
 */
function loadStopClock() {
  stopclock = stopclock || new clockApp.Stopwatch.Object();
  $('stop_clock_start_button').style.display = 'none';
  $('stop_clock_mark_button').style.display = '';
  $('stop_clock_stop_button').style.display = '';
  $('stop_clock_reset_button').style.display = 'none';
  $('stop_clock_display').style.display = '';

  stopclock.start();
  updateStopClock();
}

/**
 * Updates the stop clock after a predefined interval.
 */
function updateStopClock() {
  var divToDisplay = $('stop_clock_display');
  // Refresh after 100 milliseconds.
  stopclockInterval = setInterval(
    function() {
      divToDisplay.innerHTML = stopclock.getTimeObject().displayString;
    },
    STOP_CLOCK_UPDATION_INTERVAL
  );
}

/**
 * Stops the Stop Clock.
 */
function stopStopClock() {
  clearInterval(stopclockInterval);
  stopclock.active = false;
  $('stop_clock_display').style.display = '';
  $('stop_clock_start_button').style.display = '';
  $('stop_clock_mark_button').style.display = 'none';
  $('stop_clock_stop_button').style.display = 'none';
  $('stop_clock_reset_button').style.display = '';
}

/**
 * Resets the Stop Clock.
 */
function resetStopClock() {
  $('stop_clock_display').innerHTML = '<span>00:00:00</span> 000';
  $('stop_clock_start_button').style.display = '';
  $('stop_clock_mark_button').style.display = 'none';
  var displayMark = $('stop_clock_mark_display');
  displayMark.innerHTML = '';
  displayMark.style.display = '';
  lapCounter = 0;
  laps = [];
  stopclock && stopclock.reset();
  stopclock = null;
}

/**
 * Marks a lap when user clicks on mark button.
 */
function markClock() {
  laps[lapCounter] = stopclock.getTimeObject();
  var divDisplayOfMark = document.createElement('tbody');

  var dom = $('LapCountTemplate').value.supplant({
      lap_count: 'Lap ' + (lapCounter + 1),
      lap_time: laps[lapCounter].displayString,
      lap_time_difference: calculateLapTimeDiff()});
  divDisplayOfMark.innerHTML = dom;
  $('stop_clock_mark_display').appendChild(divDisplayOfMark);
  lapCounter++;
}

/**
 * Calculates the time difference between last and second last
 * lap in laps array.
 * @return {String} Formatted time difference between two successive laps.
 */
function calculateLapTimeDiff() {
  if (lapCounter < 1) {
    return '--';
  }
  var current = laps[lapCounter].time - laps[lapCounter - 1].time;
  var sec = Math.floor((current / 1000) % 60);
  var min = Math.floor((current / (60 * 1000)) % 60);
  var hour = Math.floor(current / (60 * 60 * 1000));
  return '' + min + ' min ' + sec + ' sec';
}

/**
 * Stores the value of selected component among hours,minutes and ampm/seconds
 * fields.
 */
var active = 0;

/**
 * Sets the active time component and change's the element class.
 * @param {String} id Id of selected element.
 */
function toggleClass(id) {
  $(id).className = 'alarmTimeFocus';
  switch (id) {
    case 'hours':
    case 'hours_timer':
      active = 1;
      break;
    case 'minutes':
    case 'minutes_timer':
      active = 2;
      break;
    case 'ampm':
    case 'seconds_timer':
      active = 3;
      break;
  }
}

/**
 * Changes clock time based on user actions.
 * @param {String} comp Decides whether the method is called
 *        from timer or alarm.
 * @param {String} flag Increase(i) or Decrease(d).
 */
function changeTime(comp, flag) {

  var timerText = '';
  if (comp == 'timer') {
    timerText = '_timer';
  }
  /*
  if (0 == document.querySelectorAll('.alarmTimeFocus').length) {
    active = (timerText) ? 3 : 2;
  }*/
  var seconds, minutes, hours;
  switch (active) {
    case 3:
      if (timerText) {
        seconds = getTimeComponent('seconds', timerText, flag);
        $('seconds' + timerText).value = seconds;
        if (!(seconds == '00' && flag == 'i') &&
            !(seconds == '59' && flag == 'd')) {
          break;
        }
      } else {
        var val = $('ampm').value;
        if (val == 'am') {
          val = 'pm';
        } else {
          val = 'am';
        }
        $('ampm').value = val;
        break;
      }
    case 2:
      minutes = getTimeComponent('minutes', timerText, flag);
      $('minutes' + timerText).value = minutes;
      if (!(minutes == '00' && flag == 'i') &&
          !(minutes == '59' && flag == 'd')) {
        break;
      }
    case 1:
      hours = getTimeComponent('hours', timerText, flag);
      $('hours' + timerText).value = hours;
  }
}

/**
 * This method acts as a modulas operation on the time field. Moreover it is
 * used to increase/decrease the time components through UI.
 * @param {String} comp The time component (hours, minutes).
 * @param {String} timerText Decides whether the method is called
 *        from timer or alarm.
 * @param {String} flag Increase(i) or Decrease(d).
 * @return {String} val Increased or decreased value of the time component.
 */
function getTimeComponent(comp, timerText, flag) {
  var val = $(comp + timerText).value;
  if (!val) {
    val = 0;
  } else {
    val = parseInt(val, 10);
  }
  if (comp == 'hours') {
    if (flag == 'i') {
      if (timerText) {
        val = (val == 99) ? '0' : (val + 1);
      } else {
        val = (val == 12) ? '0' : (val + 1);
      }
    } else {
      if (timerText) {
        val = (val == 0) ? 99 : (val - 1);
      } else {
        val = (val == 0) ? 12 : (val - 1);
      }
    }
  } else {
    if (flag == 'i') {
      val = (val == 59) ? '0' : (val + 1);
    } else {
      val = (val == 0) ? 59 : (val - 1);
    }
  }
  if (val < 10) {
    val = '' + 0 + val;
  }
  return val;
}

/**
 * Validates the data entered in the hours, minutes and seconds fields.
 * @return {boolean} flag Indicates result of validation.
 */
function validateDigits() {
  var e = window.event;
  var keyunicode = e.keyCode;
  if (keyunicode >= ZERO_ASCII && keyunicode <= NINE_ASCII ||
          keyunicode == BACKSPACE_ASCII) {
    var letter = String.fromCharCode(keyunicode);
    var val;
    if (active == 1) {
      if (clockApp.selectedTab.id == 'alarm-tab') {
        val = $('hours').value;
        if (val > 12) {
          return false;
        }
      } else {
        val = $('hours_timer').value;
        if (val > 99) {
          return false;
        }
      }
    } else if (active == 2) {
      if (clockApp.selectedTab.id == 'alarm-tab') {
        val = $('minutes').value;
        if (val > 59) {
          return false;
        }
      } else {
        val = $('minutes_timer').value;
        if (val > 59) {
          return false;
        }
      }
    } else {
      if (clockApp.selectedTab.id == 'timer-tab') {
        val = $('seconds_timer').value;
        if (val > 59) {
          return false;
        }
      }
    }
    tempVal = val;
    return true;
  } else {
    return false;
  }
}

/**
 * Display's the select alarm sound screen.
 */
function selectSound() {
  var tabId = clockApp.selectedTab.id;
  if (tabId == 'alarm-tab') {
    $('clockContainer').style.display = 'none';
    $('functionBar').style.display = 'none';
  } else if (tabId == 'timer-tab') {
    $('outerDiv_timer').style.display = 'none';
    $('functionBar_timer').style.display = 'none';
    $('alarmSound_timer').style.display = 'none';
  }
  $('soundData').style.display = 'block';
}

/**
 * Set's the alarm sound.
 * @param {String} elementid The selected sound.
 */
function changeSound(elementid) {
  var tabId = clockApp.selectedTab.id;
  var timerText = '';
  if (tabId == 'alarm-tab') {
    $('clockContainer').style.display = '';
    $('functionBar').style.display = '';
  } else if (tabId == 'timer-tab') {
    $('outerDiv_timer').style.display = '';
    $('functionBar_timer').style.display = '';
    $('alarmSound_timer').style.display = '';
    timerText = '_timer';
  }
  $('soundData').style.display = 'none';
  elementid = '' + elementid;
  switch (elementid) {
    case 'digi':
      $('selectSound' + timerText).value = 'Sound: Digital';
      $('selectSound' + timerText).dataset.sound = 'audio_digi';
      break;
    case 'door':
      $('selectSound' + timerText).value = 'Sound: Door bell';
      $('selectSound' + timerText).dataset.sound = 'audio_door';
      break;
    case 'drum':
      $('selectSound' + timerText).value = 'Sound: Drum roll';
      $('selectSound' + timerText).dataset.sound = 'audio_drum';
      break;
    case 'lond':
      $('selectSound' + timerText).value = 'Sound: London bridge';
      $('selectSound' + timerText).dataset.sound = 'audio_lond';
      break;
    case 'robit':
      $('selectSound' + timerText).value = 'Sound: Robit';
      $('selectSound' + timerText).dataset.sound = 'audio_robit';
      break;
    case 'train':
      $('selectSound' + timerText).value = 'Sound: Train station';
      $('selectSound' + timerText).dataset.sound = 'audio_train';
      break;
    case 'twin':
      $('selectSound' + timerText).value = 'Sound: Twingle little star';
      $('selectSound' + timerText).dataset.sound = 'audio_twin';
      break;
  }
}

/**
 * Utility to set the window title.
 * @param  {String} title The title to be set.
 */
function setWindowTitle(title) {
  window.document.title = title;
}

/**
 * Utility to customize calendar DOM, to add buttons, borders etc. It's used
 * as a callback from calendar object.
 */
function customizeCalendarView() {
  var btns =
    document.querySelectorAll('.goog-date-picker-head .goog-date-picker-btn');
  if (btns.length > 1) {
    var leftBtn = btns[0];
    var leftBtnImg = '<div class="btn-left"></div>';
      leftBtn.innerHTML = leftBtnImg;
    var rightBtn = btns[1];
    var rightBtnImg = '<div class="btn-right"></div>';
      rightBtn.innerHTML = rightBtnImg;
  }
  var thead = document.querySelectorAll('.goog-date-picker ' +
          '.goog-date-picker-head')[0].parentNode;
  var row = document.createElement('tr');
  var cell = row.insertCell(0);
  cell.innerHTML = '';
  cell.className = 'padding-seperator';
  thead.appendChild(row);
}
